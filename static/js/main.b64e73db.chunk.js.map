{"version":3,"sources":["components/NeuralNetworkFunctionApproximator.js","components/VAEVisualizer.js","App.js","reportWebVitals.js","index.js"],"names":["NeuralNetworkVisualization","layers","weights","setWeights","useState","biases","setBiases","learningRate","setLearningRate","epoch","setEpoch","isTraining","setIsTraining","approximationData","setApproximationData","targetData","setTargetData","loss","setLoss","canvasRef","useRef","animationRef","networkRef","useEffect","initializeNetwork","newWeights","newBiases","i","length","layerWeights","layerBiases","j","neuronWeights","k","stddev","Math","sqrt","push","random","current","generateFunctionData","currentWeights","currentBiases","extendedDomain","PI","newTargetData","x","y","sin","yApprox","boundaryExtraSamples","ratio","newApproximationData","map","point","forward","input","activation","layer","bias","newActivation","sum","sigmoid","exp","backward","target","activations","preActivations","preActivation","outputError","o","deltas","currentDelta","newDelta","error","derivative","unshift","JSON","parse","stringify","change","reduce","err","stopTraining","cancelAnimationFrame","_approximationData$sa","canvas","ctx","getContext","clearRect","width","height","layerSpacing","minSpacingNeeded","neurons","neuronRadius","neuronSpacings","idealSpacing","max","layerHeights","sampleIndex","currentSample","currentOutput","layerNeurons","layerHeight","startY","prevLayerNeurons","prevLayerHeight","prevStartY","prevSpacing","currentSpacing","prevX","prevY","w","absW","abs","weightColor","min","weightWidth","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","midX","midY","fillStyle","textWidth","measureText","toFixed","fillRect","font","fillText","arc","fill","textAlign","textBaseline","inputText","outputText","targetText","outputWidth","targetWidth","maxWidth","React","createElement","className","type","step","value","onChange","e","parseFloat","disabled","onClick","startTraining","frameCount","train","trainEpoch","totalLoss","shuffledData","sort","slice","forEach","prev","requestAnimationFrame","resetNetwork","ref","ResponsiveContainer","LineChart","margin","top","right","left","bottom","data","CartesianGrid","strokeDasharray","XAxis","dataKey","label","position","offset","domain","tickFormatter","YAxis","angle","Tooltip","formatter","name","Legend","Line","dot","strokeWidth","isAnimationActive","InteractiveVAEDiffusion","currentPhase","setCurrentPhase","dimension1","setDimension1","dimension2","setDimension2","dimension3","setDimension3","trainingProgress","setTrainingProgress","trainingComplete","setTrainingComplete","draggedFlower","setDraggedFlower","trainedFlowers","setTrainedFlowers","timer","setTimeout","newProgress","clearTimeout","generateFlower","dim1","dim2","dim3","flowerColor","floor","bloomFactor","shapeFactor","transform","d","cx","cy","r","Array","_","petalLength","controlPoint","key","cos","opacity","generateLatentSpace","showTrainingPoints","radius","x1","y1","x2","y2","flower","id","color","bloom","shape","Fragment","noiseX","noiseY","fontSize","textAnchor","find","f","draggable","onDragStart","handleDragStart","viewBox","onDragOver","preventDefault","onDrop","handleDrop","generateTrainingVisualization","progress","colorDimension","discovered","strength","bloomDimension","shapeDimension","style","App","VAEVisualizer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b64e73db.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Neural Network Visualization Component\nconst NeuralNetworkVisualization = () => {\n  // Fixed network structure: 1 input, four hidden layers with architecture adjustments, 1 output\n  const layers = [1, 12, 10, 8, 6, 1];\n  \n  // State variables\n  const [weights, setWeights] = useState([]); // Network weights\n  const [biases, setBiases] = useState([]); // Network biases\n  const [learningRate, setLearningRate] = useState(0.05); // Learning rate\n  const [epoch, setEpoch] = useState(0); // Current training epoch\n  const [isTraining, setIsTraining] = useState(false); // Training status\n  const [approximationData, setApproximationData] = useState([]); // Approximation function data\n  const [targetData, setTargetData] = useState([]); // Target function data\n  const [loss, setLoss] = useState(1.0); // Current loss\n\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const networkRef = useRef({ weights: [], biases: [] });\n\n  // Initialize network\n  useEffect(() => {\n    initializeNetwork();\n  }, []);\n\n  // Initialize network weights and biases\n  const initializeNetwork = () => {\n    const newWeights = [];\n    const newBiases = [];\n    \n    for (let i = 0; i < layers.length - 1; i++) {\n      const layerWeights = [];\n      const layerBiases = [];\n      \n      for (let j = 0; j < layers[i + 1]; j++) {\n        const neuronWeights = [];\n        for (let k = 0; k < layers[i]; k++) {\n          // Initialize weights (using Xavier initialization)\n          const stddev = Math.sqrt(1.0 / (layers[i] + layers[i + 1]));\n          neuronWeights.push((Math.random() * 2 - 1) * stddev);\n        }\n        layerWeights.push(neuronWeights);\n        layerBiases.push((Math.random() * 2 - 1) * 0.05);\n      }\n      \n      newWeights.push(layerWeights);\n      newBiases.push(layerBiases);\n    }\n    \n    // Update component state\n    setWeights(newWeights);\n    setBiases(newBiases);\n    setEpoch(0);\n    setLoss(1.0);\n    \n    // Also update reference to ensure always using latest weights\n    networkRef.current = {\n      weights: newWeights,\n      biases: newBiases\n    };\n    \n    // Generate initial data\n    generateFunctionData(newWeights, newBiases);\n  };\n\n  // Generate target function data (more complex function with extended domain and higher boundary sampling)\n  const generateFunctionData = (currentWeights, currentBiases) => {\n    // Create two sets of samples:\n    // 1. Regular samples across the domain\n    // 2. Extra samples concentrated at boundaries\n    \n    const regularSamples = 40;\n    const boundaryExtraSamples = 20; // Extra samples focused on boundaries\n    const extendedDomain = 0.1 * Math.PI; // Extend domain by 10% of π\n    \n    const newTargetData = [];\n    \n    // Regular samples across the domain\n    for (let i = 0; i < regularSamples; i++) {\n      const x = -Math.PI - extendedDomain + ((2 * Math.PI + 2 * extendedDomain) * i) / (regularSamples - 1);\n      \n      // Complex target function: sin(x) + 0.5*sin(3x) * x^2/5\n      const y = Math.sin(x) + 0.5 * Math.sin(3 * x) * (x * x / 5);\n      \n      newTargetData.push({ x, y, yApprox: 0 });\n    }\n    \n    // Extra samples near left boundary\n    for (let i = 0; i < boundaryExtraSamples / 2; i++) {\n      const ratio = i / (boundaryExtraSamples / 2);\n      const x = -Math.PI - extendedDomain + ratio * Math.PI * 0.4; // Focus on first 40% of left side\n      \n      const y = Math.sin(x) + 0.5 * Math.sin(3 * x) * (x * x / 5);\n      newTargetData.push({ x, y, yApprox: 0 });\n    }\n    \n    // Extra samples near right boundary\n    for (let i = 0; i < boundaryExtraSamples / 2; i++) {\n      const ratio = i / (boundaryExtraSamples / 2);\n      const x = Math.PI * 0.6 + ratio * (Math.PI * 0.4 + extendedDomain); // Focus on last 40% of right side\n      \n      const y = Math.sin(x) + 0.5 * Math.sin(3 * x) * (x * x / 5);\n      newTargetData.push({ x, y, yApprox: 0 });\n    }\n    \n    setTargetData(newTargetData);\n    \n    // Calculate initial approximation function\n    if (currentWeights && currentWeights.length > 0) {\n      const newApproximationData = newTargetData.map(point => {\n        const yApprox = forward([point.x], currentWeights, currentBiases)[0];\n        return { x: point.x, y: point.y, yApprox };\n      });\n      \n      setApproximationData(newApproximationData);\n    }\n  };\n\n  // Forward propagation with SiLU (Swish) activation\n  const forward = (input, currentWeights, currentBiases) => {\n    let activation = [...input];\n    const weights = currentWeights || networkRef.current.weights;\n    const biases = currentBiases || networkRef.current.biases;\n    \n    for (let i = 0; i < weights.length; i++) {\n      const layer = weights[i];\n      const bias = biases[i];\n      const newActivation = [];\n      \n      for (let j = 0; j < layer.length; j++) {\n        const neuronWeights = layer[j];\n        let sum = bias[j];\n        \n        for (let k = 0; k < neuronWeights.length; k++) {\n          sum += neuronWeights[k] * activation[k];\n        }\n        \n        // Use SiLU/Swish activation function (x * sigmoid(x)) for hidden layers\n        if (i < weights.length - 1) {\n          // SiLU/Swish: x * sigmoid(x)\n          const sigmoid = 1 / (1 + Math.exp(-sum));\n          newActivation.push(sum * sigmoid);\n        } else {\n          newActivation.push(sum); // No activation function for output layer\n        }\n      }\n      \n      activation = [...newActivation];\n    }\n    \n    return activation;\n  };\n\n  // Backward propagation with SiLU derivative\n  const backward = (input, target) => {\n    const weights = networkRef.current.weights;\n    const biases = networkRef.current.biases;\n    \n    // Forward pass and save activations and pre-activations for each layer\n    const activations = [input]; // Outputs after activation\n    const preActivations = []; // Inputs before activation\n    let activation = [...input];\n    \n    for (let i = 0; i < weights.length; i++) {\n      const layer = weights[i];\n      const bias = biases[i];\n      const newActivation = [];\n      const preActivation = [];\n      \n      for (let j = 0; j < layer.length; j++) {\n        const neuronWeights = layer[j];\n        let sum = bias[j];\n        \n        for (let k = 0; k < neuronWeights.length; k++) {\n          sum += neuronWeights[k] * activation[k];\n        }\n        \n        preActivation.push(sum);\n        \n        // Use SiLU activation for hidden layers\n        if (i < weights.length - 1) {\n          const sigmoid = 1 / (1 + Math.exp(-sum));\n          newActivation.push(sum * sigmoid);\n        } else {\n          newActivation.push(sum);\n        }\n      }\n      \n      preActivations.push(preActivation);\n      activation = [...newActivation];\n      activations.push(newActivation);\n    }\n    \n    // Calculate output layer error\n    const output = activations[activations.length - 1];\n    const outputError = output.map((o, i) => o - target[i]);\n    \n    // Backpropagate error\n    const deltas = [outputError];\n    \n    for (let i = weights.length - 1; i > 0; i--) {\n      const currentDelta = deltas[0];\n      const newDelta = [];\n      \n      for (let j = 0; j < layers[i]; j++) {\n        let error = 0;\n        \n        for (let k = 0; k < currentDelta.length; k++) {\n          error += currentDelta[k] * weights[i][k][j];\n        }\n        \n        // SiLU/Swish derivative: sigmoid(x) + x*sigmoid(x)*(1-sigmoid(x))\n        const x = preActivations[i-1][j];\n        const sigmoid = 1 / (1 + Math.exp(-x));\n        const derivative = sigmoid + x * sigmoid * (1 - sigmoid);\n        \n        newDelta.push(error * derivative);\n      }\n      \n      deltas.unshift(newDelta);\n    }\n    \n    // Create deep copies of weights and biases\n    const newWeights = JSON.parse(JSON.stringify(weights));\n    const newBiases = JSON.parse(JSON.stringify(biases));\n    \n    // Update weights and biases\n    for (let i = 0; i < weights.length; i++) {\n      for (let j = 0; j < weights[i].length; j++) {\n        for (let k = 0; k < weights[i][j].length; k++) {\n          const change = learningRate * deltas[i][j] * activations[i][k];\n          newWeights[i][j][k] -= change;\n        }\n        \n        newBiases[i][j] -= learningRate * deltas[i][j];\n      }\n    }\n    \n    // Update reference and state\n    networkRef.current = {\n      weights: newWeights,\n      biases: newBiases\n    };\n    \n    setWeights([...newWeights]);\n    setBiases([...newBiases]);\n    \n    // Calculate mean squared error\n    return outputError.reduce((sum, err) => sum + err * err, 0) / outputError.length;\n  };\n\n  // Train one epoch\n  const trainEpoch = () => {\n    let totalLoss = 0;\n    \n    // Randomly shuffle training data\n    const shuffledData = [...targetData].sort(() => Math.random() - 0.5);\n    \n    // Mini-batch gradient descent\n    const batchSize = 10;\n    for (let i = 0; i < shuffledData.length; i += batchSize) {\n      const batch = shuffledData.slice(i, Math.min(i + batchSize, shuffledData.length));\n      \n      batch.forEach(point => {\n        const error = backward([point.x], [point.y]);\n        totalLoss += error;\n      });\n    }\n    \n    totalLoss /= shuffledData.length;\n    \n    // Update approximation function data\n    const newApproximationData = targetData.map(point => {\n      const yApprox = forward([point.x], networkRef.current.weights, networkRef.current.biases)[0];\n      return { x: point.x, y: point.y, yApprox };\n    });\n    \n    // Update UI state\n    setApproximationData([...newApproximationData]);\n    setLoss(totalLoss);\n    setEpoch(prev => prev + 1);\n    \n    // For more complex functions, allow more training epochs before stopping\n    return (totalLoss < 0.0001 && epoch >= 300) || epoch >= 2000;\n  };\n\n  // Start training\n  const startTraining = () => {\n    if (isTraining) return;\n    \n    setIsTraining(true);\n    let frameCount = 0;\n    \n    const train = () => {\n      frameCount++;\n      \n      // Execute training every few frames to avoid UI blocking\n      if (frameCount % 3 === 0) {\n        const converged = trainEpoch();\n        \n        if (converged || epoch >= 1000) {\n          setIsTraining(false);\n          return;\n        }\n      }\n      \n      animationRef.current = requestAnimationFrame(train);\n    };\n    \n    animationRef.current = requestAnimationFrame(train);\n  };\n\n  // Stop training\n  const stopTraining = () => {\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    setIsTraining(false);\n  };\n\n  // Reset network\n  const resetNetwork = () => {\n    stopTraining();\n    initializeNetwork();\n  };\n\n  // Draw neural network\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Adjust canvas size for better visibility\n    canvas.width = 700; // Increase canvas width\n    canvas.height = 500; // Increase canvas height\n    \n    const margin = 70; // Increased margin\n    const width = canvas.width - 2 * margin;\n    const height = canvas.height - 2 * margin;\n    \n    const layerSpacing = width / (layers.length - 1);\n    const neuronRadius = 12; // Reduced neuron radius\n    \n    // Calculate minimum spacing needed for each layer\n    const minSpacingNeeded = layers.map(neurons => {\n      // At least 2.5 * neuron diameter between centers to avoid overlap\n      return neuronRadius * 5;\n    });\n    \n    // Calculate actual spacing based on available height and neurons\n    const neuronSpacings = layers.map((neurons, i) => {\n      const idealSpacing = height / (neurons);\n      // Use at least minimum spacing or ideal spacing, whichever is larger\n      return Math.max(minSpacingNeeded[i], idealSpacing);\n    });\n    \n    // Calculate layer heights\n    const layerHeights = layers.map((neurons, i) => (neurons - 1) * neuronSpacings[i]);\n    \n    // Select current data sample for display\n    const sampleIndex = epoch % targetData.length;\n    const currentSample = targetData[sampleIndex] || { x: 0, y: 0 };\n    \n    // Calculate network output for current sample\n    const currentOutput = approximationData[sampleIndex]?.yApprox || 0;\n    \n    // Draw neurons and connections\n    for (let i = 0; i < layers.length; i++) {\n      const layerNeurons = layers[i];\n      const layerHeight = layerHeights[i];\n      const startY = margin + (height - layerHeight) / 2;\n      \n      // Draw connections first (so neurons are drawn on top)\n      if (i > 0) {\n        const prevLayerNeurons = layers[i - 1];\n        const prevLayerHeight = layerHeights[i - 1];\n        const prevStartY = margin + (height - prevLayerHeight) / 2;\n        const prevSpacing = neuronSpacings[i-1];\n        const currentSpacing = neuronSpacings[i];\n        \n        for (let j = 0; j < layerNeurons; j++) {\n          const x = margin + i * layerSpacing;\n          const y = startY + j * currentSpacing;\n          \n          for (let k = 0; k < prevLayerNeurons; k++) {\n            const prevX = margin + (i - 1) * layerSpacing;\n            const prevY = prevStartY + k * prevSpacing;\n            \n            // Set connection color and width based on weight\n            if (networkRef.current.weights.length > 0 && i - 1 < networkRef.current.weights.length) {\n              const w = networkRef.current.weights[i - 1][j] ? networkRef.current.weights[i - 1][j][k] || 0 : 0;\n              const absW = Math.abs(w);\n              \n              // Only draw connections with significant weights\n              if (absW > 0.05) {\n                // Weight color: green for positive, red for negative\n                const weightColor = w > 0 ? `rgba(0, 128, 0, ${Math.min(absW, 1)})` : `rgba(255, 0, 0, ${Math.min(absW, 1)})`;\n                \n                // Weight width: thicker for larger absolute values\n                const weightWidth = 0.5 + 2 * Math.min(absW, 1);\n                \n                ctx.beginPath();\n                ctx.moveTo(prevX + neuronRadius, prevY);\n                ctx.lineTo(x - neuronRadius, y);\n                ctx.strokeStyle = weightColor;\n                ctx.lineWidth = weightWidth;\n                ctx.stroke();\n                \n                // Only show weight values for significant weights\n                if (absW > 0.3) {\n                  // Show weight value\n                  const midX = (prevX + neuronRadius + x - neuronRadius) / 2;\n                  const midY = (prevY + y) / 2;\n                  \n                  // White background for text clarity\n                  ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n                  const textWidth = ctx.measureText(w.toFixed(2)).width;\n                  ctx.fillRect(midX - textWidth/2 - 2, midY - 7, textWidth + 4, 14);\n                  \n                  ctx.fillStyle = '#000000';\n                  ctx.font = '9px Arial';\n                  ctx.fillText(w.toFixed(2), midX, midY);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // Now draw neurons on top of connections\n      for (let j = 0; j < layerNeurons; j++) {\n        const x = margin + i * layerSpacing;\n        const y = startY + j * neuronSpacings[i];\n        \n        // Draw neuron\n        ctx.beginPath();\n        ctx.arc(x, y, neuronRadius, 0, 2 * Math.PI);\n        ctx.fillStyle = i === 0 ? '#88CCEE' : i === layers.length - 1 ? '#DDCC77' : '#44AA99';\n        ctx.fill();\n        ctx.strokeStyle = '#000000';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n        \n        // Show neuron number\n        ctx.fillStyle = '#000000';\n        ctx.font = '9px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(`${i+1}-${j+1}`, x, y);\n        \n        // Show input/output values - fixed position and display\n        if (i === 0) { // Input layer\n          ctx.fillStyle = '#000000';\n          ctx.font = 'bold 10px Arial';\n          ctx.textAlign = 'right';\n          \n          // Add background for better text clarity\n          const inputText = `Input x: ${currentSample.x.toFixed(2)}`;\n          const textWidth = ctx.measureText(inputText).width;\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.fillRect(x - neuronRadius - 8 - textWidth, y - 7, textWidth + 4, 14);\n          \n          ctx.fillStyle = '#000000';\n          ctx.fillText(inputText, x - neuronRadius - 8, y);\n        } else if (i === layers.length - 1) { // Output layer\n          // Add background box for output\n          const outputText = `Output: ${currentOutput.toFixed(2)}`;\n          const targetText = `Target: ${currentSample.y.toFixed(2)}`;\n          \n          const outputWidth = ctx.measureText(outputText).width;\n          const targetWidth = ctx.measureText(targetText).width;\n          const maxWidth = Math.max(outputWidth, targetWidth);\n          \n          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.fillRect(x + neuronRadius + 8, y - 15, maxWidth + 8, 30);\n          \n          ctx.fillStyle = '#0000AA';\n          ctx.font = 'bold 10px Arial';\n          ctx.textAlign = 'left';\n          ctx.fillText(outputText, x + neuronRadius + 12, y - 5);\n          \n          ctx.fillStyle = '#AA0000';\n          ctx.fillText(targetText, x + neuronRadius + 12, y + 10);\n        }\n      }\n    }\n  }, [weights, epoch, targetData, approximationData]);\n\n  // Cleanup on component unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []);\n\n  // Render component\n  return (\n    <div className=\"w-full p-4 bg-white\">\n      <h2 className=\"text-xl font-bold mb-4 text-center\">Neural Network Learning Visualization (Complex Function)</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n        <div className=\"bg-gray-50 p-4 rounded\">\n          <h3 className=\"text-lg font-semibold mb-2\">Control Panel</h3>\n          \n          <div className=\"mb-4\">\n            <p className=\"text-sm mb-2\">Network Structure: 1-12-10-8-6-1 (fixed, pyramid architecture)</p>\n            <label className=\"block text-sm font-medium mb-1\">Learning Rate: {learningRate.toFixed(3)}</label>\n            <input\n              type=\"range\"\n              min=\"0.001\"\n              max=\"0.2\"\n              step=\"0.001\"\n              value={learningRate}\n              onChange={e => setLearningRate(parseFloat(e.target.value))}\n              className=\"w-full\"\n              disabled={isTraining}\n            />\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <button\n              onClick={isTraining ? stopTraining : startTraining}\n              className={`px-4 py-2 rounded ${isTraining ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'} text-white font-medium`}\n            >\n              {isTraining ? 'Stop Training' : 'Start Training'}\n            </button>\n            \n            <button\n              onClick={resetNetwork}\n              className=\"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded\"\n              disabled={isTraining}\n            >\n              Reset Network\n            </button>\n          </div>\n          \n          <div className=\"mt-4\">\n            <p className=\"text-sm\">Current Epoch: <span className=\"font-semibold\">{epoch}</span></p>\n            <p className=\"text-sm\">Current Loss: <span className=\"font-semibold\">{loss.toFixed(6)}</span></p>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-50 p-4 rounded\">\n          <h3 className=\"text-lg font-semibold mb-2\">Network Structure Visualization</h3>\n          <div className=\"border rounded bg-white\">\n            <canvas ref={canvasRef} width=\"500\" height=\"300\" className=\"w-full h-64\" />\n          </div>\n          <p className=\"text-xs mt-1 text-gray-500\">Colors represent weights: green for positive, red for negative. Line thickness indicates weight magnitude.</p>\n        </div>\n      </div>\n      \n      <div className=\"bg-gray-50 p-4 rounded\">\n        <h3 className=\"text-lg font-semibold mb-2\">Function Approximation</h3>\n        <div className=\"border rounded bg-white\">\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart\n              margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n              data={approximationData}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"x\"\n                label={{ value: 'x', position: 'bottom', offset: 0 }}\n                domain={[-Math.PI * 1.1, Math.PI * 1.1]}\n                tickFormatter={(value) => value.toFixed(2)}\n              />\n              <YAxis\n                label={{ value: 'y', angle: -90, position: 'left', offset: -5 }}\n                domain={[-2, 2]}\n              />\n              <Tooltip formatter={(value, name) => [value.toFixed(4), name]} />\n              <Legend />\n              <Line\n                type=\"monotone\"\n                dataKey=\"y\"\n                name=\"Target Function\"\n                stroke=\"#8884d8\"\n                dot={false}\n                strokeWidth={2}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"yApprox\"\n                name=\"Approximation Function\"\n                stroke=\"#82ca9d\"\n                dot={false}\n                strokeWidth={2}\n                isAnimationActive={false}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"mt-2 text-sm\">\n          <p><span className=\"inline-block w-4 h-2 bg-purple-500 mr-1\"></span> Target Function: sin(x) + 0.5*sin(3x) * x²/5</p>\n          <p><span className=\"inline-block w-4 h-2 bg-green-500 mr-1\"></span> Approximation Function: Current network output</p>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 p-4 bg-gray-50 rounded\">\n        <h3 className=\"text-lg font-semibold mb-2\">Training Data and Backpropagation</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-medium mb-1\">Training Data Generation</h4>\n            <p className=\"text-sm mb-1\">How training data is created:</p>\n            <ol className=\"text-sm list-decimal list-inside space-y-1\">\n              <li>Sample 50 x values uniformly in range [-π, π]</li>\n              <li>For each x, calculate y = sin(x) as the target</li>\n              <li>These (x, y) pairs form the training dataset</li>\n              <li>During training, samples are randomly selected</li>\n            </ol>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-1\">Backpropagation Process</h4>\n            <p className=\"text-sm\">\n              Backpropagation is the core learning algorithm for neural networks:\n            </p>\n            <ul className=\"text-sm list-disc list-inside space-y-1\">\n              <li>Green/red connections show weight values and changes</li>\n              <li>Input node displays current sample's x value</li>\n              <li>Output node shows both network output and target value</li>\n              <li>As training progresses, the approximation function (green line) gets closer to the target function (purple line)</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NeuralNetworkVisualization;\n","import React, { useState, useEffect } from 'react';\n\nconst InteractiveVAEDiffusion = () => {\n  // State for tracking the current view/phase\n  const [currentPhase, setCurrentPhase] = useState('training'); // training, generation, diffusion\n  \n  // Latent vector dimensions with initial values\n  const [dimension1, setDimension1] = useState(0);\n  const [dimension2, setDimension2] = useState(0);\n  const [dimension3, setDimension3] = useState(0);\n  \n  // Training state\n  const [trainingProgress, setTrainingProgress] = useState(0);\n  const [trainingComplete, setTrainingComplete] = useState(false);\n  const [draggedFlower, setDraggedFlower] = useState(null);\n  const [trainedFlowers, setTrainedFlowers] = useState([]);\n  \n  // Track training epochs\n  useEffect(() => {\n    if (trainedFlowers.length > 0 && trainingProgress < 100 && currentPhase === 'training') {\n      const timer = setTimeout(() => {\n        setTrainingProgress(prev => {\n          const newProgress = prev + (10 / trainedFlowers.length);\n          if (newProgress >= 100) {\n            setTrainingComplete(true);\n            return 100;\n          }\n          return newProgress;\n        });\n      }, 1000);\n      return () => clearTimeout(timer);\n    }\n  }, [trainedFlowers, trainingProgress, currentPhase]);\n  \n  // Available training flowers\n  const trainingFlowers = [\n    { id: 1, color: -0.8, bloom: 0.7, shape: 0.2, name: \"Red tulip, full bloom\" },\n    { id: 2, color: 0.8, bloom: 0.6, shape: 0.3, name: \"Blue daisy, full bloom\" },\n    { id: 3, color: -0.7, bloom: -0.8, shape: 0.1, name: \"Red bud flower\" },\n    { id: 4, color: 0.7, bloom: -0.5, shape: -0.7, name: \"Blue rose bud\" }\n  ];\n  \n  // Function to generate SVG representation of flower based on latent dimensions\n  const generateFlower = (dim1, dim2, dim3) => {\n    // Calculate features based on dimensions\n    // dim1: Color (red to blue)\n    // dim2: Bloom stage (bud to full bloom)\n    // dim3: Shape (tulip-like to rose-like)\n    \n    // Color interpolation from red to blue\n    const redValue = Math.max(0, Math.min(255, 255 - Math.floor((dim1 + 1) * 127.5)));\n    const blueValue = Math.max(0, Math.min(255, Math.floor((dim1 + 1) * 127.5)));\n    const flowerColor = `rgb(${redValue}, 50, ${blueValue})`;\n    \n    // Bloom level (affects petal size and opening)\n    const bloomFactor = Math.max(0.1, (dim2 + 1) * 0.45 + 0.1); // 0.1 to 1.0\n    \n    // Shape factor (affects petal shape)\n    const shapeFactor = dim3; // -1 to 1 (negative: pointed petals, positive: round petals)\n    \n    // Stem\n    const stemHeight = 80;\n    const stemWidth = 4;\n    \n    return (\n      <g transform=\"translate(150, 150)\">\n        {/* Stem */}\n        <rect \n          x={-stemWidth/2} \n          y={-5} \n          width={stemWidth} \n          height={stemHeight} \n          fill=\"#2E8B57\" \n        />\n        \n        {/* Leaves */}\n        <path \n          d={`M ${-stemWidth/2},${stemHeight*0.3} C ${-20},${stemHeight*0.2} ${-30},${stemHeight*0.4} ${-15},${stemHeight*0.5}`} \n          fill=\"#3CB371\" \n          stroke=\"#2E8B57\" \n          strokeWidth=\"1\" \n        />\n        <path \n          d={`M ${stemWidth/2},${stemHeight*0.6} C ${20},${stemHeight*0.5} ${30},${stemHeight*0.7} ${15},${stemHeight*0.8}`} \n          fill=\"#3CB371\" \n          stroke=\"#2E8B57\" \n          strokeWidth=\"1\" \n        />\n        \n        {/* Flower center */}\n        <circle cx=\"0\" cy=\"-8\" r={10 * bloomFactor} fill=\"#FFD700\" />\n        \n        {/* Petals - number and shape vary based on dimensions */}\n        {[...Array(shapeFactor < 0 ? 5 : 8)].map((_, i) => {\n          const angle = (i * 2 * Math.PI) / (shapeFactor < 0 ? 5 : 8);\n          const petalLength = 30 * bloomFactor;\n          const petalWidth = 15 * bloomFactor;\n          \n          // Shape affects how pointed or round the petals are\n          const controlPointFactor = shapeFactor < 0 ? 0.3 : 0.8;\n          const controlPoint = petalLength * controlPointFactor;\n          \n          return (\n            <path\n              key={i}\n              d={`\n                M 0,-8\n                Q ${Math.cos(angle) * controlPoint},${Math.sin(angle) * controlPoint - 8} \n                  ${Math.cos(angle) * petalLength},${Math.sin(angle) * petalLength - 8}\n                Q ${Math.cos(angle + 0.2) * controlPoint},${Math.sin(angle + 0.2) * controlPoint - 8}\n                  0,-8\n              `}\n              fill={flowerColor}\n              stroke={flowerColor}\n              strokeWidth=\"1\"\n              opacity=\"0.9\"\n            />\n          );\n        })}\n      </g>\n    );\n  };\n  \n  // Handle drag start for training data\n  const handleDragStart = (flower) => {\n    setDraggedFlower(flower);\n  };\n  \n  // Handle drop for training\n  const handleDrop = () => {\n    if (draggedFlower && !trainedFlowers.find(flower => flower.id === draggedFlower.id)) {\n      setTrainedFlowers([...trainedFlowers, draggedFlower]);\n      setDraggedFlower(null);\n    }\n  };\n  \n  // Generate a representation of the latent space\n  const generateLatentSpace = (dim1, dim2, dim3, showTrainingPoints) => {\n    // Position in latent space\n    const x = 75 + dim1 * 40;\n    const y = 75 + dim2 * 40;\n    const radius = 5 + (dim3 + 1) * 2;\n    \n    return (\n      <g>\n        {/* Latent space grid */}\n        <rect x=\"25\" y=\"25\" width=\"100\" height=\"100\" fill=\"#f0f9ff\" stroke=\"#3498db\" strokeWidth=\"1\" />\n        <line x1=\"25\" y1=\"75\" x2=\"125\" y2=\"75\" stroke=\"#3498db\" strokeWidth=\"0.5\" />\n        <line x1=\"75\" y1=\"25\" x2=\"75\" y2=\"125\" stroke=\"#3498db\" strokeWidth=\"0.5\" />\n        \n        {/* Show training points in latent space */}\n        {showTrainingPoints && trainedFlowers.map(flower => (\n          <circle \n            key={flower.id} \n            cx={75 + flower.color * 40} \n            cy={75 + flower.bloom * 40} \n            r={5 + (flower.shape + 1) * 2} \n            fill=\"#3498db\" \n            opacity=\"0.6\" \n          />\n        ))}\n        \n        {/* Current point */}\n        {(currentPhase === 'generation' || currentPhase === 'diffusion') && (\n          <circle cx={x} cy={y} r={radius} fill=\"#e74c3c\" />\n        )}\n        \n        {/* Diffusion noise cloud around point */}\n        {currentPhase === 'diffusion' && (\n          <>\n            {[...Array(15)].map((_, i) => {\n              const noiseX = x + (Math.random() - 0.5) * 20;\n              const noiseY = y + (Math.random() - 0.5) * 20;\n              return (\n                <circle \n                  key={i} \n                  cx={noiseX} \n                  cy={noiseY} \n                  r={2} \n                  fill=\"#e74c3c\" \n                  opacity={0.2 + Math.random() * 0.2} \n                />\n              );\n            })}\n          </>\n        )}\n        \n        {/* Axis labels */}\n        <text x=\"125\" y=\"78\" fontSize=\"10\" textAnchor=\"start\">Color</text>\n        <text x=\"75\" y=\"20\" fontSize=\"10\" textAnchor=\"middle\">Bloom</text>\n        <text x=\"20\" y=\"20\" fontSize=\"10\" textAnchor=\"start\">Shape (size)</text>\n      </g>\n    );\n  };\n  \n  // Generate animated training visualization\n  const generateTrainingVisualization = () => {\n    const progress = trainingProgress / 100;\n    \n    // Dimension discovery animation based on progress\n    const colorDimension = {\n      discovered: progress > 0.3,\n      strength: Math.min(1, (progress - 0.3) * 5)\n    };\n    \n    const bloomDimension = {\n      discovered: progress > 0.5,\n      strength: Math.min(1, (progress - 0.5) * 5)\n    };\n    \n    const shapeDimension = {\n      discovered: progress > 0.7,\n      strength: Math.min(1, (progress - 0.7) * 5)\n    };\n    \n    return (\n      <div className=\"w-full p-4 bg-white rounded-lg shadow\">\n        <h3 className=\"text-lg font-medium mb-4 text-center\">\n          {trainingComplete ? \"Training Complete!\" : `Training Progress: ${Math.floor(trainingProgress)}%`}\n        </h3>\n        \n        <div className=\"w-full bg-gray-200 rounded-full h-4 mb-6\">\n          <div \n            className=\"bg-blue-600 h-4 rounded-full transition-all duration-1000\" \n            style={{ width: `${trainingProgress}%` }}\n          ></div>\n        </div>\n        \n        <div className=\"flex justify-around items-center\">\n          <div className=\"w-1/3\">\n            <h4 className=\"text-md font-medium mb-2 text-center\">Discovering Dimensions</h4>\n            \n            <div className=\"mb-4\">\n              <div className=\"flex items-center mb-1\">\n                <div className=\"w-1/4 pr-2\">\n                  <div \n                    className={`h-4 rounded transition-all duration-1000 ${\n                      colorDimension.discovered \n                        ? \"bg-gradient-to-r from-red-500 to-blue-500\" \n                        : \"bg-gray-200\"\n                    }`}\n                    style={{ opacity: colorDimension.discovered ? colorDimension.strength : 0.3 }}\n                  ></div>\n                </div>\n                <div className=\"w-3/4\">\n                  <span className=\"text-sm font-medium\">Dimension 1: Flower Color</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mb-4\">\n              <div className=\"flex items-center mb-1\">\n                <div className=\"w-1/4 pr-2\">\n                  <div \n                    className={`h-4 rounded transition-all duration-1000 ${\n                      bloomDimension.discovered \n                        ? \"bg-gradient-to-r from-green-100 to-green-500\" \n                        : \"bg-gray-200\"\n                    }`}\n                    style={{ opacity: bloomDimension.discovered ? bloomDimension.strength : 0.3 }}\n                  ></div>\n                </div>\n                <div className=\"w-3/4\">\n                  <span className=\"text-sm font-medium\">Dimension 2: Bloom Stage</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mb-2\">\n              <div className=\"flex items-center mb-1\">\n                <div className=\"w-1/4 pr-2\">\n                  <div \n                    className={`h-4 rounded transition-all duration-1000 ${\n                      shapeDimension.discovered \n                        ? \"bg-gradient-to-r from-purple-100 to-purple-500\" \n                        : \"bg-gray-200\"\n                    }`}\n                    style={{ opacity: shapeDimension.discovered ? shapeDimension.strength : 0.3 }}\n                  ></div>\n                </div>\n                <div className=\"w-3/4\">\n                  <span className=\"text-sm font-medium\">Dimension 3: Flower Shape</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"w-1/3\">\n            <h4 className=\"text-md font-medium mb-2 text-center\">Latent Space Formation</h4>\n            <svg width=\"150\" height=\"150\" viewBox=\"0 0 150 150\" className=\"mx-auto\">\n              {generateLatentSpace(0, 0, 0, true)}\n            </svg>\n          </div>\n        </div>\n        \n        {trainingComplete && (\n          <div className=\"mt-6 text-center\">\n            <button \n              onClick={() => setCurrentPhase('generation')}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n            >\n              Training Complete - Generate New Flowers!\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // Generate latent space exploration UI\n  const generateLatentExploration = () => {\n    return (\n      <div className=\"w-full p-6 bg-white rounded-lg shadow\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h3 className=\"text-lg font-semibold\">Explore Latent Space</h3>\n          <div>\n            <button \n              onClick={() => setCurrentPhase('diffusion')}\n              className={`px-4 py-2 rounded transition-colors mr-2 ${\n                currentPhase === 'generation'\n                  ? \"bg-purple-600 text-white hover:bg-purple-700\" \n                  : \"bg-gray-200 text-gray-800 hover:bg-gray-300\"\n              }`}\n            >\n              Try Latent Diffusion\n            </button>\n            <button \n              onClick={() => setCurrentPhase('generation')}\n              className={`px-4 py-2 rounded transition-colors ${\n                currentPhase === 'diffusion'\n                  ? \"bg-blue-600 text-white hover:bg-blue-700\" \n                  : \"bg-gray-200 text-gray-800 hover:bg-gray-300\"\n              }`}\n            >\n              Basic Generation\n            </button>\n          </div>\n        </div>\n        \n        <div className=\"flex items-start\">\n          <div className=\"w-1/3 pr-4\">\n            <h4 className=\"text-md font-medium mb-3\">Adjust Latent Vector</h4>\n            \n            <div className=\"mb-6\">\n              <label className=\"flex items-center justify-between mb-2\">\n                <span className=\"font-medium\">Flower Color:</span>\n                <span className=\"text-blue-600\">{dimension1.toFixed(2)}</span>\n              </label>\n              <input \n                type=\"range\" \n                min=\"-1.5\" \n                max=\"1.5\" \n                step=\"0.01\" \n                value={dimension1} \n                onChange={(e) => setDimension1(parseFloat(e.target.value))} \n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>Red</span>\n                <span>Purple</span>\n                <span>Blue</span>\n              </div>\n            </div>\n            \n            <div className=\"mb-6\">\n              <label className=\"flex items-center justify-between mb-2\">\n                <span className=\"font-medium\">Bloom Stage:</span>\n                <span className=\"text-blue-600\">{dimension2.toFixed(2)}</span>\n              </label>\n              <input \n                type=\"range\" \n                min=\"-1.5\" \n                max=\"1.5\" \n                step=\"0.01\" \n                value={dimension2} \n                onChange={(e) => setDimension2(parseFloat(e.target.value))} \n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>Bud</span>\n                <span>Partial</span>\n                <span>Full Bloom</span>\n              </div>\n            </div>\n            \n            <div className=\"mb-2\">\n              <label className=\"flex items-center justify-between mb-2\">\n                <span className=\"font-medium\">Flower Shape:</span>\n                <span className=\"text-blue-600\">{dimension3.toFixed(2)}</span>\n              </label>\n              <input \n                type=\"range\" \n                min=\"-1.5\" \n                max=\"1.5\" \n                step=\"0.01\" \n                value={dimension3} \n                onChange={(e) => setDimension3(parseFloat(e.target.value))} \n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>Tulip-like</span>\n                <span>Mixed</span>\n                <span>Rose-like</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"w-1/3 px-4\">\n            <h4 className=\"text-md font-medium mb-3 text-center\">Latent Space</h4>\n            <div className=\"bg-gray-100 p-2 rounded\">\n              <svg width=\"200\" height=\"200\" viewBox=\"0 0 150 150\" className=\"mx-auto\">\n                {generateLatentSpace(dimension1, dimension2, dimension3, true)}\n              </svg>\n              {Math.abs(dimension1) > 1 || Math.abs(dimension2) > 1 || Math.abs(dimension3) > 1 ? (\n                <div className=\"text-xs text-center mt-2 p-1 bg-yellow-100 rounded\">\n                  <span className=\"font-medium\">Exploring beyond training data!</span>\n                </div>\n              ) : null}\n            </div>\n          </div>\n          \n          <div className=\"w-1/3 pl-4\">\n            <h4 className=\"text-md font-medium mb-3 text-center\">Generated Flower</h4>\n            <div className=\"bg-gray-100 p-2 rounded\">\n              <svg width=\"200\" height=\"200\" viewBox=\"0 0 300 300\" className=\"mx-auto\">\n                {generateFlower(dimension1, dimension2, dimension3)}\n              </svg>\n            </div>\n            \n            {currentPhase === 'diffusion' && (\n              <div className=\"mt-3 p-2 bg-white rounded shadow-md\">\n                <p className=\"text-sm font-medium mb-1 text-center\">Diffusion Process</p>\n                <div className=\"flex justify-center space-x-2\">\n                  {[...Array(5)].map((_, i) => {\n                    const opacity = 0.2 + (i / 5) * 0.8;\n                    return (\n                      <div key={i} className=\"w-8 h-8 bg-gray-100 rounded overflow-hidden\" style={{ opacity }}>\n                        <svg width=\"32\" height=\"32\" viewBox=\"0 0 300 300\">\n                          {generateFlower(\n                            dimension1 + (0.5 - i/10) * (Math.random() - 0.5), \n                            dimension2 + (0.5 - i/10) * (Math.random() - 0.5), \n                            dimension3 + (0.5 - i/10) * (Math.random() - 0.5)\n                          )}\n                        </svg>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n            \n            {(Math.abs(dimension1) > 1 || Math.abs(dimension2) > 1 || Math.abs(dimension3) > 1) && (\n              <div className=\"mt-2 p-2 bg-yellow-50 rounded text-xs\">\n                <p className=\"font-medium\">Novel Generation</p>\n                <p>This flower combines features in ways not seen in training data!</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col p-4 max-w-4xl mx-auto bg-gray-50 rounded-lg shadow-md\">\n      <h2 className=\"text-2xl font-bold text-center mb-6\">Interactive VAE & Latent Diffusion</h2>\n      \n      {/* Training Data Section */}\n      {currentPhase === 'training' && (\n        <div className=\"mb-8\">\n          <div className=\"w-full p-4 bg-white rounded-lg shadow mb-4\">\n            <h3 className=\"text-lg font-medium mb-4\">Step 1: Drag Training Data to the Model</h3>\n            \n            <div className=\"flex flex-wrap justify-center gap-4 mb-4\">\n              {trainingFlowers.map(flower => (\n                <div \n                  key={flower.id}\n                  className={`p-2 rounded border-2 cursor-pointer transition-all ${\n                    trainedFlowers.find(f => f.id === flower.id) \n                      ? \"border-green-500 bg-green-50\" \n                      : \"border-blue-200 bg-blue-50 hover:border-blue-400\"\n                  }`}\n                  draggable={!trainedFlowers.find(f => f.id === flower.id)}\n                  onDragStart={() => handleDragStart(flower)}\n                >\n                  <svg width=\"100\" height=\"100\" viewBox=\"0 0 300 300\">\n                    {generateFlower(flower.color, flower.bloom, flower.shape)}\n                  </svg>\n                  <p className=\"text-xs text-center mt-1\">{flower.name}</p>\n                </div>\n              ))}\n            </div>\n            \n            <div \n              className={`p-4 border-2 border-dashed rounded-lg text-center transition-all ${\n                draggedFlower ? \"border-blue-500 bg-blue-50\" : \"border-gray-300\"\n              }`}\n              onDragOver={(e) => e.preventDefault()}\n              onDrop={handleDrop}\n            >\n              <div className=\"text-lg font-medium mb-1\">\n                {draggedFlower \n                  ? \"Drop to Train Model\" \n                  : trainedFlowers.length > 0 \n                    ? `Training with ${trainedFlowers.length} flowers` \n                    : \"Drag Flowers Here to Train the VAE\"\n                }\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                {trainedFlowers.length === 0 \n                  ? \"Add at least 2 flowers to start training\" \n                  : trainedFlowers.length < 4 \n                    ? \"Add more flowers for better results\" \n                    : \"All flowers added - training in progress!\"\n                }\n              </div>\n            </div>\n          </div>\n          \n          {trainedFlowers.length > 0 && generateTrainingVisualization()}\n        </div>\n      )}\n      \n      {/* Generation & Diffusion UI */}\n      {(currentPhase === 'generation' || currentPhase === 'diffusion') && generateLatentExploration()}\n      \n      {/* Explanation */}\n      <div className=\"w-full mt-6 p-4 bg-white rounded-lg shadow text-gray-700\">\n        <h3 className=\"text-lg font-semibold mb-2\">How Latent Diffusion Works</h3>\n        \n        {currentPhase === 'training' && (\n          <>\n            <p className=\"mb-2\"><strong>Step 1:</strong> Drag different flower examples to train the VAE.</p>\n            <p className=\"mb-2\"><strong>Step 2:</strong> Watch as the model discovers latent dimensions that capture meaningful variation.</p>\n            <p className=\"mb-2\">The VAE learns to encode similar features into the same dimensions without explicit labels.</p>\n          </>\n        )}\n        \n        {currentPhase === 'generation' && (\n          <>\n            <p className=\"mb-2\">You're now exploring the learned latent space! Move the sliders to generate different flowers.</p>\n            <p className=\"mb-2\">The power of VAEs is their ability to create a <strong>continuous latent space</strong>. This means:</p>\n            <ul className=\"list-disc pl-5 mb-3\">\n              <li>You can generate variations not seen in the training data</li>\n              <li>Moving beyond ±1.0 explores novel combinations of features</li>\n              <li>The model generalizes from limited examples to a continuous space</li>\n            </ul>\n            <p>Try creating a purple flower with a unique petal shape - a combination not in your training data!</p>\n          </>\n        )}\n        \n        {currentPhase === 'diffusion' && (\n          <>\n            <p className=\"mb-2\"><strong>Latent Diffusion</strong> takes VAEs further by adding controlled randomness:</p>\n            <ol className=\"list-decimal pl-5 mb-3\">\n              <li>Start with a point in latent space (your adjusted vector)</li>\n              <li>Add noise to create variations around this point</li>\n              <li>Gradually denoise to produce multiple related but different outputs</li>\n            </ol>\n            <p className=\"mb-2\">This is how models like Stable Diffusion work, but in much higher dimensions (64-512+).</p>\n            <p>The key insight: adding noise and then removing it allows exploring the latent manifold in ways that generate novel, coherent images.</p>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default InteractiveVAEDiffusion;\n","import React from 'react';\nimport NeuralNetworkVisualization from './components/NeuralNetworkFunctionApproximator';\n// Import additional components\nimport VAEVisualizer from './components/VAEVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NeuralNetworkVisualization />\n      <VAEVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}