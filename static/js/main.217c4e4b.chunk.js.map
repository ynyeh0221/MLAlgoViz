{"version":3,"sources":["components/NeuralNetworkFunctionApproximator.js","components/VAEVisualizer.js","components/GradientDescentAtSaddlePoint.js","components/EpochAndBatchVisualization.js","components/EncoderDecoderVisualizer.js","components/HessianAndEigenvalue.js","components/LearningRate.js","components/Normalization.js","components/AdaptiveLearningComparison.js","components/PositionEmbedding.js","components/BetaVAE.js","components/ActivationFunctions.js","components/LossFunctions.js","components/RegularizationNormalization.js","components/Eigenvalue.js","components/InvertibleMatrix.js","App.js","reportWebVitals.js","index.js"],"names":["NeuralNetworkVisualization","layers","weights","setWeights","useState","biases","setBiases","learningRate","setLearningRate","epoch","setEpoch","isTraining","setIsTraining","approximationData","setApproximationData","targetData","setTargetData","loss","setLoss","canvasRef","useRef","animationRef","networkRef","useEffect","initializeNetwork","newWeights","newBiases","i","length","layerWeights","layerBiases","j","neuronWeights","k","stddev","Math","sqrt","push","random","current","generateFunctionData","currentWeights","currentBiases","extendedDomain","PI","newTargetData","x","y","sin","yApprox","boundaryExtraSamples","ratio","newApproximationData","map","point","forward","input","activation","layer","bias","newActivation","sum","sigmoid","exp","backward","target","activations","preActivations","preActivation","outputError","o","deltas","currentDelta","newDelta","error","derivative","unshift","JSON","parse","stringify","change","reduce","err","stopTraining","cancelAnimationFrame","_approximationData$sa","canvas","ctx","getContext","clearRect","width","height","layerSpacing","minSpacingNeeded","neurons","neuronRadius","neuronSpacings","idealSpacing","max","layerHeights","sampleIndex","currentSample","currentOutput","layerNeurons","layerHeight","startY","prevLayerNeurons","prevLayerHeight","prevStartY","prevSpacing","currentSpacing","prevX","prevY","w","absW","abs","weightColor","min","weightWidth","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","midX","midY","fillStyle","textWidth","measureText","toFixed","fillRect","font","fillText","arc","fill","textAlign","textBaseline","inputText","outputText","targetText","outputWidth","targetWidth","maxWidth","React","createElement","className","type","step","value","onChange","e","parseFloat","disabled","onClick","startTraining","frameCount","train","trainEpoch","totalLoss","shuffledData","sort","slice","forEach","prev","requestAnimationFrame","resetNetwork","ref","ResponsiveContainer","LineChart","margin","top","right","left","bottom","data","CartesianGrid","strokeDasharray","XAxis","dataKey","label","position","offset","domain","tickFormatter","YAxis","angle","Tooltip","formatter","name","Legend","Line","dot","strokeWidth","isAnimationActive","StableVAEVisualization","dimension1","setDimension1","dimension2","setDimension2","dimension3","setDimension3","diffusionMode","setDiffusionMode","generateFlower","dim1","dim2","dim3","flowerColor","floor","bloomFactor","shapeFactor","transform","d","cx","cy","r","Array","_","petalLength","controlPoint","key","cos","opacity","generateSmallFlower","viewBox","style","padding","fontFamily","marginBottom","backgroundColor","borderRadius","boxShadow","display","gridTemplateColumns","gap","border","fontSize","background","flexDirection","alignItems","marginTop","justifyContent","marginRight","color","cursor","generateLatentSpace","x1","y1","x2","y2","textAnchor","noiseX","noiseY","fontWeight","paddingLeft","OptimizerComparison","renderVisualization","d3","selectAll","remove","innerWidth","innerHeight","svg","append","attr","xScale","range","yScale","sgdData","adamData","adamWData","sgdLoss","adamLoss","adamWLoss","call","ticks","text","line","curve","datum","legend","saddle","saddleSize","saddleScale","points","z","colorScale","enter","id","TrainingDataVisualization","batchSize","setBatchSize","currentEpoch","setCurrentEpoch","currentBatch","setCurrentBatch","totalBatches","setTotalBatches","dataColors","setDataColors","shuffleEnabled","setShuffleEnabled","shuffledIndices","setShuffledIndices","colors","hue","batches","ceil","shuffled","from","seed","t","m","seededRandom","currentBatchIndices","getCurrentBatchIndices","ordering","startIdx","endIdx","handleBatchSizeChange","newSize","parseInt","handleBatchChange","newBatch","newEpoch","checked","handlePrevBatch","handleNextBatch","idx","isActive","includes","jsx","NeuralNetworkVisualizer","styles","container","heading","compareContainer","section","sectionTitle","subtitle","description","keyPoints","keyPointsTitle","keyComponentsTitle","detailsContainer","componentTitle","termList","term","definition","marginLeft","architectureContainer","architectureSimpleContainer","flowContainer","verticalColumn","box","inputBox","encoderBox","latentBox","decoderBox","outputBox","meanBox","varBox","samplingBox","contractingBox","deeperBox","bottleneckBox","expandingBox","furtherBox","arrow","downArrow","skipConnectionsLabel","HessianEigenvalueVisualizer","parameters","setParameters","a","b","c","selectedPoint","setSelectedPoint","hessian","setHessian","eigenvalues","setEigenvalues","criticalPoints","setCriticalPoints","cameraDistance","setCameraDistance","cameraRotation","setCameraRotation","cameraHeight","setCameraHeight","containerRef","sceneRef","rendererRef","cameraRef","animationFrameRef","functionHessian","determinePointType","h","calculateHessian","eigs","calculateEigenvalues","every","val","scope","row","element","math","matrix","trace","determinant","discriminant","createTextLabel","document","context","toString","padStart","texture","THREE","needsUpdate","spriteMaterial","sprite","set","scale","createFunctionSurface","existingSurface","getObjectByName","objects","children","obj","userData","isCriticalPoint","geometry","positions","indices","minZ","Infinity","maxZ","size","g","setAttribute","setIndex","computeVertexNormals","material","vertexColors","side","shininess","mesh","findCriticalPoints","critPoint","sphereGeometry","sphereMaterial","sphere","add","eigenvectors","calculateEigenvectors","lambda","eigenvector","eigenvalue","normalizedVector","arrowColor","arrowHelper","arrowLabel","scene","clientWidth","clientHeight","camera","updateCamera","lookAt","renderer","antialias","setSize","firstChild","removeChild","appendChild","domElement","ambientLight","directionalLight","axesHelper","addAxisLabel","animate","render","handleResize","aspect","updateProjectionMatrix","window","addEventListener","removeEventListener","dispose","replace","handleZoomIn","handleZoomOut","handleRotateLeft","handleRotateRight","handleMoveUp","handleMoveDown","minHeight","SCHEDULE_COLORS","SimpleTooltip","_ref","active","payload","entry","toExponential","LRScheduleVisualizer","totalEpochs","setTotalEpochs","maxLR","setMaxLR","initialLR","setInitialLR","warmupPct","setWarmupPct","activeSchedules","setActiveSchedules","totalSteps","datasetSize","lrData","setLrData","lossData","setLossData","chartWidth","setChartWidth","chartHeight","setChartHeight","_document$getElementB","containerWidth","getElementById","newLRData","warmupSteps","constant","step_decay","decay1","decay2","onecycle","decaySteps","totalDecaySteps","cosineValue","cosine","newLossData","lrPoint","curr","schedule","constant_loss","step_loss","onecycle_loss","cosine_loss","lr","undefined","initialProgress","oscillationPhase","oscillation","finalImprovement","optimalLoss","progress","plateauNoise","noise","exploreProgress","postWarmupProgress","cosineEffect","Object","keys","console","log","content","verticalAlign","toggleSchedule","split","filter","s","wrapperStyle","ReferenceLine","Fragment","connectNulls","NormalizationVisualization","normType","setNormType","selectedCell","setSelectedCell","inputMatrix","setInputMatrix","normalizedMatrix","setNormalizedMatrix","showLabels","setShowLabels","computeNormalization","normalized","numExamples","numFeatures","normalizedRow","featureValues","mean","variance","pow","std","normalizedValue","exampleValues","groupSize","startFeature","endFeature","groupValues","renderMatrix","isInput","colIndex","rowIndex","bgColor","getCellColor","col","selectedRow","selectedCol","selectedGroup","cellGroup","borderColor","groupStyle","getGroupStyle","renderCalculation","calculation","join","group","markerEnd","markerWidth","markerHeight","refX","refY","orient","rx","ry","MinimalOptimizationViz","algorithms","pathSvg","lossSvg","pros","cons","convergence","alg","_alg$lossSvg$split","pro","con","EMBEDDING_COLORS","PositionEmbeddingsComparison","selectedEmbedding","setSelectedEmbedding","sequenceLength","setSequenceLength","visualizationData","setVisualizationData","selectedPosition","setSelectedPosition","embeddings","examples","generateVisualizationData","embeddingType","seqLength","pos","item","dimSlow","dimMedium","dimFast","theta1","theta2","sine","rotation","currentEmbedding","find","emb","dimensions","labels","positionData","Label","dim","BetaVAEVisualization","beta","setBeta","latentData","setLatentData","lossValues","setLossValues","kl","recon","setDimensions","updateDimensions","body","isMobile","graphWidth","graphHeight","entanglementFactor","newData","classIdx","baseX","baseY","total","plotWidth","plotHeight","xMin","xMax","yMin","yMax","xValues","yValues","xPadding","yPadding","borderCollapse","borderSpacing","round","ActivationFunctionsExplorer","viewMode","setViewMode","selectedFunctions","setSelectedFunctions","dataPoints","setDataPoints","activeTab","setActiveTab","activationFunctions","formula","function","whenToUse","tanh","relu","leakyRelu","prelu","elu","selu","swish","gelu","inner","dtanh","dinner","softmax","entries","func","isFinite","isNaN","toggleFunction","funcKey","htmlFor","tickCount","_activationFunctions$","labelFormatter","paddingTop","_activationFunctions$2","activeDot","_ref2","use","_ref3","renderFunctionTableRow","LossFunctionsVisualization","huberDelta","marginValue","generateData","mse","mae","binaryCrossEntropy","huber","hinge","setData","comparisonData","setComparisonData","bce","title","tabList","tabButton","card","overflow","cardHeader","borderBottom","cardTitle","cardDescription","cardContent","cardFooter","borderTop","sliderContainer","sliderLabel","slider","grid","gridMd2","spacerY","listItem","infoBox","blueBox","greenBox","grayBox","yellowBox","sectionHeading","sectionHeadingBlue","sectionHeadingGreen","sectionHeadingYellow","table","minWidth","th","td","chartContainer","querySelectorAll","overflowX","info","RegularizationViz","activationMatrix","getColor","subheading","gridContainer","visualizationContainer","xAxisLabel","yAxisLabel","yAxisTicks","barsContainer","inset","barGroup","bar","isPositive","barLabel","legendItem","legendColor","legendText","infoGrid","infoCard","infoTitle","infoText","infoBold","infoItalic","fontStyle","activationGrid","activationBox","activationTitle","matrixContainer","matrixLabel","flexShrink","matrixLabelText","whiteSpace","matrixContent","matrixHeader","matrixGrid","matrixCell","textColor","matrixDesc","arrowContainer","architectureBox","architectureTitle","architectureDiagram","diagramBg","layersContainer","paddingRight","layerStack","weightDecayMarker","weightDecayBox","techSpecs","pointsContainer","pointsTitle","reasonsGrid","reasonItem","reasonNumber","reasonText","codeContainer","codeTitle","codeGrid","codeBlock","maxHeight","codeAnalysis","analysisTitle","analysisList","listStyleType","analysisItem","codeHighlight","analysisBox","analysisText","noReg","l1","l2","index","wordBreak","EigenvalueVisualization","setMatrix","iterations","setIterations","randomVectors","setRandomVectors","applyTransformation","arguments","currentX","currentY","newX","newY","vectors","radius","transformedVectors","v","original","transformed","calculateEigen","discriminantValue","eigenvalue1","eigenvalue2","isComplex","realPart","imagPart","magnitude","eigenvector1","eigenvector2","normalize","mag","transformedEigenvectors","scaleFactor","scaleX","scaleY","preset","vector","InvertibleMatricesDemo","inverse","setInverse","setDeterminant","product","setProduct","vectorX","setVectorX","transformedVector","setTransformedVector","inverseMappedVector","setInverseMappedVector","errorMessage","setErrorMessage","det","inv","prod","inverseMapped","message","renderPoint","screenX","gridSize","screenY","renderVector","thickness","startX","endX","endY","calculateArrowhead","atan2","formatNumber","num","handleMatrixChange","newMatrix","handleVectorChange","newVector","desc","applyPreset","renderGrid","gridLines","gridCenter","fillOpacity","vectorsArray","col1","col2","origin","point1","point2","point3","pathStr","renderParallelogram","App","activeComponent","setActiveComponent","componentMap","neural","vae","VAEVisualizer","gd","GradientDescent","eb","EpochAndBatch","ed","EncoderDecoder","HessianEigenvalue","learningrate","LearningRate","normalization","Normalization","adaptive","AdaptiveLearning","PositionEmbedding","betavae","BetaVAE","ActivationFunctions","LossFunctions","rn","RegularizationNormalization","Eigenvalue","invertible","InvertibleMatrix","flexWrap","button","transition","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","StrictMode"],"mappings":"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","file":"static/js/main.217c4e4b.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Neural Network Visualization Component\nconst NeuralNetworkVisualization = () => {\n  // Fixed network structure: 1 input, four hidden layers with architecture adjustments, 1 output\n  const layers = [1, 12, 10, 8, 6, 1];\n  \n  // State variables\n  const [weights, setWeights] = useState([]); // Network weights\n  const [biases, setBiases] = useState([]); // Network biases\n  const [learningRate, setLearningRate] = useState(0.05); // Learning rate\n  const [epoch, setEpoch] = useState(0); // Current training epoch\n  const [isTraining, setIsTraining] = useState(false); // Training status\n  const [approximationData, setApproximationData] = useState([]); // Approximation function data\n  const [targetData, setTargetData] = useState([]); // Target function data\n  const [loss, setLoss] = useState(1.0); // Current loss\n\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const networkRef = useRef({ weights: [], biases: [] });\n\n  // Initialize network\n  useEffect(() => {\n    initializeNetwork();\n  }, []);\n\n  // Initialize network weights and biases\n  const initializeNetwork = () => {\n    const newWeights = [];\n    const newBiases = [];\n    \n    for (let i = 0; i < layers.length - 1; i++) {\n      const layerWeights = [];\n      const layerBiases = [];\n      \n      for (let j = 0; j < layers[i + 1]; j++) {\n        const neuronWeights = [];\n        for (let k = 0; k < layers[i]; k++) {\n          // Initialize weights (using Xavier initialization)\n          const stddev = Math.sqrt(1.0 / (layers[i] + layers[i + 1]));\n          neuronWeights.push((Math.random() * 2 - 1) * stddev);\n        }\n        layerWeights.push(neuronWeights);\n        layerBiases.push((Math.random() * 2 - 1) * 0.05);\n      }\n      \n      newWeights.push(layerWeights);\n      newBiases.push(layerBiases);\n    }\n    \n    // Update component state\n    setWeights(newWeights);\n    setBiases(newBiases);\n    setEpoch(0);\n    setLoss(1.0);\n    \n    // Also update reference to ensure always using latest weights\n    networkRef.current = {\n      weights: newWeights,\n      biases: newBiases\n    };\n    \n    // Generate initial data\n    generateFunctionData(newWeights, newBiases);\n  };\n\n  // Generate target function data (more complex function with extended domain and higher boundary sampling)\n  const generateFunctionData = (currentWeights, currentBiases) => {\n    // Create two sets of samples:\n    // 1. Regular samples across the domain\n    // 2. Extra samples concentrated at boundaries\n    \n    const regularSamples = 40;\n    const boundaryExtraSamples = 20; // Extra samples focused on boundaries\n    const extendedDomain = 0.1 * Math.PI; // Extend domain by 10% of π\n    \n    const newTargetData = [];\n    \n    // Regular samples across the domain\n    for (let i = 0; i < regularSamples; i++) {\n      const x = -Math.PI - extendedDomain + ((2 * Math.PI + 2 * extendedDomain) * i) / (regularSamples - 1);\n      \n      // Complex target function: sin(x) + 0.5*sin(3x) * x^2/5\n      const y = Math.sin(x) + 0.5 * Math.sin(3 * x) * (x * x / 5);\n      \n      newTargetData.push({ x, y, yApprox: 0 });\n    }\n    \n    // Extra samples near left boundary\n    for (let i = 0; i < boundaryExtraSamples / 2; i++) {\n      const ratio = i / (boundaryExtraSamples / 2);\n      const x = -Math.PI - extendedDomain + ratio * Math.PI * 0.4; // Focus on first 40% of left side\n      \n      const y = Math.sin(x) + 0.5 * Math.sin(3 * x) * (x * x / 5);\n      newTargetData.push({ x, y, yApprox: 0 });\n    }\n    \n    // Extra samples near right boundary\n    for (let i = 0; i < boundaryExtraSamples / 2; i++) {\n      const ratio = i / (boundaryExtraSamples / 2);\n      const x = Math.PI * 0.6 + ratio * (Math.PI * 0.4 + extendedDomain); // Focus on last 40% of right side\n      \n      const y = Math.sin(x) + 0.5 * Math.sin(3 * x) * (x * x / 5);\n      newTargetData.push({ x, y, yApprox: 0 });\n    }\n    \n    setTargetData(newTargetData);\n    \n    // Calculate initial approximation function\n    if (currentWeights && currentWeights.length > 0) {\n      const newApproximationData = newTargetData.map(point => {\n        const yApprox = forward([point.x], currentWeights, currentBiases)[0];\n        return { x: point.x, y: point.y, yApprox };\n      });\n      \n      setApproximationData(newApproximationData);\n    }\n  };\n\n  // Forward propagation with SiLU (Swish) activation\n  const forward = (input, currentWeights, currentBiases) => {\n    let activation = [...input];\n    const weights = currentWeights || networkRef.current.weights;\n    const biases = currentBiases || networkRef.current.biases;\n    \n    for (let i = 0; i < weights.length; i++) {\n      const layer = weights[i];\n      const bias = biases[i];\n      const newActivation = [];\n      \n      for (let j = 0; j < layer.length; j++) {\n        const neuronWeights = layer[j];\n        let sum = bias[j];\n        \n        for (let k = 0; k < neuronWeights.length; k++) {\n          sum += neuronWeights[k] * activation[k];\n        }\n        \n        // Use SiLU/Swish activation function (x * sigmoid(x)) for hidden layers\n        if (i < weights.length - 1) {\n          // SiLU/Swish: x * sigmoid(x)\n          const sigmoid = 1 / (1 + Math.exp(-sum));\n          newActivation.push(sum * sigmoid);\n        } else {\n          newActivation.push(sum); // No activation function for output layer\n        }\n      }\n      \n      activation = [...newActivation];\n    }\n    \n    return activation;\n  };\n\n  // Backward propagation with SiLU derivative\n  const backward = (input, target) => {\n    const weights = networkRef.current.weights;\n    const biases = networkRef.current.biases;\n    \n    // Forward pass and save activations and pre-activations for each layer\n    const activations = [input]; // Outputs after activation\n    const preActivations = []; // Inputs before activation\n    let activation = [...input];\n    \n    for (let i = 0; i < weights.length; i++) {\n      const layer = weights[i];\n      const bias = biases[i];\n      const newActivation = [];\n      const preActivation = [];\n      \n      for (let j = 0; j < layer.length; j++) {\n        const neuronWeights = layer[j];\n        let sum = bias[j];\n        \n        for (let k = 0; k < neuronWeights.length; k++) {\n          sum += neuronWeights[k] * activation[k];\n        }\n        \n        preActivation.push(sum);\n        \n        // Use SiLU activation for hidden layers\n        if (i < weights.length - 1) {\n          const sigmoid = 1 / (1 + Math.exp(-sum));\n          newActivation.push(sum * sigmoid);\n        } else {\n          newActivation.push(sum);\n        }\n      }\n      \n      preActivations.push(preActivation);\n      activation = [...newActivation];\n      activations.push(newActivation);\n    }\n    \n    // Calculate output layer error\n    const output = activations[activations.length - 1];\n    const outputError = output.map((o, i) => o - target[i]);\n    \n    // Backpropagate error\n    const deltas = [outputError];\n    \n    for (let i = weights.length - 1; i > 0; i--) {\n      const currentDelta = deltas[0];\n      const newDelta = [];\n      \n      for (let j = 0; j < layers[i]; j++) {\n        let error = 0;\n        \n        for (let k = 0; k < currentDelta.length; k++) {\n          error += currentDelta[k] * weights[i][k][j];\n        }\n        \n        // SiLU/Swish derivative: sigmoid(x) + x*sigmoid(x)*(1-sigmoid(x))\n        const x = preActivations[i-1][j];\n        const sigmoid = 1 / (1 + Math.exp(-x));\n        const derivative = sigmoid + x * sigmoid * (1 - sigmoid);\n        \n        newDelta.push(error * derivative);\n      }\n      \n      deltas.unshift(newDelta);\n    }\n    \n    // Create deep copies of weights and biases\n    const newWeights = JSON.parse(JSON.stringify(weights));\n    const newBiases = JSON.parse(JSON.stringify(biases));\n    \n    // Update weights and biases\n    for (let i = 0; i < weights.length; i++) {\n      for (let j = 0; j < weights[i].length; j++) {\n        for (let k = 0; k < weights[i][j].length; k++) {\n          const change = learningRate * deltas[i][j] * activations[i][k];\n          newWeights[i][j][k] -= change;\n        }\n        \n        newBiases[i][j] -= learningRate * deltas[i][j];\n      }\n    }\n    \n    // Update reference and state\n    networkRef.current = {\n      weights: newWeights,\n      biases: newBiases\n    };\n    \n    setWeights([...newWeights]);\n    setBiases([...newBiases]);\n    \n    // Calculate mean squared error\n    return outputError.reduce((sum, err) => sum + err * err, 0) / outputError.length;\n  };\n\n  // Train one epoch\n  const trainEpoch = () => {\n    let totalLoss = 0;\n    \n    // Randomly shuffle training data\n    const shuffledData = [...targetData].sort(() => Math.random() - 0.5);\n    \n    // Mini-batch gradient descent\n    const batchSize = 10;\n    for (let i = 0; i < shuffledData.length; i += batchSize) {\n      const batch = shuffledData.slice(i, Math.min(i + batchSize, shuffledData.length));\n      \n      batch.forEach(point => {\n        const error = backward([point.x], [point.y]);\n        totalLoss += error;\n      });\n    }\n    \n    totalLoss /= shuffledData.length;\n    \n    // Update approximation function data\n    const newApproximationData = targetData.map(point => {\n      const yApprox = forward([point.x], networkRef.current.weights, networkRef.current.biases)[0];\n      return { x: point.x, y: point.y, yApprox };\n    });\n    \n    // Update UI state\n    setApproximationData([...newApproximationData]);\n    setLoss(totalLoss);\n    setEpoch(prev => prev + 1);\n    \n    // For more complex functions, allow more training epochs before stopping\n    return (totalLoss < 0.0001 && epoch >= 300) || epoch >= 2000;\n  };\n\n  // Start training\n  const startTraining = () => {\n    if (isTraining) return;\n    \n    setIsTraining(true);\n    let frameCount = 0;\n    \n    const train = () => {\n      frameCount++;\n      \n      // Execute training every few frames to avoid UI blocking\n      if (frameCount % 3 === 0) {\n        const converged = trainEpoch();\n        \n        if (converged || epoch >= 1000) {\n          setIsTraining(false);\n          return;\n        }\n      }\n      \n      animationRef.current = requestAnimationFrame(train);\n    };\n    \n    animationRef.current = requestAnimationFrame(train);\n  };\n\n  // Stop training\n  const stopTraining = () => {\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    setIsTraining(false);\n  };\n\n  // Reset network\n  const resetNetwork = () => {\n    stopTraining();\n    initializeNetwork();\n  };\n\n  // Draw neural network\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Adjust canvas size for better visibility\n    canvas.width = 700; // Increase canvas width\n    canvas.height = 500; // Increase canvas height\n    \n    const margin = 70; // Increased margin\n    const width = canvas.width - 2 * margin;\n    const height = canvas.height - 2 * margin;\n    \n    const layerSpacing = width / (layers.length - 1);\n    const neuronRadius = 12; // Reduced neuron radius\n    \n    // Calculate minimum spacing needed for each layer\n    const minSpacingNeeded = layers.map(neurons => {\n      // At least 2.5 * neuron diameter between centers to avoid overlap\n      return neuronRadius * 5;\n    });\n    \n    // Calculate actual spacing based on available height and neurons\n    const neuronSpacings = layers.map((neurons, i) => {\n      const idealSpacing = height / (neurons);\n      // Use at least minimum spacing or ideal spacing, whichever is larger\n      return Math.max(minSpacingNeeded[i], idealSpacing);\n    });\n    \n    // Calculate layer heights\n    const layerHeights = layers.map((neurons, i) => (neurons - 1) * neuronSpacings[i]);\n    \n    // Select current data sample for display\n    const sampleIndex = epoch % targetData.length;\n    const currentSample = targetData[sampleIndex] || { x: 0, y: 0 };\n    \n    // Calculate network output for current sample\n    const currentOutput = approximationData[sampleIndex]?.yApprox || 0;\n    \n    // Draw neurons and connections\n    for (let i = 0; i < layers.length; i++) {\n      const layerNeurons = layers[i];\n      const layerHeight = layerHeights[i];\n      const startY = margin + (height - layerHeight) / 2;\n      \n      // Draw connections first (so neurons are drawn on top)\n      if (i > 0) {\n        const prevLayerNeurons = layers[i - 1];\n        const prevLayerHeight = layerHeights[i - 1];\n        const prevStartY = margin + (height - prevLayerHeight) / 2;\n        const prevSpacing = neuronSpacings[i-1];\n        const currentSpacing = neuronSpacings[i];\n        \n        for (let j = 0; j < layerNeurons; j++) {\n          const x = margin + i * layerSpacing;\n          const y = startY + j * currentSpacing;\n          \n          for (let k = 0; k < prevLayerNeurons; k++) {\n            const prevX = margin + (i - 1) * layerSpacing;\n            const prevY = prevStartY + k * prevSpacing;\n            \n            // Set connection color and width based on weight\n            if (networkRef.current.weights.length > 0 && i - 1 < networkRef.current.weights.length) {\n              const w = networkRef.current.weights[i - 1][j] ? networkRef.current.weights[i - 1][j][k] || 0 : 0;\n              const absW = Math.abs(w);\n              \n              // Only draw connections with significant weights\n              if (absW > 0.05) {\n                // Weight color: green for positive, red for negative\n                const weightColor = w > 0 ? `rgba(0, 128, 0, ${Math.min(absW, 1)})` : `rgba(255, 0, 0, ${Math.min(absW, 1)})`;\n                \n                // Weight width: thicker for larger absolute values\n                const weightWidth = 0.5 + 2 * Math.min(absW, 1);\n                \n                ctx.beginPath();\n                ctx.moveTo(prevX + neuronRadius, prevY);\n                ctx.lineTo(x - neuronRadius, y);\n                ctx.strokeStyle = weightColor;\n                ctx.lineWidth = weightWidth;\n                ctx.stroke();\n                \n                // Only show weight values for significant weights\n                if (absW > 0.3) {\n                  // Show weight value\n                  const midX = (prevX + neuronRadius + x - neuronRadius) / 2;\n                  const midY = (prevY + y) / 2;\n                  \n                  // White background for text clarity\n                  ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n                  const textWidth = ctx.measureText(w.toFixed(2)).width;\n                  ctx.fillRect(midX - textWidth/2 - 2, midY - 7, textWidth + 4, 14);\n                  \n                  ctx.fillStyle = '#000000';\n                  ctx.font = '9px Arial';\n                  ctx.fillText(w.toFixed(2), midX, midY);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // Now draw neurons on top of connections\n      for (let j = 0; j < layerNeurons; j++) {\n        const x = margin + i * layerSpacing;\n        const y = startY + j * neuronSpacings[i];\n        \n        // Draw neuron\n        ctx.beginPath();\n        ctx.arc(x, y, neuronRadius, 0, 2 * Math.PI);\n        ctx.fillStyle = i === 0 ? '#88CCEE' : i === layers.length - 1 ? '#DDCC77' : '#44AA99';\n        ctx.fill();\n        ctx.strokeStyle = '#000000';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n        \n        // Show neuron number\n        ctx.fillStyle = '#000000';\n        ctx.font = '9px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(`${i+1}-${j+1}`, x, y);\n        \n        // Show input/output values - fixed position and display\n        if (i === 0) { // Input layer\n          ctx.fillStyle = '#000000';\n          ctx.font = 'bold 10px Arial';\n          ctx.textAlign = 'right';\n          \n          // Add background for better text clarity\n          const inputText = `Input x: ${currentSample.x.toFixed(2)}`;\n          const textWidth = ctx.measureText(inputText).width;\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.fillRect(x - neuronRadius - 8 - textWidth, y - 7, textWidth + 4, 14);\n          \n          ctx.fillStyle = '#000000';\n          ctx.fillText(inputText, x - neuronRadius - 8, y);\n        } else if (i === layers.length - 1) { // Output layer\n          // Add background box for output\n          const outputText = `Output: ${currentOutput.toFixed(2)}`;\n          const targetText = `Target: ${currentSample.y.toFixed(2)}`;\n          \n          const outputWidth = ctx.measureText(outputText).width;\n          const targetWidth = ctx.measureText(targetText).width;\n          const maxWidth = Math.max(outputWidth, targetWidth);\n          \n          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.fillRect(x + neuronRadius + 8, y - 15, maxWidth + 8, 30);\n          \n          ctx.fillStyle = '#0000AA';\n          ctx.font = 'bold 10px Arial';\n          ctx.textAlign = 'left';\n          ctx.fillText(outputText, x + neuronRadius + 12, y - 5);\n          \n          ctx.fillStyle = '#AA0000';\n          ctx.fillText(targetText, x + neuronRadius + 12, y + 10);\n        }\n      }\n    }\n  }, [weights, epoch, targetData, approximationData]);\n\n  // Cleanup on component unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []);\n\n  // Render component\n  return (\n    <div className=\"w-full p-4 bg-white\">\n      <h2 className=\"text-xl font-bold mb-4 text-center\">Neural Network Learning Visualization (Complex Function)</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n        <div className=\"bg-gray-50 p-4 rounded\">\n          <h3 className=\"text-lg font-semibold mb-2\">Control Panel</h3>\n          \n          <div className=\"mb-4\">\n            <p className=\"text-sm mb-2\">Network Structure: 1-12-10-8-6-1 (fixed, pyramid architecture)</p>\n            <label className=\"block text-sm font-medium mb-1\">Learning Rate: {learningRate.toFixed(3)}</label>\n            <input\n              type=\"range\"\n              min=\"0.001\"\n              max=\"0.2\"\n              step=\"0.001\"\n              value={learningRate}\n              onChange={e => setLearningRate(parseFloat(e.target.value))}\n              className=\"w-full\"\n              disabled={isTraining}\n            />\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <button\n              onClick={isTraining ? stopTraining : startTraining}\n              className={`px-4 py-2 rounded ${isTraining ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'} text-white font-medium`}\n            >\n              {isTraining ? 'Stop Training' : 'Start Training'}\n            </button>\n            \n            <button\n              onClick={resetNetwork}\n              className=\"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded\"\n              disabled={isTraining}\n            >\n              Reset Network\n            </button>\n          </div>\n          \n          <div className=\"mt-4\">\n            <p className=\"text-sm\">Current Epoch: <span className=\"font-semibold\">{epoch}</span></p>\n            <p className=\"text-sm\">Current Loss: <span className=\"font-semibold\">{loss.toFixed(6)}</span></p>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-50 p-4 rounded\">\n          <h3 className=\"text-lg font-semibold mb-2\">Network Structure Visualization</h3>\n          <div className=\"border rounded bg-white\">\n            <canvas ref={canvasRef} width=\"500\" height=\"300\" className=\"w-full h-64\" />\n          </div>\n          <p className=\"text-xs mt-1 text-gray-500\">Colors represent weights: green for positive, red for negative. Line thickness indicates weight magnitude.</p>\n        </div>\n      </div>\n      \n      <div className=\"bg-gray-50 p-4 rounded\">\n        <h3 className=\"text-lg font-semibold mb-2\">Function Approximation</h3>\n        <div className=\"border rounded bg-white\">\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart\n              margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n              data={approximationData}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"x\"\n                label={{ value: 'x', position: 'bottom', offset: 0 }}\n                domain={[-Math.PI * 1.1, Math.PI * 1.1]}\n                tickFormatter={(value) => value.toFixed(2)}\n              />\n              <YAxis\n                label={{ value: 'y', angle: -90, position: 'left', offset: -5 }}\n                domain={[-2, 2]}\n              />\n              <Tooltip formatter={(value, name) => [value.toFixed(4), name]} />\n              <Legend />\n              <Line\n                type=\"monotone\"\n                dataKey=\"y\"\n                name=\"Target Function\"\n                stroke=\"#8884d8\"\n                dot={false}\n                strokeWidth={2}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"yApprox\"\n                name=\"Approximation Function\"\n                stroke=\"#82ca9d\"\n                dot={false}\n                strokeWidth={2}\n                isAnimationActive={false}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"mt-2 text-sm\">\n          <p><span className=\"inline-block w-4 h-2 bg-purple-500 mr-1\"></span> Target Function: sin(x) + 0.5*sin(3x) * x²/5</p>\n          <p><span className=\"inline-block w-4 h-2 bg-green-500 mr-1\"></span> Approximation Function: Current network output</p>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 p-4 bg-gray-50 rounded\">\n        <h3 className=\"text-lg font-semibold mb-2\">Training Data and Backpropagation</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-medium mb-1\">Training Data Generation</h4>\n            <p className=\"text-sm mb-1\">How training data is created:</p>\n            <ol className=\"text-sm list-decimal list-inside space-y-1\">\n              <li>Sample 50 x values uniformly in range [-π, π]</li>\n              <li>For each x, calculate y = sin(x) as the target</li>\n              <li>These (x, y) pairs form the training dataset</li>\n              <li>During training, samples are randomly selected</li>\n            </ol>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-1\">Backpropagation Process</h4>\n            <p className=\"text-sm\">\n              Backpropagation is the core learning algorithm for neural networks:\n            </p>\n            <ul className=\"text-sm list-disc list-inside space-y-1\">\n              <li>Green/red connections show weight values and changes</li>\n              <li>Input node displays current sample's x value</li>\n              <li>Output node shows both network output and target value</li>\n              <li>As training progresses, the approximation function (green line) gets closer to the target function (purple line)</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NeuralNetworkVisualization;\n","import React, { useState } from 'react';\n\nconst StableVAEVisualization = () => {\n  // Latent vector dimensions with initial values\n  const [dimension1, setDimension1] = useState(0);\n  const [dimension2, setDimension2] = useState(0);\n  const [dimension3, setDimension3] = useState(0);\n  \n  // Mode switching\n  const [diffusionMode, setDiffusionMode] = useState(false);\n  \n  // Function to generate SVG representation of flower\n  const generateFlower = (dim1, dim2, dim3) => {\n    // Color interpolation from red to blue\n    const redValue = Math.max(0, Math.min(255, 255 - Math.floor((dim1 + 1) * 127.5)));\n    const blueValue = Math.max(0, Math.min(255, Math.floor((dim1 + 1) * 127.5)));\n    const flowerColor = `rgb(${redValue}, 50, ${blueValue})`;\n    \n    // Bloom level affects petal size\n    const bloomFactor = Math.max(0.1, (dim2 + 1) * 0.45 + 0.1); // 0.1 to 1.0\n    \n    // Shape factor affects petal shape\n    const shapeFactor = dim3; // -1 to 1\n    \n    // Stem\n    const stemHeight = 80;\n    const stemWidth = 4;\n    \n    return (\n      <g transform=\"translate(50, 50)\">\n        {/* Stem */}\n        <rect \n          x={-stemWidth/2} \n          y={0} \n          width={stemWidth} \n          height={stemHeight} \n          fill=\"#2E8B57\" \n        />\n        \n        {/* Leaf */}\n        <path \n          d={`M ${-stemWidth/2},${stemHeight*0.5} C ${-20},${stemHeight*0.4} ${-25},${stemHeight*0.6} ${-10},${stemHeight*0.7}`} \n          fill=\"#3CB371\" \n          stroke=\"#2E8B57\" \n          strokeWidth=\"1\" \n        />\n        \n        {/* Flower center */}\n        <circle cx=\"0\" cy=\"0\" r={10 * bloomFactor} fill=\"#FFD700\" />\n        \n        {/* Petals */}\n        {[...Array(shapeFactor < 0 ? 5 : 8)].map((_, i) => {\n          const angle = (i * 2 * Math.PI) / (shapeFactor < 0 ? 5 : 8);\n          const petalLength = 25 * bloomFactor;\n          const controlPointFactor = shapeFactor < 0 ? 0.4 : 0.8;\n          const controlPoint = petalLength * controlPointFactor;\n          \n          return (\n            <path\n              key={i}\n              d={`\n                M 0,0\n                Q ${Math.cos(angle) * controlPoint},${Math.sin(angle) * controlPoint} \n                  ${Math.cos(angle) * petalLength},${Math.sin(angle) * petalLength}\n                Q ${Math.cos(angle + 0.2) * controlPoint},${Math.sin(angle + 0.2) * controlPoint}\n                  0,0\n              `}\n              fill={flowerColor}\n              stroke={flowerColor}\n              strokeWidth=\"1\"\n              opacity=\"0.9\"\n            />\n          );\n        })}\n      </g>\n    );\n  };\n  \n  // Generate small example flower\n  const generateSmallFlower = (dim1, dim2, dim3) => {\n    return (\n      <svg width=\"60\" height=\"60\" viewBox=\"0 0 100 100\">\n        {generateFlower(dim1, dim2, dim3)}\n      </svg>\n    );\n  };\n  \n  // Generate latent space visualization\n  const generateLatentSpace = () => {\n    // Training point coordinates\n    const trainingPoints = [\n      { x: 25, y: 25, color: \"#3498db\" },  // top-left\n      { x: 75, y: 25, color: \"#3498db\" },  // top-right\n      { x: 25, y: 75, color: \"#3498db\" },  // bottom-left\n      { x: 75, y: 75, color: \"#3498db\" }   // bottom-right\n    ];\n    \n    // Current point coordinates\n    const x = 50 + dimension1 * 25;\n    const y = 50 + dimension2 * 25;\n    \n    return (\n      <svg width=\"180\" height=\"180\" style={{backgroundColor: \"#f0f9ff\", border: \"1px solid #3498db\"}}>\n        {/* Grid lines */}\n        <line x1=\"0\" y1=\"90\" x2=\"180\" y2=\"90\" stroke=\"#3498db\" strokeWidth=\"1\" />\n        <line x1=\"90\" y1=\"0\" x2=\"90\" y2=\"180\" stroke=\"#3498db\" strokeWidth=\"1\" />\n        \n        {/* Axis labels */}\n        <text x=\"170\" y=\"85\" fontSize=\"12\" textAnchor=\"end\">Color</text>\n        <text x=\"95\" y=\"15\" fontSize=\"12\" textAnchor=\"start\">Shape</text>\n        <text x=\"95\" y=\"175\" fontSize=\"12\" textAnchor=\"start\">Bloom</text>\n        \n        {/* Training points */}\n        {trainingPoints.map((point, i) => (\n          <circle key={i} cx={point.x} cy={point.y} r=\"8\" fill={point.color} opacity=\"0.6\" />\n        ))}\n        \n        {/* Current point */}\n        <circle cx={x} cy={y} r=\"10\" fill=\"#e74c3c\" />\n        \n        {/* Diffusion noise */}\n        {diffusionMode && [...Array(10)].map((_, i) => {\n          const noiseX = x + (Math.random() - 0.5) * 20;\n          const noiseY = y + (Math.random() - 0.5) * 20;\n          return (\n            <circle key={i} cx={noiseX} cy={noiseY} r=\"3\" fill=\"#e74c3c\" opacity=\"0.3\" />\n          );\n        })}\n      </svg>\n    );\n  };\n  \n  // Main render\n  return (\n    <div style={{maxWidth: \"800px\", margin: \"0 auto\", padding: \"20px\", fontFamily: \"Arial, sans-serif\"}}>\n      <h1 style={{textAlign: \"center\", marginBottom: \"20px\"}}>VAE Latent Space Exploration</h1>\n      \n      {/* Training data section */}\n      <div style={{marginBottom: \"30px\", backgroundColor: \"white\", padding: \"15px\", borderRadius: \"8px\", boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"}}>\n        <h2 style={{marginBottom: \"15px\"}}>How VAEs Represent Images</h2>\n        \n        <div style={{display: \"grid\", gridTemplateColumns: \"repeat(3, 1fr)\", gap: \"10px\"}}>\n          <div style={{border: \"1px solid #eee\", padding: \"10px\", borderRadius: \"8px\", backgroundColor: \"#f8f8f8\"}}>\n            <h3 style={{textAlign: \"center\", marginBottom: \"10px\", fontSize: \"16px\"}}>Training Data</h3>\n            <div style={{display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"8px\"}}>\n              {generateSmallFlower(-0.8, 0.7, 0.2)}\n              {generateSmallFlower(0.8, 0.6, 0.3)}\n              {generateSmallFlower(-0.7, -0.8, 0.1)}\n              {generateSmallFlower(0.7, -0.5, -0.7)}\n            </div>\n          </div>\n          \n          <div style={{border: \"1px solid #eee\", padding: \"10px\", borderRadius: \"8px\", backgroundColor: \"#f8f8f8\", textAlign: \"center\"}}>\n            <h3 style={{marginBottom: \"10px\", fontSize: \"16px\"}}>Learned Dimensions</h3>\n            <div style={{marginBottom: \"8px\"}}>\n              <div style={{height: \"12px\", background: \"linear-gradient(to right, red, blue)\", borderRadius: \"3px\", marginBottom: \"4px\"}}></div>\n              <div style={{fontSize: \"14px\"}}>Dimension 1: Color</div>\n            </div>\n            <div style={{marginBottom: \"8px\"}}>\n              <div style={{height: \"12px\", background: \"linear-gradient(to right, #e0f7e0, #2e8b57)\", borderRadius: \"3px\", marginBottom: \"4px\"}}></div>\n              <div style={{fontSize: \"14px\"}}>Dimension 2: Bloom</div>\n            </div>\n            <div>\n              <div style={{height: \"12px\", background: \"linear-gradient(to right, #f0e6f6, #8e44ad)\", borderRadius: \"3px\", marginBottom: \"4px\"}}></div>\n              <div style={{fontSize: \"14px\"}}>Dimension 3: Shape</div>\n            </div>\n          </div>\n          \n          <div style={{border: \"1px solid #eee\", padding: \"10px\", borderRadius: \"8px\", backgroundColor: \"#f8f8f8\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n            <h3 style={{marginBottom: \"10px\", fontSize: \"16px\"}}>Continuous Latent Space</h3>\n            <div style={{position: \"relative\", width: \"100px\", height: \"100px\", border: \"1px solid #3498db\", borderRadius: \"4px\", marginTop: \"10px\"}}>\n              <div style={{position: \"absolute\", top: \"45%\", width: \"100%\", height: \"1px\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"50%\", height: \"100%\", width: \"1px\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"25%\", top: \"25%\", width: \"8px\", height: \"8px\", borderRadius: \"50%\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"75%\", top: \"25%\", width: \"8px\", height: \"8px\", borderRadius: \"50%\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"25%\", top: \"75%\", width: \"8px\", height: \"8px\", borderRadius: \"50%\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"75%\", top: \"75%\", width: \"8px\", height: \"8px\", borderRadius: \"50%\", backgroundColor: \"#3498db\"}}></div>\n            </div>\n            <div style={{fontSize: \"14px\", marginTop: \"10px\"}}>Any point = a flower</div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Interactive section */}\n      <div style={{marginBottom: \"30px\", backgroundColor: \"white\", padding: \"15px\", borderRadius: \"8px\", boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"}}>\n        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginBottom: \"15px\"}}>\n          <h2 style={{margin: 0}}>Explore Latent Space</h2>\n          <div>\n            <button \n              onClick={() => setDiffusionMode(true)}\n              style={{\n                padding: \"8px 12px\",\n                marginRight: \"8px\",\n                backgroundColor: diffusionMode ? \"#8e44ad\" : \"#f0f0f0\",\n                color: diffusionMode ? \"white\" : \"black\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                cursor: \"pointer\"\n              }}\n            >\n              Try Latent Diffusion\n            </button>\n            <button \n              onClick={() => setDiffusionMode(false)}\n              style={{\n                padding: \"8px 12px\",\n                backgroundColor: !diffusionMode ? \"#3498db\" : \"#f0f0f0\",\n                color: !diffusionMode ? \"white\" : \"black\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                cursor: \"pointer\"\n              }}\n            >\n              Basic Generation\n            </button>\n          </div>\n        </div>\n        \n        <div style={{display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr\", gap: \"15px\"}}>\n          {/* Sliders */}\n          <div>\n            <h3 style={{marginBottom: \"15px\", fontSize: \"16px\"}}>Adjust Latent Vector</h3>\n            \n            <div style={{marginBottom: \"20px\"}}>\n              <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"5px\"}}>\n                <label>Flower Color:</label>\n                <span style={{color: \"#3498db\"}}>{dimension1.toFixed(2)}</span>\n              </div>\n              <input \n                type=\"range\" \n                min=\"-1.5\" \n                max=\"1.5\" \n                step=\"0.01\" \n                value={dimension1} \n                onChange={(e) => setDimension1(parseFloat(e.target.value))} \n                style={{width: \"100%\"}}\n              />\n              <div style={{display: \"flex\", justifyContent: \"space-between\", fontSize: \"12px\", color: \"#666\"}}>\n                <span>Red</span>\n                <span>Purple</span>\n                <span>Blue</span>\n              </div>\n            </div>\n            \n            <div style={{marginBottom: \"20px\"}}>\n              <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"5px\"}}>\n                <label>Bloom Stage:</label>\n                <span style={{color: \"#3498db\"}}>{dimension2.toFixed(2)}</span>\n              </div>\n              <input \n                type=\"range\" \n                min=\"-1.5\" \n                max=\"1.5\" \n                step=\"0.01\" \n                value={dimension2} \n                onChange={(e) => setDimension2(parseFloat(e.target.value))} \n                style={{width: \"100%\"}}\n              />\n              <div style={{display: \"flex\", justifyContent: \"space-between\", fontSize: \"12px\", color: \"#666\"}}>\n                <span>Bud</span>\n                <span>Partial</span>\n                <span>Full Bloom</span>\n              </div>\n            </div>\n            \n            <div>\n              <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"5px\"}}>\n                <label>Flower Shape:</label>\n                <span style={{color: \"#3498db\"}}>{dimension3.toFixed(2)}</span>\n              </div>\n              <input \n                type=\"range\" \n                min=\"-1.5\" \n                max=\"1.5\" \n                step=\"0.01\" \n                value={dimension3} \n                onChange={(e) => setDimension3(parseFloat(e.target.value))} \n                style={{width: \"100%\"}}\n              />\n              <div style={{display: \"flex\", justifyContent: \"space-between\", fontSize: \"12px\", color: \"#666\"}}>\n                <span>Tulip-like</span>\n                <span>Mixed</span>\n                <span>Rose-like</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Latent Space */}\n          <div style={{textAlign: \"center\"}}>\n            <h3 style={{marginBottom: \"15px\", fontSize: \"16px\"}}>Latent Space</h3>\n            {generateLatentSpace()}\n            {(Math.abs(dimension1) > 1 || Math.abs(dimension2) > 1 || Math.abs(dimension3) > 1) && (\n              <div style={{\n                fontSize: \"12px\", \n                padding: \"4px 8px\", \n                backgroundColor: \"#fff9e0\", \n                borderRadius: \"4px\", \n                marginTop: \"8px\",\n                display: \"inline-block\"\n              }}>\n                Exploring beyond training data!\n              </div>\n            )}\n          </div>\n          \n          {/* Generated Flower */}\n          <div style={{textAlign: \"center\"}}>\n            <h3 style={{marginBottom: \"15px\", fontSize: \"16px\"}}>Generated Flower</h3>\n            <svg width=\"180\" height=\"180\" viewBox=\"0 0 100 100\" style={{backgroundColor: \"#f8f8f8\", borderRadius: \"4px\"}}>\n              {generateFlower(dimension1, dimension2, dimension3)}\n            </svg>\n            \n            {diffusionMode && (\n              <div style={{marginTop: \"10px\", padding: \"8px\", backgroundColor: \"white\", borderRadius: \"4px\", boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\"}}>\n                <p style={{fontSize: \"14px\", marginBottom: \"5px\", fontWeight: \"500\"}}>Diffusion Process</p>\n                <div style={{display: \"flex\", justifyContent: \"center\", gap: \"5px\"}}>\n                  {[...Array(5)].map((_, i) => {\n                    const opacity = 0.2 + (i / 5) * 0.8;\n                    return (\n                      <div key={i} style={{opacity}}>\n                        <svg width=\"32\" height=\"32\" viewBox=\"0 0 100 100\" style={{backgroundColor: \"#f0f0f0\", borderRadius: \"2px\"}}>\n                          {generateFlower(\n                            dimension1 + (0.5 - i/10) * (Math.random() - 0.5), \n                            dimension2 + (0.5 - i/10) * (Math.random() - 0.5), \n                            dimension3 + (0.5 - i/10) * (Math.random() - 0.5)\n                          )}\n                        </svg>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Explanation */}\n      <div style={{backgroundColor: \"white\", padding: \"15px\", borderRadius: \"8px\", boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"}}>\n        <h2 style={{marginBottom: \"15px\"}}>How VAEs & Latent Diffusion Work</h2>\n        \n        <div style={{marginBottom: \"20px\"}}>\n          <h3 style={{fontSize: \"18px\", marginBottom: \"10px\"}}>VAE Latent Space</h3>\n          <p style={{marginBottom: \"10px\"}}>Variational Autoencoders (VAEs) learn to compress images into a continuous latent space where:</p>\n          <ul style={{paddingLeft: \"20px\", marginBottom: \"10px\"}}>\n            <li>Similar features are mapped to similar regions</li>\n            <li>Each dimension controls a specific visual attribute</li>\n            <li>The space is continuous, allowing smooth interpolation</li>\n            <li>Novel combinations beyond training data can be generated</li>\n          </ul>\n        </div>\n        \n        <div>\n          <h3 style={{fontSize: \"18px\", marginBottom: \"10px\"}}>Latent Diffusion</h3>\n          <p style={{marginBottom: \"10px\"}}>Diffusion models like Stable Diffusion extend this by:</p>\n          <ol style={{paddingLeft: \"20px\"}}>\n            <li>Adding noise to latent vectors to create variations</li>\n            <li>Learning to remove noise in a controlled way</li>\n            <li>Enabling text-guided latent space navigation</li>\n            <li>Allowing for creative generation beyond the training distribution</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StableVAEVisualization;\n","import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst OptimizerComparison = () => {\n  useEffect(() => {\n    renderVisualization();\n    return () => d3.select('#viz-container').selectAll('*').remove();\n  }, []);\n  \n  const renderVisualization = () => {\n    // Setup\n    const width = 600, height = 500;\n    const margin = { top: 40, right: 40, bottom: 40, left: 40 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    \n    const svg = d3.select('#viz-container')\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n    \n    // Loss curves\n    const iterations = 100;\n    const xScale = d3.scaleLinear()\n      .domain([0, iterations])\n      .range([0, innerWidth]);\n    \n    const yScale = d3.scaleLinear()\n      .domain([0, 1])\n      .range([innerHeight, 0]);\n    \n    // Generate loss data for different optimizers\n    const sgdData = [];\n    const adamData = [];\n    const adamWData = [];\n    \n    for (let i = 0; i <= iterations; i++) {\n      // SGD has long plateau at saddle point\n      let sgdLoss = 0;\n      if (i <= 30) sgdLoss = Math.exp(-0.05 * i) * 0.8 + 0.2;\n      else if (i <= 80) sgdLoss = 0.2 - 0.001 * (i - 30); // Long plateau\n      else sgdLoss = 0.15 - 0.005 * (i - 80);\n      \n      // Adam moves through saddle point efficiently\n      let adamLoss = 0;\n      if (i <= 30) adamLoss = Math.exp(-0.05 * i) * 0.8 + 0.2;\n      else if (i <= 40) adamLoss = 0.2 - 0.005 * (i - 30); // Brief plateau\n      else adamLoss = 0.15 * Math.exp(-0.05 * (i - 40)) + 0.05;\n      \n      // AdamW handles saddle point even better with weight decay\n      let adamWLoss = 0;\n      if (i <= 30) adamWLoss = Math.exp(-0.05 * i) * 0.8 + 0.2;\n      else if (i <= 37) adamWLoss = 0.2 - 0.008 * (i - 30); // Even shorter plateau\n      else adamWLoss = 0.12 * Math.exp(-0.06 * (i - 37)) + 0.03;\n      \n      sgdData.push({ x: i, y: sgdLoss });\n      adamData.push({ x: i, y: adamLoss });\n      adamWData.push({ x: i, y: adamWLoss });\n    }\n    \n    // Draw axes\n    svg.append('g')\n      .attr('transform', `translate(0, ${innerHeight})`)\n      .call(d3.axisBottom(xScale).ticks(5))\n      .append('text')\n      .attr('x', innerWidth / 2)\n      .attr('y', 35)\n      .attr('fill', 'black')\n      .attr('text-anchor', 'middle')\n      .text('Iterations');\n    \n    svg.append('g')\n      .call(d3.axisLeft(yScale).ticks(5))\n      .append('text')\n      .attr('transform', 'rotate(-90)')\n      .attr('x', -innerHeight / 2)\n      .attr('y', -35)\n      .attr('fill', 'black')\n      .attr('text-anchor', 'middle')\n      .text('Loss');\n    \n    // Create line generator\n    const line = d3.line()\n      .x(d => xScale(d.x))\n      .y(d => yScale(d.y))\n      .curve(d3.curveBasis);\n    \n    // Draw SGD loss curve\n    svg.append('path')\n      .datum(sgdData)\n      .attr('fill', 'none')\n      .attr('stroke', 'blue')\n      .attr('stroke-width', 3)\n      .attr('stroke-dasharray', '5,5')\n      .attr('d', line);\n    \n    // Draw Adam loss curve\n    svg.append('path')\n      .datum(adamData)\n      .attr('fill', 'none')\n      .attr('stroke', 'green')\n      .attr('stroke-width', 3)\n      .attr('d', line);\n    \n    // Draw AdamW loss curve\n    svg.append('path')\n      .datum(adamWData)\n      .attr('fill', 'none')\n      .attr('stroke', 'purple')\n      .attr('stroke-width', 3)\n      .attr('d', line);\n    \n    // Highlight saddle point region\n    svg.append('rect')\n      .attr('x', xScale(30))\n      .attr('y', yScale(0.25))\n      .attr('width', xScale(80) - xScale(30))\n      .attr('height', yScale(0.15) - yScale(0.25))\n      .attr('fill', 'rgba(255, 255, 0, 0.2)')\n      .attr('stroke', 'orange')\n      .attr('stroke-dasharray', '3,3');\n    \n    svg.append('text')\n      .attr('x', xScale(55))\n      .attr('y', yScale(0.27))\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .text('Saddle Point Region');\n    \n    // Add annotations\n    svg.append('text')\n      .attr('x', xScale(70))\n      .attr('y', yScale(0.19))\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .attr('fill', 'blue')\n      .attr('font-weight', 'bold')\n      .text('SGD gets stuck');\n    \n    svg.append('text')\n      .attr('x', xScale(60))\n      .attr('y', yScale(0.08))\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .attr('fill', 'green')\n      .attr('font-weight', 'bold')\n      .text('Adam escapes');\n    \n    svg.append('text')\n      .attr('x', xScale(50))\n      .attr('y', yScale(0.04))\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .attr('fill', 'purple')\n      .attr('font-weight', 'bold')\n      .text('AdamW escapes faster');\n    \n    // Add title\n    svg.append('text')\n      .attr('x', innerWidth / 2)\n      .attr('y', -20)\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '16px')\n      .attr('font-weight', 'bold')\n      .text('Optimizer Comparison at Saddle Points');\n    \n    // Add legend with full names\n    const legend = svg.append('g')\n      .attr('transform', `translate(${innerWidth - 250}, 20)`);\n    \n    legend.append('line')\n      .attr('x1', 0)\n      .attr('y1', 0)\n      .attr('x2', 20)\n      .attr('y2', 0)\n      .attr('stroke', 'blue')\n      .attr('stroke-width', 2)\n      .attr('stroke-dasharray', '5,5');\n    \n    legend.append('text')\n      .attr('x', 25)\n      .attr('y', 5)\n      .attr('font-size', '12px')\n      .text('SGD (Stochastic Gradient Descent)');\n    \n    legend.append('line')\n      .attr('x1', 0)\n      .attr('y1', 20)\n      .attr('x2', 20)\n      .attr('y2', 20)\n      .attr('stroke', 'green')\n      .attr('stroke-width', 2);\n    \n    legend.append('text')\n      .attr('x', 25)\n      .attr('y', 25)\n      .attr('font-size', '12px')\n      .text('Adam (Adaptive Moment Estimation)');\n    \n    legend.append('line')\n      .attr('x1', 0)\n      .attr('y1', 40)\n      .attr('x2', 20)\n      .attr('y2', 40)\n      .attr('stroke', 'purple')\n      .attr('stroke-width', 2);\n    \n    legend.append('text')\n      .attr('x', 25)\n      .attr('y', 45)\n      .attr('font-size', '12px')\n      .text('AdamW (Adam with Decoupled Weight Decay)');\n    \n    // Draw small saddle function visualization\n    const saddleSize = 120;\n    const saddleX = 100;\n    const saddleY = 150;\n    \n    // Create a small saddle function visualization\n    const saddle = svg.append('g')\n      .attr('transform', `translate(${saddleX}, ${saddleY})`);\n    \n    // Add background for the saddle visualization\n    saddle.append('rect')\n      .attr('x', -10)\n      .attr('y', -10)\n      .attr('width', saddleSize + 20)\n      .attr('height', saddleSize + 20)\n      .attr('fill', 'rgba(240, 240, 240, 0.8)')\n      .attr('rx', 10);\n    \n    // Draw simplified saddle surface\n    const saddleScale = d3.scaleLinear().domain([-1, 1]).range([0, saddleSize]);\n    \n    // Create grid points for the saddle\n    const points = [];\n    for (let x = -1; x <= 1; x += 0.1) {\n      for (let y = -1; y <= 1; y += 0.1) {\n        const z = x * x - y * y; // Saddle function\n        points.push({ x, y, z });\n      }\n    }\n    \n    // Color scale for height\n    const colorScale = d3.scaleLinear()\n      .domain([-1, 0, 1])\n      .range(['steelblue', 'white', 'firebrick']);\n    \n    // Draw saddle points\n    saddle.selectAll('.saddle-point')\n      .data(points)\n      .enter()\n      .append('circle')\n      .attr('cx', d => saddleScale(d.x))\n      .attr('cy', d => saddleScale(d.y))\n      .attr('r', 3)\n      .attr('fill', d => colorScale(d.z))\n      .attr('opacity', 0.7);\n    \n    // Draw simplified trajectories on the saddle\n    const sgdSaddleTrajectory = [\n      { x: -0.8, y: 0.2 }, { x: -0.5, y: 0.1 }, { x: -0.2, y: 0.05 },\n      { x: -0.1, y: 0.02 }, { x: -0.05, y: 0.01 }, { x: -0.02, y: 0.005 },\n      { x: -0.01, y: 0.002 }, { x: 0, y: 0 } // Gets stuck\n    ];\n    \n    const adamSaddleTrajectory = [\n      { x: -0.8, y: 0.2 }, { x: -0.5, y: 0.1 }, { x: -0.2, y: 0.05 },\n      { x: 0, y: 0 }, { x: 0.2, y: -0.1 }, { x: 0.4, y: -0.2 },\n      { x: 0.6, y: -0.3 }, { x: 0.8, y: -0.4 } // Passes through\n    ];\n    \n    const adamWSaddleTrajectory = [\n      { x: -0.8, y: 0.2 }, { x: -0.4, y: 0.1 }, { x: -0.1, y: 0.03 },\n      { x: 0, y: -0.02 }, { x: 0.15, y: -0.15 }, { x: 0.35, y: -0.3 },\n      { x: 0.6, y: -0.5 }, { x: 0.9, y: -0.7 } // Passes through with more direct path\n    ];\n    \n    // Draw SGD path on saddle\n    saddle.append('path')\n      .datum(sgdSaddleTrajectory)\n      .attr('fill', 'none')\n      .attr('stroke', 'blue')\n      .attr('stroke-width', 2)\n      .attr('stroke-dasharray', '3,3')\n      .attr('d', d3.line()\n        .x(d => saddleScale(d.x))\n        .y(d => saddleScale(d.y))\n        .curve(d3.curveBasis));\n    \n    // Draw Adam path on saddle\n    saddle.append('path')\n      .datum(adamSaddleTrajectory)\n      .attr('fill', 'none')\n      .attr('stroke', 'green')\n      .attr('stroke-width', 2)\n      .attr('d', d3.line()\n        .x(d => saddleScale(d.x))\n        .y(d => saddleScale(d.y))\n        .curve(d3.curveBasis));\n    \n    // Draw AdamW path on saddle\n    saddle.append('path')\n      .datum(adamWSaddleTrajectory)\n      .attr('fill', 'none')\n      .attr('stroke', 'purple')\n      .attr('stroke-width', 2)\n      .attr('d', d3.line()\n        .x(d => saddleScale(d.x))\n        .y(d => saddleScale(d.y))\n        .curve(d3.curveBasis));\n    \n    // Mark saddle point\n    saddle.append('circle')\n      .attr('cx', saddleScale(0))\n      .attr('cy', saddleScale(0))\n      .attr('r', 5)\n      .attr('fill', 'yellow')\n      .attr('stroke', 'black');\n    \n    // Add saddle title\n    saddle.append('text')\n      .attr('x', saddleSize / 2)\n      .attr('y', -5)\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .attr('font-weight', 'bold')\n      .text('Saddle Point (x² - y²)');\n  };\n  \n  return (\n    <div className=\"w-full max-w-4xl mx-auto\">\n      <div id=\"viz-container\" className=\"w-full h-[500px] border rounded bg-white p-4\"></div>\n      \n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-lg\">\n        <div className=\"bg-white p-4 rounded shadow\">\n          <h3 className=\"text-lg font-bold text-blue-700 mb-2\">Stochastic Gradient Descent (SGD)</h3>\n          <p>Uses the same learning rate for all parameters and applies no momentum by default. Near saddle points, all gradients become very small, causing SGD to slow down dramatically or get \"stuck\" for many iterations.</p>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded shadow\">\n          <h3 className=\"text-lg font-bold text-green-700 mb-2\">Adaptive Moment Estimation (Adam)</h3>\n          <p>Maintains separate learning rates for each parameter based on gradient history. These adaptive rates automatically increase when gradients are consistently small, allowing it to escape saddle points faster.</p>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded shadow\">\n          <h3 className=\"text-lg font-bold text-purple-700 mb-2\">Adam with Decoupled Weight Decay (AdamW)</h3>\n          <p>Extends Adam by applying weight decay directly to weights rather than to gradients. This decoupling helps break symmetry at saddle points and provides better regularization, often resulting in even faster escape.</p>\n        </div>\n        \n        <div className=\"col-span-1 md:col-span-3 bg-yellow-50 p-4 rounded shadow\">\n          <h3 className=\"text-lg font-bold mb-2\">Mathematical Components of Adaptive Methods</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-bold\">How Adam Works:</h4>\n              <ul className=\"list-disc pl-5 space-y-1\">\n                <li><span className=\"font-semibold\">First Moment:</span> m<sub>t</sub> = β<sub>1</sub>·m<sub>t-1</sub> + (1-β<sub>1</sub>)·g<sub>t</sub> (provides momentum)</li>\n                <li><span className=\"font-semibold\">Second Moment:</span> v<sub>t</sub> = β<sub>2</sub>·v<sub>t-1</sub> + (1-β<sub>2</sub>)·g<sub>t</sub>² (estimates variance)</li>\n                <li><span className=\"font-semibold\">Bias Correction:</span> m̂<sub>t</sub> = m<sub>t</sub>/(1-β<sub>1</sub><sup>t</sup>), v̂<sub>t</sub> = v<sub>t</sub>/(1-β<sub>2</sub><sup>t</sup>)</li>\n                <li><span className=\"font-semibold\">Parameter Update:</span> θ<sub>t+1</sub> = θ<sub>t</sub> - α·m̂<sub>t</sub>/(√v̂<sub>t</sub> + ε)</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-bold\">How AdamW Differs:</h4>\n              <ul className=\"list-disc pl-5 space-y-1\">\n                <li><span className=\"font-semibold\">Standard Adam:</span> Applies L2 regularization within gradient: g<sub>t</sub> = ∇f(θ<sub>t</sub>) + λθ<sub>t</sub></li>\n                <li><span className=\"font-semibold\">AdamW:</span> Decouples weight decay: θ<sub>t+1</sub> = θ<sub>t</sub> - α·m̂<sub>t</sub>/(√v̂<sub>t</sub> + ε) - α·λ·θ<sub>t</sub></li>\n                <li><span className=\"font-semibold\">Benefit:</span> More effective regularization that is independent of gradient magnitude</li>\n                <li><span className=\"font-semibold\">Saddle Point Impact:</span> Helps overcome symmetrical parameter distributions often found at saddle points</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OptimizerComparison;\n","import React, { useState, useEffect } from 'react';\n\nconst TrainingDataVisualization = () => {\n  // State for controlling parameters\n  const [batchSize, setBatchSize] = useState(10);\n  const [currentEpoch, setCurrentEpoch] = useState(1);\n  const [currentBatch, setCurrentBatch] = useState(1);\n  const [totalBatches, setTotalBatches] = useState(10);\n  const [dataColors, setDataColors] = useState([]);\n  const [shuffleEnabled, setShuffleEnabled] = useState(false);\n  const [shuffledIndices, setShuffledIndices] = useState({});\n  const totalData = 100;\n\n  // Generate distinct colors for each data point\n  useEffect(() => {\n    const colors = [];\n    for (let i = 0; i < totalData; i++) {\n      // Generate hue values evenly distributed around the color wheel\n      const hue = (i * 360 / totalData) % 360;\n      // Use high saturation and medium lightness for vibrant, distinguishable colors\n      colors.push(`hsl(${hue}, 80%, 60%)`);\n    }\n    setDataColors(colors);\n  }, []);\n\n  // Calculate total batches whenever batch size changes\n  useEffect(() => {\n    const batches = Math.ceil(totalData / batchSize);\n    setTotalBatches(batches);\n    // Reset current batch if it exceeds the new total\n    if (currentBatch > batches) {\n      setCurrentBatch(1);\n    }\n  }, [batchSize, currentBatch]);\n\n  // Generate shuffled indices for a given epoch if they don't already exist\n  useEffect(() => {\n    if (shuffleEnabled && !shuffledIndices[currentEpoch]) {\n      // Create a new shuffled array for this epoch\n      const indices = Array.from({ length: totalData }, (_, i) => i);\n      \n      // Fisher-Yates shuffle algorithm with a seeded random based on the epoch\n      // This ensures the same epoch always has the same shuffle pattern\n      const shuffled = [...indices];\n      const seed = currentEpoch * 1337; // Simple seeding mechanism\n      let m = shuffled.length, t, i;\n      \n      // Seeded random number generator\n      const seededRandom = () => {\n        const x = Math.sin(seed + m--) * 10000;\n        return x - Math.floor(x);\n      };\n      \n      // Shuffle algorithm\n      while (m) {\n        i = Math.floor(seededRandom() * m--);\n        t = shuffled[m];\n        shuffled[m] = shuffled[i];\n        shuffled[i] = t;\n      }\n      \n      setShuffledIndices(prev => ({\n        ...prev,\n        [currentEpoch]: shuffled\n      }));\n    }\n  }, [currentEpoch, shuffleEnabled, shuffledIndices]);\n\n  // Determine which data points are in the current batch\n  const getCurrentBatchIndices = () => {\n    // If shuffle is enabled and we have shuffled indices for the current epoch, use those\n    if (shuffleEnabled && shuffledIndices[currentEpoch]) {\n      const ordering = shuffledIndices[currentEpoch];\n      const startIdx = (currentBatch - 1) * batchSize;\n      const endIdx = Math.min(startIdx + batchSize, totalData);\n      \n      // Get the actual indices based on the shuffled ordering\n      return Array.from({ length: endIdx - startIdx }, (_, i) => ordering[startIdx + i]);\n    } else {\n      // No shuffling, use sequential ordering\n      const startIdx = (currentBatch - 1) * batchSize;\n      const endIdx = Math.min(startIdx + batchSize, totalData);\n      return Array.from({ length: endIdx - startIdx }, (_, i) => startIdx + i);\n    }\n  };\n\n  // Get indices for data points in the current batch\n  const currentBatchIndices = getCurrentBatchIndices();\n\n  // Handle batch size change\n  const handleBatchSizeChange = (e) => {\n    const newSize = parseInt(e.target.value, 10);\n    if (newSize >= 1 && newSize <= totalData) {\n      setBatchSize(newSize);\n    }\n  };\n\n  // Handle epoch change\n  const handleEpochChange = (e) => {\n    const newEpoch = parseInt(e.target.value, 10);\n    if (newEpoch >= 1) {\n      setCurrentEpoch(newEpoch);\n    }\n  };\n\n  // Handle batch change\n  const handleBatchChange = (e) => {\n    const newBatch = parseInt(e.target.value, 10);\n    if (newBatch >= 1 && newBatch <= totalBatches) {\n      setCurrentBatch(newBatch);\n    }\n  };\n\n  // Move to next batch or epoch\n  const handleNextBatch = () => {\n    if (currentBatch < totalBatches) {\n      setCurrentBatch(currentBatch + 1);\n    } else {\n      setCurrentBatch(1);\n      setCurrentEpoch(currentEpoch + 1);\n    }\n  };\n\n  // Move to previous batch or epoch\n  const handlePrevBatch = () => {\n    if (currentBatch > 1) {\n      setCurrentBatch(currentBatch - 1);\n    } else if (currentEpoch > 1) {\n      setCurrentEpoch(currentEpoch - 1);\n      setCurrentBatch(totalBatches);\n    }\n  };\n\n  // Render grid items\n  const renderDataPoints = () => {\n    return Array.from({ length: totalData }, (_, idx) => {\n      const isActive = currentBatchIndices.includes(idx);\n      return (\n        <div \n          key={idx}\n          className={`\n            data-point\n            ${isActive ? 'active' : 'inactive'}\n          `}\n          style={{ \n            backgroundColor: dataColors[idx]\n          }}\n        >\n          {idx + 1}\n        </div>\n      );\n    });\n  };\n\n  return (\n    <div className=\"visualization-container\">\n      <h1 className=\"main-title\">Training Data Epoch and Batch Visualization</h1>\n      \n      {/* Controls section */}\n      <div className=\"controls-section\">\n        <div className=\"control-group\">\n          <div className=\"control-item\">\n            <label>Batch Size:</label>\n            <div className=\"input-container\">\n              <input\n                type=\"number\"\n                value={batchSize}\n                onChange={handleBatchSizeChange}\n                min=\"1\"\n                max={totalData}\n                className=\"number-input\"\n              />\n              <input\n                type=\"range\"\n                value={batchSize}\n                onChange={handleBatchSizeChange}\n                min=\"1\"\n                max={totalData}\n                className=\"range-input\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"control-item\">\n            <label>Current Epoch:</label>\n            <div className=\"input-container\">\n              <input\n                type=\"number\"\n                value={currentEpoch}\n                onChange={handleEpochChange}\n                min=\"1\"\n                className=\"number-input\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"control-item\">\n            <label>Current Batch:</label>\n            <div className=\"input-container\">\n              <input\n                type=\"number\"\n                value={currentBatch}\n                onChange={handleBatchChange}\n                min=\"1\"\n                max={totalBatches}\n                className=\"number-input\"\n              />\n              <input\n                type=\"range\"\n                value={currentBatch}\n                onChange={handleBatchChange}\n                min=\"1\"\n                max={totalBatches}\n                className=\"range-input\"\n              />\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"shuffle-option\">\n          <label className=\"shuffle-label\">\n            <input\n              type=\"checkbox\"\n              checked={shuffleEnabled}\n              onChange={() => {\n                // Reset shuffled indices when toggling shuffle to ensure a clean state\n                if (!shuffleEnabled) {\n                  setShuffledIndices({});\n                }\n                setShuffleEnabled(!shuffleEnabled);\n              }}\n              className=\"shuffle-checkbox\"\n            />\n            <span>Shuffle Data Between Epochs</span>\n          </label>\n        </div>\n        \n        <div className=\"control-buttons\">\n          <button \n            onClick={handlePrevBatch} \n            className=\"control-button\"\n          >\n            Previous Batch\n          </button>\n          <button \n            onClick={handleNextBatch} \n            className=\"control-button\"\n          >\n            Next Batch\n          </button>\n        </div>\n      </div>\n      \n      {/* Status information */}\n      <div className=\"status-section\">\n        <h2>Current Status:</h2>\n        <div className=\"status-grid\">\n          <div className=\"status-column\">\n            <p><span className=\"status-label\">Total Training Data:</span> {totalData}</p>\n            <p><span className=\"status-label\">Batch Size:</span> {batchSize}</p>\n            <p><span className=\"status-label\">Total Batches per Epoch:</span> {totalBatches}</p>\n            <p><span className=\"status-label\">Shuffle Between Epochs:</span> {shuffleEnabled ? 'Enabled' : 'Disabled'}</p>\n          </div>\n          <div className=\"status-column\">\n            <p><span className=\"status-label\">Current Epoch:</span> {currentEpoch}</p>\n            <p><span className=\"status-label\">Current Batch:</span> {currentBatch} of {totalBatches}</p>\n            <p><span className=\"status-label\">Data Points in Current Batch:</span> {currentBatchIndices.length}</p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Data visualization grid */}\n      <div className=\"visualization-section\">\n        <h2>Data Point Visualization:</h2>\n        <div className=\"data-grid\">\n          {renderDataPoints()}\n        </div>\n      </div>\n      \n      {/* Legend */}\n      <div className=\"legend-section\">\n        <h2>How to Read This Visualization:</h2>\n        <ul className=\"legend-list\">\n          <li>Each colored square represents one training data point (numbered 1-100)</li>\n          <li>Data points in the current batch are highlighted and slightly larger</li>\n          <li>Adjust the batch size to see how data is divided into batches</li>\n          <li>Navigate through batches to see how the model would process data points</li>\n          <li>Each complete pass through all batches represents one epoch</li>\n          <li>When \"Shuffle Between Epochs\" is enabled, data points are randomly reordered for each epoch (but remain consistent within an epoch)</li>\n        </ul>\n      </div>\n\n      <style jsx>{`\n        .visualization-container {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n          max-width: 1200px;\n          margin: 0 auto;\n          padding: 16px;\n          background-color: white;\n          border-radius: 8px;\n          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n        }\n        \n        .main-title {\n          font-size: 24px;\n          font-weight: bold;\n          margin-bottom: 24px;\n          text-align: center;\n        }\n        \n        .controls-section {\n          margin-bottom: 24px;\n          padding: 16px;\n          background-color: #f8f9fa;\n          border-radius: 8px;\n        }\n        \n        .control-group {\n          display: grid;\n          grid-template-columns: 1fr;\n          gap: 16px;\n          margin-bottom: 16px;\n        }\n        \n        @media (min-width: 640px) {\n          .control-group {\n            grid-template-columns: repeat(2, 1fr);\n          }\n        }\n        \n        @media (min-width: 768px) {\n          .control-group {\n            grid-template-columns: repeat(3, 1fr);\n          }\n        }\n        \n        .control-item {\n          margin-bottom: 8px;\n        }\n        \n        .control-item label {\n          display: block;\n          font-size: 14px;\n          font-weight: 500;\n          margin-bottom: 4px;\n        }\n        \n        .input-container {\n          display: flex;\n          align-items: center;\n        }\n        \n        .number-input {\n          width: 60px;\n          padding: 6px;\n          border: 1px solid #d1d5db;\n          border-radius: 4px;\n          margin-right: 8px;\n        }\n        \n        .range-input {\n          flex-grow: 1;\n        }\n        \n        .shuffle-option {\n          margin-bottom: 16px;\n        }\n        \n        .shuffle-label {\n          display: flex;\n          align-items: center;\n          cursor: pointer;\n        }\n        \n        .shuffle-checkbox {\n          margin-right: 8px;\n        }\n        \n        .control-buttons {\n          display: flex;\n          justify-content: center;\n          gap: 8px;\n        }\n        \n        .control-button {\n          padding: 8px 16px;\n          background-color: #3b82f6;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          font-size: 14px;\n        }\n        \n        .control-button:hover {\n          background-color: #2563eb;\n        }\n        \n        .status-section {\n          margin-bottom: 24px;\n          padding: 16px;\n          background-color: #e6f2ff;\n          border-radius: 8px;\n        }\n        \n        .status-section h2 {\n          font-size: 18px;\n          font-weight: 600;\n          margin-bottom: 12px;\n        }\n        \n        .status-grid {\n          display: grid;\n          grid-template-columns: 1fr;\n          gap: 16px;\n        }\n        \n        @media (min-width: 640px) {\n          .status-grid {\n            grid-template-columns: repeat(2, 1fr);\n          }\n        }\n        \n        .status-label {\n          font-weight: 500;\n        }\n        \n        .visualization-section {\n          margin-bottom: 24px;\n          padding: 16px;\n          border: 1px solid #d1d5db;\n          border-radius: 8px;\n        }\n        \n        .visualization-section h2 {\n          font-size: 18px;\n          font-weight: 600;\n          margin-bottom: 16px;\n        }\n        \n        .data-grid {\n          display: grid;\n          grid-template-columns: repeat(5, 1fr);\n          gap: 4px;\n        }\n        \n        @media (min-width: 480px) {\n          .data-grid {\n            grid-template-columns: repeat(8, 1fr);\n          }\n        }\n        \n        @media (min-width: 640px) {\n          .data-grid {\n            grid-template-columns: repeat(10, 1fr);\n          }\n        }\n        \n        @media (min-width: 768px) {\n          .data-grid {\n            gap: 8px;\n          }\n        }\n        \n        .data-point {\n          aspect-ratio: 1/1;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          border-radius: 4px;\n          font-size: 12px;\n          font-weight: bold;\n          transition: all 0.2s ease;\n          color: white;\n        }\n        \n        @media (min-width: 640px) {\n          .data-point {\n            font-size: 14px;\n          }\n        }\n        \n        .data-point.active {\n          transform: scale(1.1);\n          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);\n          z-index: 10;\n          border: 2px solid white;\n        }\n        \n        .data-point.inactive {\n          opacity: 0.4;\n          filter: brightness(0.75);\n          color: rgba(255, 255, 255, 0.6);\n        }\n        \n        .legend-section {\n          padding: 16px;\n          background-color: #f8f9fa;\n          border-radius: 8px;\n        }\n        \n        .legend-section h2 {\n          font-size: 18px;\n          font-weight: 600;\n          margin-bottom: 12px;\n        }\n        \n        .legend-list {\n          list-style-type: disc;\n          padding-left: 20px;\n        }\n        \n        .legend-list li {\n          margin-bottom: 4px;\n          font-size: 14px;\n        }\n        \n        @media (min-width: 640px) {\n          .legend-list li {\n            font-size: 16px;\n          }\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default TrainingDataVisualization;\n","import React, { useState } from 'react';\n\nconst NeuralNetworkVisualizer = () => {\n  // Basic styles as objects to ensure they apply without relying on Tailwind\n  const styles = {\n    container: {\n      padding: '20px',\n      maxWidth: '1000px',\n      margin: '0 auto',\n      backgroundColor: '#f8fafc',\n      borderRadius: '12px',\n      boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n      fontFamily: 'Arial, sans-serif'\n    },\n    heading: {\n      textAlign: 'center',\n      fontSize: '24px',\n      fontWeight: 'bold',\n      marginBottom: '24px'\n    },\n    compareContainer: {\n      backgroundColor: '#f1f5f9',\n      padding: '24px',\n      borderRadius: '8px'\n    },\n    section: {\n      backgroundColor: 'white',\n      padding: '16px',\n      borderRadius: '8px',\n      boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)',\n      marginBottom: '32px'\n    },\n    sectionTitle: {\n      fontSize: '18px',\n      fontWeight: 'bold',\n      marginBottom: '8px'\n    },\n    subtitle: {\n      color: '#3b82f6',\n      fontSize: '14px',\n      marginBottom: '16px'\n    },\n    description: {\n      fontSize: '12px',\n      color: '#4b5563',\n      marginTop: '16px'\n    },\n    keyPoints: {\n      marginTop: '32px',\n      fontSize: '14px'\n    },\n    keyPointsTitle: {\n      fontSize: '18px',\n      fontWeight: 'bold',\n      marginBottom: '8px'\n    },\n    keyComponentsTitle: {\n      fontSize: '18px',\n      fontWeight: 'bold',\n      marginTop: '24px',\n      marginBottom: '8px'\n    },\n    detailsContainer: {\n      backgroundColor: 'white',\n      padding: '16px',\n      borderRadius: '8px',\n      boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'\n    },\n    componentTitle: {\n      color: '#4f46e5',\n      fontSize: '14px',\n      fontWeight: '600',\n      marginBottom: '8px'\n    },\n    termList: {\n      marginTop: '16px'\n    },\n    term: {\n      color: '#ca8a04',\n      fontSize: '14px',\n      fontWeight: '500'\n    },\n    definition: {\n      marginLeft: '16px',\n      marginBottom: '16px'\n    },\n    // Architecture component styles\n    architectureContainer: {\n      display: 'flex',\n      marginBottom: '24px'\n    },\n    architectureSimpleContainer: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    flowContainer: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginBottom: '16px'\n    },\n    verticalColumn: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    box: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: '8px',\n      textAlign: 'center',\n      borderRadius: '8px',\n      boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n      margin: '0 8px',\n      position: 'relative',\n      fontSize: '12px',\n      fontWeight: '600'\n    },\n    inputBox: {\n      backgroundColor: '#dbeafe',\n      width: '80px',\n      height: '160px',\n    },\n    encoderBox: {\n      backgroundColor: '#dcfce7',\n      width: '96px',\n      height: '128px',\n      border: '2px solid transparent'\n    },\n    latentBox: {\n      backgroundColor: '#fef9c3',\n      width: '64px',\n      height: '64px'\n    },\n    decoderBox: {\n      backgroundColor: '#f3e8ff',\n      width: '96px',\n      height: '128px',\n      border: '2px solid transparent'\n    },\n    outputBox: {\n      backgroundColor: '#dbeafe',\n      width: '80px',\n      height: '160px'\n    },\n    meanBox: {\n      backgroundColor: '#fef9c3',\n      width: '48px',\n      height: '48px',\n      border: '2px solid #22c55e'\n    },\n    varBox: {\n      backgroundColor: '#fef08a',\n      width: '48px',\n      height: '48px',\n      border: '2px solid #22c55e'\n    },\n    samplingBox: {\n      backgroundColor: '#fef9c3',\n      width: '64px',\n      height: '64px',\n      border: '2px solid #22c55e'\n    },\n    contractingBox: {\n      backgroundColor: '#dcfce7',\n      width: '96px',\n      height: '112px',\n      border: '2px solid #6366f1'\n    },\n    deeperBox: {\n      backgroundColor: '#86efac',\n      width: '64px',\n      height: '80px',\n      border: '2px solid #6366f1'\n    },\n    bottleneckBox: {\n      backgroundColor: '#fef9c3',\n      width: '48px',\n      height: '48px'\n    },\n    expandingBox: {\n      backgroundColor: '#e9d5ff',\n      width: '64px',\n      height: '80px',\n      border: '2px solid #6366f1'\n    },\n    furtherBox: {\n      backgroundColor: '#f3e8ff',\n      width: '96px',\n      height: '112px',\n      border: '2px solid #6366f1'\n    },\n    arrow: {\n      margin: '0 8px',\n      fontSize: '20px',\n      fontWeight: 'bold',\n      color: '#6b7280'\n    },\n    downArrow: {\n      margin: '8px 0',\n      fontSize: '20px',\n      fontWeight: 'bold',\n      color: '#6b7280'\n    },\n    skipConnectionsLabel: {\n      backgroundColor: '#dbeafe',\n      padding: '8px 12px',\n      borderRadius: '8px',\n      border: '2px solid #3b82f6',\n      color: '#1d4ed8',\n      fontSize: '12px',\n      fontWeight: 'bold',\n      textAlign: 'center',\n      marginTop: '16px'\n    }\n  };\n\n  const renderAutoencoder = () => {\n    return (\n      <div style={styles.flowContainer}>\n        <div style={{...styles.box, ...styles.inputBox}}>Input</div>\n        <div style={styles.arrow}>→</div>\n        <div style={{...styles.box, ...styles.encoderBox}}>Encoder</div>\n        <div style={styles.arrow}>→</div>\n        <div style={{...styles.box, ...styles.latentBox}}>Latent Space</div>\n        <div style={styles.arrow}>→</div>\n        <div style={{...styles.box, ...styles.decoderBox}}>Decoder</div>\n        <div style={styles.arrow}>→</div>\n        <div style={{...styles.box, ...styles.outputBox}}>Output</div>\n      </div>\n    );\n  };\n\n  const renderVAE = () => {\n    return (\n      <div style={styles.architectureSimpleContainer}>\n        {/* First row: Input to Encoder */}\n        <div style={styles.flowContainer}>\n          <div style={{...styles.box, ...styles.inputBox}}>Input</div>\n          <div style={styles.arrow}>→</div>\n          <div style={{...styles.box, ...styles.encoderBox}}>Encoder</div>\n        </div>\n        \n        {/* Second row: Down arrow */}\n        <div style={styles.downArrow}>↓</div>\n        \n        {/* Third row: Mean and Variance */}\n        <div style={styles.flowContainer}>\n          <div style={{...styles.box, ...styles.meanBox}}>μ (Mean)</div>\n          <div style={{marginLeft: '16px', marginRight: '16px'}}></div>\n          <div style={{...styles.box, ...styles.varBox}}>σ² (Var)</div>\n        </div>\n        \n        {/* Fourth row: Curved arrow (rendered as text for simplicity) */}\n        <div style={{margin: '12px 0', fontSize: '20px', color: '#6b7280'}}>⟲</div>\n        \n        {/* Fifth row: Sampling */}\n        <div style={{...styles.box, ...styles.samplingBox, marginBottom: '16px'}}>Sampling</div>\n        \n        {/* Sixth row: Decoder to Output */}\n        <div style={styles.flowContainer}>\n          <div style={{...styles.box, ...styles.decoderBox}}>Decoder</div>\n          <div style={styles.arrow}>→</div>\n          <div style={{...styles.box, ...styles.outputBox}}>Output</div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderUNet = () => {\n    return (\n      <div style={styles.architectureSimpleContainer}>\n        {/* Top row: Input to Bottleneck */}\n        <div style={styles.flowContainer}>\n          <div style={{...styles.box, ...styles.inputBox}}>Input</div>\n          <div style={styles.arrow}>→</div>\n          <div style={{...styles.box, ...styles.contractingBox}}>Contracting Path</div>\n          <div style={styles.arrow}>→</div>\n          <div style={{...styles.box, ...styles.deeperBox}}>Deeper Contraction</div>\n          <div style={styles.arrow}>→</div>\n          <div style={{...styles.box, ...styles.bottleneckBox}}>Bottleneck</div>\n        </div>\n        \n        {/* Skip connections representation (simplified) */}\n        <div style={styles.skipConnectionsLabel}>Skip Connections (New in U-Net)</div>\n        \n        {/* Bottom row: Output back to before bottleneck */}\n        <div style={styles.flowContainer}>\n          <div style={{...styles.box, ...styles.outputBox}}>Output</div>\n          <div style={styles.arrow}>←</div>\n          <div style={{...styles.box, ...styles.furtherBox}}>Further Expansion</div>\n          <div style={styles.arrow}>←</div>\n          <div style={{...styles.box, ...styles.expandingBox}}>Expanding Path</div>\n          <div style={styles.arrow}>←</div>\n          <div style={{opacity: 0, width: '48px'}}></div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.heading}>Neural Network Architecture Comparison</h1>\n      \n      <div style={styles.compareContainer}>\n        <div style={styles.section}>\n          <h3 style={styles.sectionTitle}>Autoencoder (Base Architecture)</h3>\n          <div>{renderAutoencoder()}</div>\n          <p style={styles.description}>Basic autoencoder: Encodes input to a compressed representation, then decodes it back.</p>\n        </div>\n        \n        <div style={styles.section}>\n          <h3 style={styles.sectionTitle}>Variational Autoencoder (VAE)</h3>\n          <p style={styles.subtitle}>Modified by replacing the latent vector with a probabilistic distribution</p>\n          <div>{renderVAE()}</div>\n          <p style={styles.description}>Difference from autoencoder: Encodes to distribution parameters (mean & variance) instead of fixed vector, enables sampling for generation.</p>\n        </div>\n        \n        <div style={styles.section}>\n          <h3 style={styles.sectionTitle}>U-Net</h3>\n          <p style={styles.subtitle}>Modified by splitting encoder/decoder and adding skip connections</p>\n          <div>{renderUNet()}</div>\n          <p style={styles.description}>Difference from autoencoder: Splits encoder/decoder into multiple stages and adds skip connections to preserve spatial information.</p>\n        </div>\n      </div>\n      \n      <div style={styles.keyPoints}>\n        <h2 style={styles.keyPointsTitle}>Key Points:</h2>\n        <ul style={{paddingLeft: '20px'}}>\n          <li><span style={{fontWeight: '600'}}>Autoencoder</span>: Basic encoder-bottleneck-decoder structure</li>\n          <li><span style={{fontWeight: '600'}}>VAE</span>: Adds probabilistic sampling through mean and variance parameters</li>\n          <li><span style={{fontWeight: '600'}}>U-Net</span>: Adds skip connections between corresponding encoder and decoder layers</li>\n        </ul>\n        \n        <h2 style={styles.keyComponentsTitle}>Key Component Differences:</h2>\n        <div style={styles.detailsContainer}>\n          <h3 style={styles.componentTitle}>Latent Space vs Distribution vs Bottleneck</h3>\n          <div style={styles.termList}>\n            <div style={styles.term}>Latent Space (Autoencoder)</div>\n            <div style={styles.definition}>A fixed, deterministic compressed representation of the input. Each input maps to exactly one point in the latent space.</div>\n            \n            <div style={styles.term}>Mean & Variance (VAE)</div>\n            <div style={styles.definition}>Instead of encoding to a fixed vector, VAEs encode to parameters of a probability distribution (usually Gaussian). This creates a <em>distribution</em> over the latent space rather than a single point.</div>\n            \n            <div style={styles.term}>Sampling (VAE)</div>\n            <div style={styles.definition}>The VAE randomly samples from the probability distribution to generate a latent vector. This enables the generative capability: different samples give different outputs even for the same input.</div>\n            \n            <div style={styles.term}>Bottleneck (U-Net)</div>\n            <div style={styles.definition}>Similar to the latent space but usually preserves spatial structure. The bottleneck in U-Net is the most compressed representation but typically retains spatial dimensions, unlike the flattened vector in standard autoencoders.</div>\n          </div>\n          \n          <h3 style={styles.componentTitle}>Skip Connections (U-Net)</h3>\n          <p>Direct paths that allow information to flow from encoder to decoder layers at the same level. They help preserve fine spatial details that would otherwise be lost during compression, making U-Net excellent for tasks requiring precise localization (like image segmentation).</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NeuralNetworkVisualizer;\n","import React, { useState, useEffect, useRef } from 'react';\nimport * as math from 'mathjs';\nimport * as THREE from 'three';\n\nconst HessianEigenvalueVisualizer = () => {\n  // State for parameters\n  const [parameters, setParameters] = useState({\n    a: 1,\n    b: -1,\n    c: 0\n  });\n  \n  // State for visualization\n  const [selectedPoint, setSelectedPoint] = useState(null);\n  const [hessian, setHessian] = useState(null);\n  const [eigenvalues, setEigenvalues] = useState(null);\n  const [criticalPoints, setCriticalPoints] = useState([]);\n  \n  // State for camera controls\n  const [cameraDistance, setCameraDistance] = useState(4);\n  const [cameraRotation, setCameraRotation] = useState(0);\n  const [cameraHeight, setCameraHeight] = useState(3);\n  \n  // Three.js references\n  const containerRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cameraRef = useRef(null);\n  const animationFrameRef = useRef(null);\n  \n  // Saddle function definition\n  const functionExpression = '(a * x^2) - (b * y^2) + c';\n  const functionGradient = {\n    x: '2 * a * x',\n    y: '-2 * b * y'\n  };\n  const functionHessian = [\n    ['2 * a', '0'],\n    ['0', '-2 * b']\n  ];\n  \n  // Camera control handlers\n  const handleZoomIn = () => {\n    setCameraDistance(prev => Math.max(2, prev - 0.5));\n  };\n  \n  const handleZoomOut = () => {\n    setCameraDistance(prev => Math.min(8, prev + 0.5));\n  };\n  \n  const handleRotateLeft = () => {\n    setCameraRotation(prev => prev - 0.2);\n  };\n  \n  const handleRotateRight = () => {\n    setCameraRotation(prev => prev + 0.2);\n  };\n  \n  const handleMoveUp = () => {\n    setCameraHeight(prev => Math.min(6, prev + 0.5));\n  };\n  \n  const handleMoveDown = () => {\n    setCameraHeight(prev => Math.max(1, prev - 0.5));\n  };\n  \n  // Find critical points (where gradient is zero)\n  const findCriticalPoints = () => {\n    // For saddle function, critical point is at origin\n    const critPoint = { x: 0, y: 0, type: determinePointType([0, 0]) };\n    setCriticalPoints([critPoint]);\n    return [critPoint];\n  };\n  \n  // Determine the type of critical point based on eigenvalues\n  const determinePointType = (point) => {\n    const [x, y] = point;\n    const h = calculateHessian(x, y);\n    const eigs = calculateEigenvalues(h);\n    \n    if (eigs.every(val => val > 0)) {\n      return 'minimum';\n    } else if (eigs.every(val => val < 0)) {\n      return 'maximum';\n    } else {\n      return 'saddle';\n    }\n  };\n  \n  // Calculate Hessian matrix at a given point\n  const calculateHessian = (x, y) => {\n    const scope = {\n      x,\n      y,\n      ...parameters\n    };\n    \n    const hessianMatrix = functionHessian.map(row => \n      row.map(element => math.evaluate(element, scope))\n    );\n    \n    return hessianMatrix;\n  };\n  \n  // Calculate eigenvalues of a 2x2 matrix\n  const calculateEigenvalues = (matrix) => {\n    const a = matrix[0][0];\n    const b = matrix[0][1];\n    const c = matrix[1][0];\n    const d = matrix[1][1];\n    \n    const trace = a + d;\n    const determinant = a * d - b * c;\n    \n    const discriminant = Math.sqrt(trace * trace - 4 * determinant);\n    const eig1 = (trace + discriminant) / 2;\n    const eig2 = (trace - discriminant) / 2;\n    \n    return [eig1, eig2];\n  };\n  \n  // Calculate eigenvectors of a 2x2 matrix\n  const calculateEigenvectors = (matrix, eigenvalues) => {\n    const eigenvectors = [];\n    \n    for (let i = 0; i < eigenvalues.length; i++) {\n      const lambda = eigenvalues[i];\n      \n      const a = matrix[0][0];\n      const b = matrix[0][1];\n      const c = matrix[1][0];\n      const d = matrix[1][1];\n      \n      let eigenvector;\n      \n      if (Math.abs(b) > 1e-10) {\n        eigenvector = [b, lambda - a];\n      } else if (Math.abs(c) > 1e-10) {\n        eigenvector = [lambda - d, c];\n      } else {\n        eigenvector = i === 0 ? [1, 0] : [0, 1];\n      }\n      \n      // Normalize the eigenvector\n      const length = Math.sqrt(eigenvector[0]*eigenvector[0] + eigenvector[1]*eigenvector[1]);\n      eigenvector = [eigenvector[0]/length, eigenvector[1]/length];\n      \n      eigenvectors.push(eigenvector);\n    }\n    \n    return eigenvectors;\n  };\n  \n  // Handle point selection\n  const handlePointSelect = (point) => {\n    setSelectedPoint(point);\n    \n    const h = calculateHessian(point.x, point.y);\n    setHessian(h);\n    \n    const eigs = calculateEigenvalues(h);\n    setEigenvalues(eigs);\n  };\n  \n  // Helper function to create text labels for eigenvalues\n  const createTextLabel = (text, x, y, z, color) => {\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    canvas.width = 100;\n    canvas.height = 50;\n    \n    context.fillStyle = '#ffffff';\n    context.fillRect(0, 0, canvas.width, canvas.height);\n    context.font = '24px Arial';\n    context.fillStyle = `#${color.toString(16).padStart(6, '0')}`;\n    context.textAlign = 'center';\n    context.textBaseline = 'middle';\n    context.fillText(text, canvas.width / 2, canvas.height / 2);\n    \n    const texture = new THREE.Texture(canvas);\n    texture.needsUpdate = true;\n    \n    const spriteMaterial = new THREE.SpriteMaterial({ map: texture });\n    const sprite = new THREE.Sprite(spriteMaterial);\n    sprite.position.set(x, y, z);\n    sprite.scale.set(0.8, 0.4, 1);\n    \n    return sprite;\n  };\n  \n  // Create function surface\n  const createFunctionSurface = () => {\n    if (!sceneRef.current) return;\n    \n    // Remove existing surface if any\n    const existingSurface = sceneRef.current.getObjectByName('functionSurface');\n    if (existingSurface) {\n      sceneRef.current.remove(existingSurface);\n    }\n    \n    // Clean up any previous critical point objects\n    const objects = sceneRef.current.children.slice();\n    for (let i = 0; i < objects.length; i++) {\n      const obj = objects[i];\n      if (obj.userData && obj.userData.isCriticalPoint) {\n        sceneRef.current.remove(obj);\n      }\n    }\n    \n    // Create new surface\n    const resolution = 40;\n    const size = 4; // -2 to 2\n    \n    const geometry = new THREE.BufferGeometry();\n    const positions = [];\n    const colors = [];\n    const indices = [];\n    \n    // Generate surface points\n    let minZ = Infinity;\n    let maxZ = -Infinity;\n    \n    // First pass: calculate min/max Z for color scaling\n    for (let i = 0; i <= resolution; i++) {\n      for (let j = 0; j <= resolution; j++) {\n        const x = (i / resolution) * size - size / 2;\n        const y = (j / resolution) * size - size / 2;\n        \n        const scope = { x, y, ...parameters };\n        const z = math.evaluate(functionExpression, scope);\n        \n        minZ = Math.min(minZ, z);\n        maxZ = Math.max(maxZ, z);\n      }\n    }\n    \n    // Second pass: create vertices and colors\n    for (let i = 0; i <= resolution; i++) {\n      for (let j = 0; j <= resolution; j++) {\n        const x = (i / resolution) * size - size / 2;\n        const y = (j / resolution) * size - size / 2;\n        \n        const scope = { x, y, ...parameters };\n        const z = math.evaluate(functionExpression, scope);\n        \n        // Add position\n        positions.push(x, z, y); // Note: in Three.js, y is up\n        \n        // Add color based on height\n        const t = (z - minZ) / (maxZ - minZ || 1);\n        const r = t; // Red increases with height\n        const g = 0.2; // Fixed green\n        const b = 1 - t; // Blue decreases with height\n        \n        colors.push(r, g, b);\n        \n        // Add indices for triangles\n        if (i < resolution && j < resolution) {\n          const a = i * (resolution + 1) + j;\n          const b = i * (resolution + 1) + (j + 1);\n          const c = (i + 1) * (resolution + 1) + j;\n          const d = (i + 1) * (resolution + 1) + (j + 1);\n          \n          // Triangle 1\n          indices.push(a, b, c);\n          \n          // Triangle 2\n          indices.push(c, b, d);\n        }\n      }\n    }\n    \n    // Set attributes\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n    geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));\n    geometry.setIndex(indices);\n    \n    // Calculate normals for proper lighting\n    geometry.computeVertexNormals();\n    \n    // Create material\n    const material = new THREE.MeshPhongMaterial({\n      vertexColors: true,\n      side: THREE.DoubleSide,\n      shininess: 30\n    });\n    \n    // Create mesh\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.name = 'functionSurface';\n    \n    // Add critical points with Hessian direction indicators\n    const critPoints = findCriticalPoints();\n    critPoints.forEach(point => {\n      const scope = { x: point.x, y: point.y, ...parameters };\n      const z = math.evaluate(functionExpression, scope);\n      \n      // Choose color based on point type\n      let color;\n      if (point.type === 'minimum') color = 0x00ff00; // Green\n      else if (point.type === 'maximum') color = 0xff0000; // Red\n      else color = 0xffff00; // Yellow (saddle)\n      \n      // Create sphere for critical point\n      const sphereGeometry = new THREE.SphereGeometry(0.2, 16, 16);\n      const sphereMaterial = new THREE.MeshPhongMaterial({ color });\n      const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);\n      \n      // Position sphere\n      sphere.position.set(point.x, z, point.y);\n      \n      // Mark as critical point for cleanup\n      sphere.userData = { \n        isCriticalPoint: true,\n        point: { x: point.x, y: point.y, z, type: point.type } \n      };\n      \n      // Add sphere to scene directly for raycasting\n      sceneRef.current.add(sphere);\n      \n      // Calculate Hessian and eigenvalues for this point\n      const hessian = calculateHessian(point.x, point.y);\n      const eigenvalues = calculateEigenvalues(hessian);\n      \n      // Calculate eigenvectors (for 2x2 matrix)\n      const eigenvectors = calculateEigenvectors(hessian, eigenvalues);\n      \n      // Add arrow indicators for eigenvectors/Hessian directions\n      for (let i = 0; i < eigenvectors.length; i++) {\n        const eigenvector = eigenvectors[i];\n        const eigenvalue = eigenvalues[i];\n        \n        // Normalize and scale eigenvector\n        const length = Math.sqrt(eigenvector[0]*eigenvector[0] + eigenvector[1]*eigenvector[1]);\n        const normalizedVector = [eigenvector[0]/length, eigenvector[1]/length];\n        \n        // Scale factor for arrows - make them much larger\n        const scale = 1.5;\n        \n        // Direction determines arrow color - use blue/orange to distinguish from critical point colors\n        // Using more saturated colors for better visibility\n        const arrowColor = eigenvalue > 0 ? 0x00aaff : 0xff9900;\n        \n        // Create arrow in 3D space (x,z,y coordinates in Three.js) - make arrows thicker\n        const arrowHelper = new THREE.ArrowHelper(\n          new THREE.Vector3(normalizedVector[0], 0, normalizedVector[1]),\n          new THREE.Vector3(point.x, z + 0.2, point.y), // Start slightly above the surface\n          scale,\n          arrowColor,\n          0.5, // Head length - much larger\n          0.25  // Head width - much larger\n        );\n        \n        // Add a label for the eigenvalue\n        const arrowLabel = createTextLabel(\n          eigenvalue.toFixed(2),\n          point.x + normalizedVector[0] * (scale + 0.2),\n          z + 0.4,\n          point.y + normalizedVector[1] * (scale + 0.2),\n          arrowColor\n        );\n        \n        // Mark as critical point components for cleanup\n        arrowHelper.userData = { isCriticalPoint: true };\n        arrowLabel.userData = { isCriticalPoint: true };\n        \n        // Add arrows to scene directly\n        sceneRef.current.add(arrowHelper);\n        sceneRef.current.add(arrowLabel);\n      }\n    });\n    \n    // Add to scene\n    sceneRef.current.add(mesh);\n  };\n  \n  // Initialize and clean up Three.js\n  useEffect(() => {\n    if (!containerRef.current) return;\n    \n    // Initialize scene\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf0f0f0);\n    sceneRef.current = scene;\n    \n    // Initialize camera\n    const width = containerRef.current.clientWidth;\n    const height = containerRef.current.clientHeight;\n    const camera = new THREE.PerspectiveCamera(75, width / height, 0.1, 1000);\n    cameraRef.current = camera;\n    \n    // Update camera based on state\n    const updateCamera = () => {\n      if (!cameraRef.current) return;\n      \n      cameraRef.current.position.x = Math.sin(cameraRotation) * cameraDistance;\n      cameraRef.current.position.z = Math.cos(cameraRotation) * cameraDistance;\n      cameraRef.current.position.y = cameraHeight;\n      cameraRef.current.lookAt(0, 0, 0);\n    };\n    \n    updateCamera();\n    \n    // Initialize renderer\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(width, height);\n    rendererRef.current = renderer;\n    \n    // Clear container\n    while (containerRef.current.firstChild) {\n      containerRef.current.removeChild(containerRef.current.firstChild);\n    }\n    containerRef.current.appendChild(renderer.domElement);\n    \n    // Add lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n    \n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n    \n    // Add coordinate axes for reference\n    const axesHelper = new THREE.AxesHelper(2);\n    scene.add(axesHelper);\n    \n    // Add axis labels\n    const addAxisLabel = (text, position, color) => {\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      canvas.width = 64;\n      canvas.height = 32;\n      \n      context.fillStyle = '#ffffff';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      context.font = 'bold 24px Arial';\n      context.fillStyle = color;\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.fillText(text, canvas.width / 2, canvas.height / 2);\n      \n      const texture = new THREE.Texture(canvas);\n      texture.needsUpdate = true;\n      \n      const spriteMaterial = new THREE.SpriteMaterial({ map: texture });\n      const sprite = new THREE.Sprite(spriteMaterial);\n      sprite.position.set(...position);\n      sprite.scale.set(0.5, 0.25, 1);\n      \n      scene.add(sprite);\n    };\n    \n    // Add axis labels\n    addAxisLabel('X', [2.2, 0, 0], '#ff0000');\n    addAxisLabel('Y', [0, 0, 2.2], '#0000ff');\n    addAxisLabel('Z', [0, 2.2, 0], '#00aa00');\n    \n    // Create and add surface\n    createFunctionSurface();\n    \n    // Animation loop\n    const animate = () => {\n      if (!rendererRef.current || !sceneRef.current || !cameraRef.current) return;\n      \n      animationFrameRef.current = requestAnimationFrame(animate);\n      updateCamera();\n      renderer.render(scene, camera);\n    };\n    \n    animate();\n    \n    // Handle window resize\n    const handleResize = () => {\n      if (!containerRef.current || !rendererRef.current || !cameraRef.current) return;\n      \n      const width = containerRef.current.clientWidth;\n      const height = containerRef.current.clientHeight;\n      \n      cameraRef.current.aspect = width / height;\n      cameraRef.current.updateProjectionMatrix();\n      \n      rendererRef.current.setSize(width, height);\n    };\n    \n    window.addEventListener('resize', handleResize);\n    \n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      \n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n      \n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n      \n      // Clear container\n      if (containerRef.current) {\n        while (containerRef.current.firstChild) {\n          containerRef.current.removeChild(containerRef.current.firstChild);\n        }\n      }\n    };\n  }, [cameraDistance, cameraRotation, cameraHeight]);\n  \n  // Update function visualization when parameters change\n  useEffect(() => {\n    if (sceneRef.current) {\n      createFunctionSurface();\n    }\n  }, [parameters]);\n  \n  return (\n    <div className=\"p-4 max-w-4xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">Hessian Matrix & Eigenvalue Visualization</h1>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"md:col-span-2 bg-gray-100 p-4 rounded-lg\">\n          <h2 className=\"text-lg font-semibold mb-2\">3D Saddle Function Visualization</h2>\n          <div className=\"mb-4 text-sm\">\n            <p>Function: f(x, y) = {functionExpression.replace(/\\*/g, '·')}</p>\n            <p className=\"mt-2\">\n              <span className=\"font-medium\">Critical Points:</span>\n              <span className=\"ml-2 p-1 bg-green-500 text-white rounded\">Minimum</span>\n              <span className=\"ml-2 p-1 bg-red-500 text-white rounded\">Maximum</span>\n              <span className=\"ml-2 p-1 bg-yellow-500 text-white rounded\">Saddle</span>\n            </p>\n            <p className=\"mt-1\">\n              <span className=\"font-medium\">Arrows:</span>\n              <span className=\"ml-2 p-1 bg-blue-500 text-white rounded\">Positive eigenvalue</span>\n              <span className=\"ml-2 p-1 bg-orange-500 text-white rounded\">Negative eigenvalue</span>\n            </p>\n          </div>\n          \n          <div className=\"flex justify-center space-x-4 mb-4\">\n            <div className=\"flex flex-col items-center\">\n              <span className=\"text-sm font-medium mb-1\">Zoom</span>\n              <div className=\"flex flex-col space-y-2\">\n                <button \n                  className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                  onClick={handleZoomIn}\n                >\n                  Zoom In\n                </button>\n                <button \n                  className=\"px-3 py-1 bg-blue-500 text-white rounded hover:bg-blue-600\"\n                  onClick={handleZoomOut}\n                >\n                  Zoom Out\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col items-center\">\n              <span className=\"text-sm font-medium mb-1\">Rotate</span>\n              <div className=\"flex flex-col space-y-2\">\n                <div className=\"flex space-x-2\">\n                  <button \n                    className=\"px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600\"\n                    onClick={handleRotateLeft}\n                  >\n                    ←\n                  </button>\n                  <button \n                    className=\"px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600\"\n                    onClick={handleRotateRight}\n                  >\n                    →\n                  </button>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex flex-col items-center\">\n              <span className=\"text-sm font-medium mb-1\">Height</span>\n              <div className=\"flex flex-col space-y-2\">\n                <button \n                  className=\"px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600\"\n                  onClick={handleMoveUp}\n                >\n                  Up\n                </button>\n                <button \n                  className=\"px-3 py-1 bg-purple-500 text-white rounded hover:bg-purple-600\"\n                  onClick={handleMoveDown}\n                >\n                  Down\n                </button>\n              </div>\n            </div>\n          </div>\n          \n          <div \n            ref={containerRef} \n            className=\"w-full h-64 md:h-96 border border-gray-300\"\n            style={{ minHeight: \"300px\" }}\n          ></div>\n        </div>\n        \n        <div className=\"bg-gray-100 p-4 rounded-lg\">\n          <h2 className=\"text-lg font-semibold mb-2\">Parameters</h2>\n          \n          <div className=\"mt-4 p-3 border border-blue-300 rounded-lg\">\n            <h3 className=\"font-medium mb-2 text-center\">Fine-Tuning Controls</h3>\n            \n            <div className=\"mb-3\">\n              <div className=\"flex justify-between items-center\">\n                <label className=\"text-sm font-medium\">Parameter a:</label>\n                <input\n                  type=\"number\"\n                  min=\"-5\"\n                  max=\"5\"\n                  step=\"0.1\"\n                  value={parameters.a}\n                  onChange={(e) => setParameters({...parameters, a: parseFloat(e.target.value)})}\n                  className=\"w-20 p-1 border rounded text-right\"\n                />\n              </div>\n              <input\n                type=\"range\"\n                min=\"-5\"\n                max=\"5\"\n                step=\"0.1\"\n                value={parameters.a}\n                onChange={(e) => setParameters({...parameters, a: parseFloat(e.target.value)})}\n                className=\"w-full mt-1\"\n              />\n              <p className=\"text-xs mt-1 text-gray-600\">Controls curvature in x-direction. Positive values create upward curvature.</p>\n            </div>\n            \n            <div className=\"mb-3\">\n              <div className=\"flex justify-between items-center\">\n                <label className=\"text-sm font-medium\">Parameter b:</label>\n                <input\n                  type=\"number\"\n                  min=\"-5\"\n                  max=\"5\"\n                  step=\"0.1\"\n                  value={parameters.b}\n                  onChange={(e) => setParameters({...parameters, b: parseFloat(e.target.value)})}\n                  className=\"w-20 p-1 border rounded text-right\"\n                />\n              </div>\n              <input\n                type=\"range\"\n                min=\"-5\"\n                max=\"5\"\n                step=\"0.1\"\n                value={parameters.b}\n                onChange={(e) => setParameters({...parameters, b: parseFloat(e.target.value)})}\n                className=\"w-full mt-1\"\n              />\n              <p className=\"text-xs mt-1 text-gray-600\">Controls curvature in y-direction. Negative values create downward curvature.</p>\n            </div>\n            \n            <div className=\"mb-3\">\n              <div className=\"flex justify-between items-center\">\n                <label className=\"text-sm font-medium\">Parameter c:</label>\n                <input\n                  type=\"number\"\n                  min=\"-5\"\n                  max=\"5\"\n                  step=\"0.1\"\n                  value={parameters.c}\n                  onChange={(e) => setParameters({...parameters, c: parseFloat(e.target.value)})}\n                  className=\"w-20 p-1 border rounded text-right\"\n                />\n              </div>\n              <input\n                type=\"range\"\n                min=\"-5\"\n                max=\"5\"\n                step=\"0.1\"\n                value={parameters.c}\n                onChange={(e) => setParameters({...parameters, c: parseFloat(e.target.value)})}\n                className=\"w-full mt-1\"\n              />\n              <p className=\"text-xs mt-1 text-gray-600\">Vertical shift of the function (constant term).</p>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-2 mt-4\">\n              <button\n                className=\"p-2 bg-indigo-500 text-white rounded hover:bg-indigo-600\"\n                onClick={() => setParameters({ a: 1, b: -1, c: 0 })}\n              >\n                Perfect Saddle\n              </button>\n              <button\n                className=\"p-2 bg-indigo-500 text-white rounded hover:bg-indigo-600\"\n                onClick={() => setParameters({ a: 2, b: -0.5, c: 0 })}\n              >\n                Stretched Saddle\n              </button>\n              <button\n                className=\"p-2 bg-indigo-500 text-white rounded hover:bg-indigo-600\"\n                onClick={() => setParameters({ a: 1, b: 1, c: 0 })}\n              >\n                Bowl (Minimum)\n              </button>\n              <button\n                className=\"p-2 bg-indigo-500 text-white rounded hover:bg-indigo-600\"\n                onClick={() => setParameters({ a: -1, b: -1, c: 0 })}\n              >\n                Hill (Maximum)\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n            <h3 className=\"font-medium mb-2\">Hessian & Eigenvalues: Physical Meaning</h3>\n            <p className=\"text-sm mb-2\">\n              The <strong>Hessian matrix</strong> contains the second-order partial derivatives that measure the function's curvature in different directions.\n            </p>\n            <p className=\"text-sm mb-2\">\n              <strong>Eigenvalues</strong> represent the principal curvatures of the function at a point, regardless of coordinate system:\n            </p>\n            <ul className=\"text-sm list-disc pl-5 space-y-1 mb-2\">\n              <li><span className=\"text-blue-600 font-medium\">Positive eigenvalue</span>: Upward curvature (valley/bowl shape)</li>\n              <li><span className=\"text-orange-600 font-medium\">Negative eigenvalue</span>: Downward curvature (hill/dome shape)</li>\n              <li><span className=\"text-gray-600 font-medium\">Zero eigenvalue</span>: Flat direction (no curvature)</li>\n            </ul>\n            <p className=\"text-sm\">\n              At a <strong>saddle point</strong>, eigenvalues have opposite signs, creating a surface that curves upward in some directions and downward in others - like a saddle or mountain pass.\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      {selectedPoint && (\n        <div className=\"mt-4 bg-gray-100 p-4 rounded-lg\">\n          <h2 className=\"text-lg font-semibold mb-2\">Point Analysis</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <h3 className=\"text-md font-medium mb-1\">Selected Point:</h3>\n              <p>x: {selectedPoint.x.toFixed(2)}, y: {selectedPoint.y.toFixed(2)}, z: {selectedPoint.z.toFixed(2)}</p>\n            </div>\n            \n            {hessian && (\n              <div>\n                <h3 className=\"text-md font-medium mb-1\">Hessian Matrix:</h3>\n                <div className=\"flex justify-center items-center\">\n                  <div className=\"border-2 border-gray-400 px-4 py-2\">\n                    <div className=\"flex\">\n                      <div className=\"w-16 text-center\">{hessian[0][0].toFixed(2)}</div>\n                      <div className=\"w-16 text-center\">{hessian[0][1].toFixed(2)}</div>\n                    </div>\n                    <div className=\"flex\">\n                      <div className=\"w-16 text-center\">{hessian[1][0].toFixed(2)}</div>\n                      <div className=\"w-16 text-center\">{hessian[1][1].toFixed(2)}</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {eigenvalues && (\n              <div>\n                <h3 className=\"text-md font-medium mb-1\">Eigenvalues:</h3>\n                <p>λ₁: {eigenvalues[0].toFixed(2)}, λ₂: {eigenvalues[1].toFixed(2)}</p>\n                \n                <h3 className=\"text-md font-medium mt-2 mb-1\">Critical Point Type:</h3>\n                {eigenvalues[0] > 0 && eigenvalues[1] > 0 && (\n                  <p className=\"text-green-600 font-medium\">Minimum (Both eigenvalues positive)</p>\n                )}\n                {eigenvalues[0] < 0 && eigenvalues[1] < 0 && (\n                  <p className=\"text-red-600 font-medium\">Maximum (Both eigenvalues negative)</p>\n                )}\n                {eigenvalues[0] * eigenvalues[1] < 0 && (\n                  <p className=\"text-yellow-600 font-medium\">Saddle Point (Eigenvalues have opposite signs)</p>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      \n      <div className=\"mt-4 bg-gray-100 p-4 rounded-lg\">\n        <h2 className=\"text-lg font-semibold mb-2\">Understanding the Visualization</h2>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"bg-white p-3 rounded-lg shadow-sm\">\n            <div className=\"mb-2 text-center font-medium text-blue-600\">Positive Eigenvalue</div>\n            <div className=\"bg-blue-50 h-24 rounded-lg flex items-center justify-center mb-2\">\n              <svg width=\"100\" height=\"80\" viewBox=\"0 0 100 80\">\n                <path d=\"M 10 40 Q 50 70 90 40\" stroke=\"#0088ff\" fill=\"none\" strokeWidth=\"3\" />\n                <text x=\"35\" y=\"25\" fill=\"#0088ff\" fontSize=\"12\">Upward curve</text>\n              </svg>\n            </div>\n            <p className=\"text-sm\">The function curves <strong>upward</strong> in this direction (shown by blue arrows), creating a valley-like shape where the function increases as you move away from the critical point.</p>\n          </div>\n          \n          <div className=\"bg-white p-3 rounded-lg shadow-sm\">\n            <div className=\"mb-2 text-center font-medium text-orange-600\">Negative Eigenvalue</div>\n            <div className=\"bg-orange-50 h-24 rounded-lg flex items-center justify-center mb-2\">\n              <svg width=\"100\" height=\"80\" viewBox=\"0 0 100 80\">\n                <path d=\"M 10 40 Q 50 10 90 40\" stroke=\"#ff8800\" fill=\"none\" strokeWidth=\"3\" />\n                <text x=\"35\" y=\"55\" fill=\"#ff8800\" fontSize=\"12\">Downward curve</text>\n              </svg>\n            </div>\n            <p className=\"text-sm\">The function curves <strong>downward</strong> in this direction (shown by orange arrows), creating a hill-like shape where the function decreases as you move away from the critical point.</p>\n          </div>\n          \n          <div className=\"bg-white p-3 rounded-lg shadow-sm\">\n            <div className=\"mb-2 text-center font-medium text-yellow-600\">Saddle Point</div>\n            <div className=\"bg-yellow-50 h-24 rounded-lg flex items-center justify-center mb-2\">\n              <svg width=\"100\" height=\"80\" viewBox=\"0 0 100 80\">\n                <path d=\"M 10 40 Q 50 10 90 40\" stroke=\"#ff8800\" fill=\"none\" strokeWidth=\"3\" transform=\"rotate(90 50 40)\" />\n                <path d=\"M 10 40 Q 50 70 90 40\" stroke=\"#0088ff\" fill=\"none\" strokeWidth=\"3\" />\n                <circle cx=\"50\" cy=\"40\" r=\"4\" fill=\"#ffcc00\" />\n              </svg>\n            </div>\n            <p className=\"text-sm\">A saddle point occurs when the Hessian has <strong>eigenvalues with opposite signs</strong> - the function curves upward in some directions and downward in others, creating a saddle-like shape.</p>\n          </div>\n        </div>\n        \n        <div className=\"mt-4 bg-purple-50 p-3 rounded-lg\">\n          <h3 className=\"text-md font-medium mb-1\">The Hessian Matrix in a Nutshell</h3>\n          <p>The Hessian matrix at a point contains the second derivatives that describe how the function <strong>curves</strong> in different directions. The eigenvalues of this matrix determine whether a critical point is a minimum, maximum, or saddle point, regardless of which coordinate system we use.</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HessianEigenvalueVisualizer;\n","import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ReferenceLine } from 'recharts';\n\nconst SCHEDULE_COLORS = {\n  constant: \"#3b82f6\",\n  step: \"#ef4444\",\n  onecycle: \"#10b981\",\n  cosine: \"#8b5cf6\",\n};\n\nconst SimpleTooltip = ({ active, payload }) => {\n  if (!active || !payload || !payload.length) return null;\n  \n  const point = payload[0].payload;\n  return (\n    <div style={{backgroundColor: \"white\", padding: \"8px\", border: \"1px solid #ddd\", borderRadius: \"4px\", fontSize: \"12px\"}}>\n      <p><strong>Step:</strong> {point.step}</p>\n      {payload.map(entry => (\n        <p key={entry.dataKey}>\n          <strong>{entry.name || entry.dataKey}:</strong> {typeof entry.value === 'number' ? entry.value.toExponential(4) : entry.value}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nconst LRScheduleVisualizer = () => {\n  const [totalEpochs, setTotalEpochs] = useState(4);\n  const [maxLR, setMaxLR] = useState(0.002);\n  const [initialLR, setInitialLR] = useState(0.0001);\n  const [warmupPct, setWarmupPct] = useState(0.2);\n  const [activeSchedules, setActiveSchedules] = useState(['constant', 'step', 'onecycle', 'cosine']);\n  \n  const datasetSize = 10000;\n  const batchSize = 32;\n  const batchesPerEpoch = Math.ceil(datasetSize / batchSize);\n  const totalSteps = batchesPerEpoch * totalEpochs;\n  \n  const [lrData, setLrData] = useState([]);\n  const [lossData, setLossData] = useState([]);\n  const [chartWidth, setChartWidth] = useState(600);\n  const [chartHeight, setChartHeight] = useState(300);\n  \n  const initialLoss = 5.0;\n  const optimalLoss = 0.5;\n  const noiseLevel = 0.05;\n\n  useEffect(() => {\n    const handleResize = () => {\n      const containerWidth = Math.min(\n        document.getElementById('chart-container')?.clientWidth || 600,\n        window.innerWidth - 40\n      );\n      setChartWidth(containerWidth);\n      setChartHeight(Math.max(300, Math.min(400, window.innerHeight * 0.5)));\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    \n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  const toggleSchedule = (schedule) => {\n    if (activeSchedules.includes(schedule)) {\n      setActiveSchedules(activeSchedules.filter(s => s !== schedule));\n    } else {\n      setActiveSchedules([...activeSchedules, schedule]);\n    }\n  };\n  \n  useEffect(() => {\n    const newLRData = [];\n    const warmupSteps = Math.floor(totalSteps * warmupPct);\n    \n    for (let step = 0; step <= totalSteps; step += Math.max(1, Math.floor(totalSteps / 100))) {\n      const point = { step };\n      \n      point.constant = maxLR;\n      point.step_decay = null;\n      \n      if (step < warmupSteps) {\n        point.step_decay = initialLR + (maxLR - initialLR) * (step / warmupSteps);\n      } else {\n        const decay1 = warmupSteps + Math.floor((totalSteps - warmupSteps) / 3);\n        const decay2 = warmupSteps + Math.floor((totalSteps - warmupSteps) * 2 / 3);\n        \n        if (step < decay1) {\n          point.step_decay = maxLR;\n        } else if (step < decay2) {\n          point.step_decay = maxLR * 0.1;\n        } else {\n          point.step_decay = maxLR * 0.01;\n        }\n      }\n      \n      if (step < warmupSteps) {\n        point.onecycle = initialLR + (maxLR - initialLR) * (step / warmupSteps);\n      } else {\n        const decaySteps = step - warmupSteps;\n        const totalDecaySteps = totalSteps - warmupSteps;\n        const cosineValue = 0.5 * (1 + Math.cos(Math.PI * decaySteps / totalDecaySteps));\n        point.onecycle = initialLR + (maxLR - initialLR) * cosineValue;\n      }\n      \n      if (step < warmupSteps) {\n        point.cosine = initialLR + (maxLR - initialLR) * (step / warmupSteps);\n      } else {\n        const decaySteps = step - warmupSteps;\n        const totalDecaySteps = totalSteps - warmupSteps;\n        point.cosine = maxLR * 0.5 * (1 + Math.cos(Math.PI * decaySteps / totalDecaySteps));\n      }\n      \n      newLRData.push(point);\n    }\n  \n    setLrData(newLRData);\n  }, [totalEpochs, totalSteps, maxLR, initialLR, warmupPct]);\n\n  useEffect(() => {\n    if (lrData.length === 0) return;\n\n    const newLossData = [];\n\n    for (let step = 0; step <= totalSteps; step += Math.max(1, Math.floor(totalSteps / 100))) {\n      const lrPoint = lrData.reduce((prev, curr) => \n        Math.abs(curr.step - step) < Math.abs(prev.step - step) ? curr : prev\n      , lrData[0]);\n      \n      const point = { step };\n      \n      // Initialize loss values for all schedules to ensure they're included in data\n      activeSchedules.forEach(schedule => {\n        if (schedule === 'constant') point.constant_loss = null;\n        else if (schedule === 'step') point.step_loss = null;\n        else if (schedule === 'onecycle') point.onecycle_loss = null;\n        else if (schedule === 'cosine') point.cosine_loss = null;\n      });\n      \n      // Calculate actual loss values\n      activeSchedules.forEach(schedule => {\n        const lr = schedule === 'step' ? lrPoint.step_decay : lrPoint[schedule];\n        if (lr === undefined || lr === null) return;\n        \n        const warmupSteps = Math.floor(totalSteps * warmupPct);\n        const decay1 = warmupSteps + Math.floor((totalSteps - warmupSteps) / 3);\n        const decay2 = warmupSteps + Math.floor((totalSteps - warmupSteps) * 2 / 3);\n        \n        if (schedule === 'constant') {\n          const initialProgress = Math.min(1, step / (totalSteps * 0.2));\n          const oscillationPhase = Math.max(0, Math.min(1, (step - totalSteps * 0.2) / (totalSteps * 0.5)));\n          const oscillation = Math.sin(step / 7) * 0.3 * oscillationPhase;\n          const finalPhase = Math.max(0, step - totalSteps * 0.7) / (totalSteps * 0.3);\n          const finalImprovement = finalPhase * 0.3;\n          \n          point.constant_loss = initialLoss * Math.exp(-initialProgress * 4) + \n                                optimalLoss * 1.5 + \n                                oscillation - \n                                finalImprovement;\n        }\n        \n        else if (schedule === 'step') {\n          let progress = 0;\n          let plateauNoise = 0;\n          \n          if (step < warmupSteps) {\n            progress = step / warmupSteps * 0.4;\n            plateauNoise = 0.05 * Math.sin(step / 5);\n          } else if (step < decay1) {\n            progress = 0.4 + (step - warmupSteps) / (decay1 - warmupSteps) * 0.1;\n            plateauNoise = 0.05 * Math.sin(step / 5);\n          } else if (step < decay1 + 10) {\n            const dropProgress = (step - decay1) / 10;\n            progress = 0.5 + dropProgress * 0.15;\n          } else if (step < decay2) {\n            progress = 0.65 + (step - (decay1 + 10)) / (decay2 - (decay1 + 10)) * 0.05;\n            plateauNoise = 0.03 * Math.sin(step / 5);\n          } else if (step < decay2 + 10) {\n            const dropProgress = (step - decay2) / 10;\n            progress = 0.7 + dropProgress * 0.1;\n          } else {\n            progress = 0.8 + (step - (decay2 + 10)) / (totalSteps - (decay2 + 10)) * 0.1;\n            plateauNoise = 0.02 * Math.sin(step / 5);\n          }\n          \n          point.step_loss = initialLoss * Math.exp(-progress * 3.5) + \n                            optimalLoss * 1.1 + \n                            plateauNoise;\n        }\n        \n        else if (schedule === 'onecycle') {\n          let progress = 0;\n          let noise = 0;\n          \n          if (step < warmupSteps) {\n            progress = (step / warmupSteps) * 0.4;\n            noise = 0.08 * Math.random() * Math.exp(-step / warmupSteps);\n          } else if (step < totalSteps * 0.6) {\n            const exploreProgress = (step - warmupSteps) / (totalSteps * 0.6 - warmupSteps);\n            progress = 0.4 + exploreProgress * 0.3;\n            noise = 0.05 * Math.random() * (1 - exploreProgress);\n          } else {\n            const finetuneProgress = (step - totalSteps * 0.6) / (totalSteps * 0.4);\n            progress = 0.7 + finetuneProgress * 0.2;\n            noise = 0.01 * Math.random();\n          }\n          \n          point.onecycle_loss = initialLoss * Math.exp(-progress * 3.8) + \n                                optimalLoss * 1.05 + \n                                noise;\n        }\n        \n        else if (schedule === 'cosine') {\n          let progress = 0;\n          let noise = 0;\n          \n          if (step < warmupSteps) {\n            progress = (step / warmupSteps) * 0.35;\n            noise = 0.07 * Math.random();\n          } else {\n            const postWarmupProgress = (step - warmupSteps) / (totalSteps - warmupSteps);\n            const cosineEffect = Math.cos(Math.PI * postWarmupProgress / 2);\n            progress = 0.35 + (1 - cosineEffect) * 0.6;\n            noise = 0.04 * Math.random() * cosineEffect;\n          }\n          \n          point.cosine_loss = initialLoss * Math.exp(-progress * 3.8) + \n                              optimalLoss * 0.9 + \n                              noise;\n        }\n      });\n      \n      // Add random noise to all losses\n      Object.keys(point).forEach(key => {\n        if (key.includes('loss') && point[key] !== null) {\n          const noise = (Math.random() - 0.5) * noiseLevel;\n          point[key] += noise;\n        }\n      });\n      \n      newLossData.push(point);\n    }\n    \n    console.log(\"Generated loss data:\", newLossData.slice(0, 3));\n    setLossData(newLossData);\n  }, [lrData, activeSchedules, totalSteps, warmupPct, initialLoss, optimalLoss, noiseLevel]);\n\n  return (\n    <div style={{padding: \"16px\", width: \"100%\", maxWidth: \"900px\", margin: \"0 auto\", backgroundColor: \"#f9fafb\", borderRadius: \"8px\", boxShadow: \"0 1px 3px rgba(0,0,0,0.12)\"}}>\n      <h1 style={{fontSize: \"1.25rem\", fontWeight: \"bold\", marginBottom: \"16px\", textAlign: \"center\"}}>Learning Rate and Loss Visualizer</h1>\n      \n      <div style={{display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(250px, 1fr))\", gap: \"16px\", marginBottom: \"16px\"}}>\n        <div>\n          <label style={{display: \"block\", fontSize: \"0.875rem\", fontWeight: \"500\", marginBottom: \"4px\"}}>Total Epochs: {totalEpochs}</label>\n          <input \n            type=\"range\" \n            min=\"1\" max=\"20\" step=\"1\" \n            value={totalEpochs} \n            onChange={(e) => setTotalEpochs(parseInt(e.target.value))} \n            style={{width: \"100%\"}}\n          />\n        </div>\n        \n        <div>\n          <label style={{display: \"block\", fontSize: \"0.875rem\", fontWeight: \"500\", marginBottom: \"4px\"}}>Max Learning Rate: {maxLR.toExponential(4)}</label>\n          <input \n            type=\"range\" \n            min=\"0.0001\" max=\"0.01\" step=\"0.0001\" \n            value={maxLR} \n            onChange={(e) => setMaxLR(parseFloat(e.target.value))} \n            style={{width: \"100%\"}}\n          />\n        </div>\n        \n        <div>\n          <label style={{display: \"block\", fontSize: \"0.875rem\", fontWeight: \"500\", marginBottom: \"4px\"}}>Warm-up Percentage: {(warmupPct * 100).toFixed(0)}%</label>\n          <input \n            type=\"range\" \n            min=\"0\" max=\"0.5\" step=\"0.01\" \n            value={warmupPct} \n            onChange={(e) => setWarmupPct(parseFloat(e.target.value))} \n            style={{width: \"100%\"}}\n          />\n        </div>\n        \n        <div>\n          <label style={{display: \"block\", fontSize: \"0.875rem\", fontWeight: \"500\", marginBottom: \"4px\"}}>Initial Learning Rate: {initialLR.toExponential(4)}</label>\n          <input \n            type=\"range\" \n            min=\"0.00001\" max=\"0.001\" step=\"0.00001\" \n            value={initialLR} \n            onChange={(e) => setInitialLR(parseFloat(e.target.value))} \n            style={{width: \"100%\"}}\n          />\n        </div>\n      </div>\n      \n      <div style={{width: \"100%\", backgroundColor: \"white\", padding: \"12px\", borderRadius: \"8px\", border: \"1px solid #e5e7eb\", marginBottom: \"16px\"}}>\n        <h2 style={{fontSize: \"1.125rem\", fontWeight: \"500\", marginBottom: \"8px\"}}>Learning Rate Schedules</h2>\n        \n        <div id=\"chart-container\" style={{ width: '100%', height: `${chartHeight}px`, position: 'relative', margin: \"0 auto\" }}>\n          {lrData.length > 0 ? (\n            <LineChart\n              width={chartWidth}\n              height={chartHeight}\n              data={lrData}\n              margin={{ top: 20, right: 30, left: 30, bottom: 30 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"step\"\n                type=\"number\"\n                domain={[0, totalSteps]}\n                label={{ value: 'Training Steps', position: 'bottom', offset: 15 }}\n              />\n              <YAxis \n                tickFormatter={(value) => value.toExponential(1)}\n                label={{ value: 'Learning Rate', angle: -90, position: 'insideLeft', offset: -15 }}\n              />\n              <Tooltip content={<SimpleTooltip />} />\n              <Legend \n                verticalAlign=\"top\" \n                height={36} \n                onClick={(e) => toggleSchedule(e.dataKey.includes('loss') ? e.dataKey.split('_')[0] : e.dataKey === 'step_decay' ? 'step' : e.dataKey)}\n                wrapperStyle={{ cursor: 'pointer' }}\n              />\n              \n              <ReferenceLine \n                x={Math.floor(totalSteps * warmupPct)} \n                stroke=\"#64748b\"\n                strokeDasharray=\"3 3\"\n                label={{\n                  value: 'Warmup End',\n                  position: 'insideBottomRight',\n                  fontSize: 10\n                }}\n              />\n              \n              {activeSchedules.includes('constant') && (\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"constant\"\n                  name=\"Constant\"\n                  stroke={SCHEDULE_COLORS.constant}\n                  strokeWidth={2}\n                  dot={false}\n                />\n              )}\n              \n              {activeSchedules.includes('step') && (\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"step_decay\"\n                  name=\"Step Decay\"\n                  stroke={SCHEDULE_COLORS.step}\n                  strokeWidth={2}\n                  dot={false}\n                />\n              )}\n              \n              {activeSchedules.includes('onecycle') && (\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"onecycle\"\n                  name=\"OneCycle\"\n                  stroke={SCHEDULE_COLORS.onecycle}\n                  strokeWidth={2}\n                  dot={false}\n                />\n              )}\n              \n              {activeSchedules.includes('cosine') && (\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"cosine\"\n                  name=\"Cosine\"\n                  stroke={SCHEDULE_COLORS.cosine}\n                  strokeWidth={2}\n                  dot={false}\n                />\n              )}\n            </LineChart>\n          ) : (\n            <div style={{display: \"flex\", height: \"100%\", alignItems: \"center\", justifyContent: \"center\"}}>\n              <p style={{color: \"#6b7280\"}}>Loading chart data...</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div style={{width: \"100%\", backgroundColor: \"white\", padding: \"12px\", borderRadius: \"8px\", border: \"1px solid #e5e7eb\", marginBottom: \"16px\"}}>\n        <h2 style={{fontSize: \"1.125rem\", fontWeight: \"500\", marginBottom: \"8px\"}}>Loss Trajectories</h2>\n        <p style={{fontSize: \"0.875rem\", color: \"#4b5563\", marginBottom: \"12px\"}}>\n          See how different learning rate schedules affect model convergence:\n        </p>\n        \n        <div id=\"loss-chart-container\" style={{ width: '100%', height: `${chartHeight}px`, position: 'relative', margin: \"0 auto\" }}>\n          {lossData.length > 0 ? (\n            <LineChart\n              width={chartWidth}\n              height={chartHeight}\n              data={lossData}\n              margin={{ top: 20, right: 30, left: 30, bottom: 30 }}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis \n                dataKey=\"step\"\n                type=\"number\"\n                domain={[0, totalSteps]}\n                label={{ value: 'Training Steps', position: 'bottom', offset: 15 }}\n              />\n              <YAxis \n                label={{ value: 'Loss', angle: -90, position: 'insideLeft', offset: -15 }}\n              />\n              <Tooltip content={<SimpleTooltip />} />\n              <Legend verticalAlign=\"top\" height={36} />\n              \n              <ReferenceLine \n                x={Math.floor(totalSteps * warmupPct)} \n                stroke=\"#64748b\"\n                strokeDasharray=\"3 3\"\n                label={{\n                  value: 'Warmup End',\n                  position: 'insideBottomRight',\n                  fontSize: 10\n                }}\n              />\n              \n              {activeSchedules.includes('step') && (\n                <>\n                  <ReferenceLine \n                    x={Math.floor(totalSteps * warmupPct) + Math.floor((totalSteps - Math.floor(totalSteps * warmupPct)) / 3)} \n                    stroke={SCHEDULE_COLORS.step}\n                    strokeDasharray=\"3 3\"\n                    label={{\n                      value: 'LR Drop 1',\n                      position: 'insideTopRight',\n                      fontSize: 9,\n                      fill: SCHEDULE_COLORS.step\n                    }}\n                  />\n                  <ReferenceLine \n                    x={Math.floor(totalSteps * warmupPct) + Math.floor((totalSteps - Math.floor(totalSteps * warmupPct)) * 2 / 3)} \n                    stroke={SCHEDULE_COLORS.step}\n                    strokeDasharray=\"3 3\"\n                    label={{\n                      value: 'LR Drop 2',\n                      position: 'insideTopRight',\n                      fontSize: 9,\n                      fill: SCHEDULE_COLORS.step\n                    }}\n                  />\n                </>\n              )}\n              \n              <ReferenceLine \n                x={Math.floor(totalSteps * 0.6)} \n                stroke=\"#64748b\"\n                strokeDasharray=\"2 4\"\n                label={{\n                  value: 'Fine-tuning Phase',\n                  position: 'insideTopLeft',\n                  fontSize: 10\n                }}\n              />\n              \n              {/* Loss curves */}\n              {activeSchedules.includes('constant') && (\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"constant_loss\"\n                  name=\"Constant Loss\"\n                  stroke={SCHEDULE_COLORS.constant}\n                  strokeWidth={2}\n                  dot={false}\n                  connectNulls={true}\n                />\n              )}\n              \n              {activeSchedules.includes('step') && (\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"step_loss\"\n                  name=\"Step Loss\"\n                  stroke={SCHEDULE_COLORS.step}\n                  strokeWidth={2}\n                  dot={false}\n                  connectNulls={true}\n                />\n              )}\n              \n              {activeSchedules.includes('onecycle') && (\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"onecycle_loss\"\n                  name=\"OneCycle Loss\"\n                  stroke={SCHEDULE_COLORS.onecycle}\n                  strokeWidth={2}\n                  dot={false}\n                  connectNulls={true}\n                />\n              )}\n              \n              {activeSchedules.includes('cosine') && (\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"cosine_loss\"\n                  name=\"Cosine Loss\"\n                  stroke={SCHEDULE_COLORS.cosine}\n                  strokeWidth={2}\n                  dot={false}\n                  connectNulls={true}\n                />\n              )}\n              \n              {/* Reference lines for descriptions */}\n              {activeSchedules.includes('constant') && (\n                <ReferenceLine \n                  y={optimalLoss * 1.5}\n                  stroke={SCHEDULE_COLORS.constant}\n                  strokeDasharray=\"2 4\"\n                  label={{\n                    value: 'Constant: Oscillations',\n                    position: 'insideBottomRight',\n                    fontSize: 9,\n                    fill: SCHEDULE_COLORS.constant\n                  }}\n                />\n              )}\n              \n              {activeSchedules.includes('step') && (\n                <ReferenceLine \n                  y={optimalLoss * 1.1}\n                  stroke={SCHEDULE_COLORS.step}\n                  strokeDasharray=\"2 4\" \n                  label={{\n                    value: 'Step: Plateaus & jumps',\n                    position: 'right',\n                    fontSize: 9,\n                    fill: SCHEDULE_COLORS.step\n                  }}\n                />\n              )}\n              \n              {activeSchedules.includes('onecycle') && (\n                <ReferenceLine \n                  y={optimalLoss * 1.05}\n                  stroke={SCHEDULE_COLORS.onecycle}\n                  strokeDasharray=\"2 4\"\n                  label={{\n                    value: 'OneCycle: Balanced',\n                    position: 'right',\n                    fontSize: 9,\n                    fill: SCHEDULE_COLORS.onecycle\n                  }}\n                />\n              )}\n              \n              {activeSchedules.includes('cosine') && (\n                <ReferenceLine \n                  y={optimalLoss * 0.9}\n                  stroke={SCHEDULE_COLORS.cosine}\n                  strokeDasharray=\"2 4\"\n                  label={{\n                    value: 'Cosine: Best final loss',\n                    position: 'left',\n                    fontSize: 9,\n                    fill: SCHEDULE_COLORS.cosine\n                  }}\n                />\n              )}\n            </LineChart>\n          ) : (\n            <div style={{display: \"flex\", height: \"100%\", alignItems: \"center\", justifyContent: \"center\"}}>\n              <p style={{color: \"#6b7280\"}}>Loading chart data...</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div style={{width: \"100%\", backgroundColor: \"white\", padding: \"12px\", borderRadius: \"8px\", border: \"1px solid #e5e7eb\"}}>\n        <h2 style={{fontSize: \"1.125rem\", fontWeight: \"500\", marginBottom: \"8px\"}}>How Learning Rate Affects Training</h2>\n        \n        <div style={{display: \"flex\", flexDirection: \"column\", gap: \"12px\", fontSize: \"0.875rem\"}}>\n          <div style={{padding: \"12px\", backgroundColor: \"#F3F4F6\", borderRadius: \"4px\", marginBottom: \"8px\"}}>\n            <h3 style={{fontWeight: \"600\", marginBottom: \"8px\"}}>LR Schedule Comparison:</h3>\n            <div style={{display: \"grid\", gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\", gap: \"8px\"}}>\n              <div style={{padding: \"8px\", borderRadius: \"4px\", backgroundColor: `${SCHEDULE_COLORS.constant}15`, border: `1px solid ${SCHEDULE_COLORS.constant}30`}}>\n                <h4 style={{fontWeight: \"500\", marginBottom: \"4px\", color: SCHEDULE_COLORS.constant}}>Constant LR</h4>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Fast initial training</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Simple implementation</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👎 Oscillations near minimum</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👎 Never reaches optimal loss</p>\n              </div>\n              \n              <div style={{padding: \"8px\", borderRadius: \"4px\", backgroundColor: `${SCHEDULE_COLORS.step}15`, border: `1px solid ${SCHEDULE_COLORS.step}30`}}>\n                <h4 style={{fontWeight: \"500\", marginBottom: \"4px\", color: SCHEDULE_COLORS.step}}>Step Decay</h4>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Predictable improvement stages</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Good plateau escape</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👎 Stagnation between drops</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👎 Requires manual scheduling</p>\n              </div>\n              \n              <div style={{padding: \"8px\", borderRadius: \"4px\", backgroundColor: `${SCHEDULE_COLORS.onecycle}15`, border: `1px solid ${SCHEDULE_COLORS.onecycle}30`}}>\n                <h4 style={{fontWeight: \"500\", marginBottom: \"4px\", color: SCHEDULE_COLORS.onecycle}}>OneCycle</h4>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Balanced exploration & refinement</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Good generalization</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Reliable performance</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👎 Slightly slower final convergence</p>\n              </div>\n              \n              <div style={{padding: \"8px\", borderRadius: \"4px\", backgroundColor: `${SCHEDULE_COLORS.cosine}15`, border: `1px solid ${SCHEDULE_COLORS.cosine}30`}}>\n                <h4 style={{fontWeight: \"500\", marginBottom: \"4px\", color: SCHEDULE_COLORS.cosine}}>Cosine Annealing</h4>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Smoothest decay profile</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Best final loss value</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👍 Precision fine-tuning</p>\n                <p style={{fontSize: \"0.75rem\", marginBottom: \"4px\"}}>👎 Slower mid-training progress</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LRScheduleVisualizer;\n","import React, { useState, useEffect } from 'react';\n\nconst NormalizationVisualization = () => {\n  const [normType, setNormType] = useState('batch');\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [inputMatrix, setInputMatrix] = useState([]);\n  const [normalizedMatrix, setNormalizedMatrix] = useState([]);\n  const [showLabels, setShowLabels] = useState(true);\n\n  // Initialize with sample data\n  useEffect(() => {\n    // Create a matrix: 3 examples (rows) x 4 features (columns)\n    // Using values that will show more diverse normalized results\n    const sampleMatrix = [\n      [5.0, 1.0, 7.0, 2.0],  // Example 1\n      [9.0, 8.0, 2.0, 6.0],  // Example 2\n      [3.0, 4.0, 7.0, 8.0]   // Example 3\n    ];\n    \n    setInputMatrix(sampleMatrix);\n  }, []);\n\n  // Compute normalization when input or normalization type changes\n  useEffect(() => {\n    if (inputMatrix.length > 0) {\n      computeNormalization();\n    }\n  }, [inputMatrix, normType]);\n\n  // Calculate the normalized values based on normalization type\n  const computeNormalization = () => {\n    const normalized = [];\n    const numExamples = inputMatrix.length;\n    const numFeatures = inputMatrix[0].length;\n    \n    if (normType === 'batch') {\n      // Batch Normalization: normalize each feature (column) independently\n      for (let i = 0; i < numExamples; i++) {\n        const normalizedRow = [];\n        \n        for (let j = 0; j < numFeatures; j++) {\n          // Get all values for this feature across all examples\n          const featureValues = inputMatrix.map(row => row[j]);\n          \n          // Calculate mean and standard deviation\n          const mean = featureValues.reduce((sum, val) => sum + val, 0) / numExamples;\n          const variance = featureValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / numExamples;\n          const std = Math.sqrt(variance + 1e-5); // Add epsilon for numerical stability\n          \n          // Normalize the value\n          const normalizedValue = ((inputMatrix[i][j] - mean) / std).toFixed(2);\n          normalizedRow.push(parseFloat(normalizedValue));\n        }\n        \n        normalized.push(normalizedRow);\n      }\n    } else if (normType === 'layer') {\n      // Layer Normalization: normalize each example (row) independently\n      for (let i = 0; i < numExamples; i++) {\n        const normalizedRow = [];\n        const exampleValues = inputMatrix[i];\n        \n        // Calculate mean and standard deviation for this example\n        const mean = exampleValues.reduce((sum, val) => sum + val, 0) / numFeatures;\n        const variance = exampleValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / numFeatures;\n        const std = Math.sqrt(variance + 1e-5);\n        \n        // Normalize all features for this example\n        for (let j = 0; j < numFeatures; j++) {\n          const normalizedValue = ((inputMatrix[i][j] - mean) / std).toFixed(2);\n          normalizedRow.push(parseFloat(normalizedValue));\n        }\n        \n        normalized.push(normalizedRow);\n      }\n    } else if (normType === 'group') {\n      // Group Normalization: divide features into groups and normalize within each group\n      // For this simplified example, we'll use 2 groups with 2 features each\n      const groupSize = 2;\n      \n      for (let i = 0; i < numExamples; i++) {\n        const normalizedRow = [];\n        \n        // Process each group separately\n        for (let g = 0; g < numFeatures / groupSize; g++) {\n          const startFeature = g * groupSize;\n          const endFeature = Math.min((g + 1) * groupSize, numFeatures);\n          \n          // Collect values for this group\n          const groupValues = [];\n          for (let j = startFeature; j < endFeature; j++) {\n            groupValues.push(inputMatrix[i][j]);\n          }\n          \n          // Calculate mean and standard deviation for this group\n          const mean = groupValues.reduce((sum, val) => sum + val, 0) / groupValues.length;\n          const variance = groupValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / groupValues.length;\n          const std = Math.sqrt(variance + 1e-5);\n          \n          // Normalize all features in this group\n          for (let j = startFeature; j < endFeature; j++) {\n            const normalizedValue = ((inputMatrix[i][j] - mean) / std).toFixed(2);\n            normalizedRow.push(parseFloat(normalizedValue));\n          }\n        }\n        \n        normalized.push(normalizedRow);\n      }\n    }\n    \n    setNormalizedMatrix(normalized);\n  };\n\n  // Get the cell color based on normalization type and selection\n  const getCellColor = (row, col, isInput) => {\n    if (!selectedCell) return '';\n    \n    const [selectedRow, selectedCol] = selectedCell;\n    \n    if (normType === 'batch') {\n      // For batch norm, highlight the same column (feature) across all examples\n      return col === selectedCol ? (isInput ? 'bg-blue-200' : 'bg-blue-100') : '';\n    } else if (normType === 'layer') {\n      // For layer norm, highlight the entire row (example)\n      return row === selectedRow ? (isInput ? 'bg-green-200' : 'bg-green-100') : '';\n    } else if (normType === 'group') {\n      // For group norm, highlight the group within the same example\n      const groupSize = 2;\n      const selectedGroup = Math.floor(selectedCol / groupSize);\n      const cellGroup = Math.floor(col / groupSize);\n      \n      return (row === selectedRow && cellGroup === selectedGroup) \n             ? (isInput ? 'bg-purple-200' : 'bg-purple-100') \n             : '';\n    }\n    \n    return '';\n  };\n  \n  // Get the group styling for group normalization\n  const getGroupStyle = (col) => {\n    if (normType !== 'group') return '';\n    \n    const groupSize = 2;\n    const group = Math.floor(col / groupSize);\n    \n    // Use background colors instead of borders for better visibility\n    return group === 0 ? 'bg-purple-50' : 'bg-indigo-50';\n  };\n\n  // Render a matrix using an HTML table structure\n  const renderMatrix = (matrix, isInput) => {\n    if (!matrix || matrix.length === 0) return null;\n    \n    return (\n      <div className=\"matrix-container\">\n        <table className=\"border-collapse\">\n          {showLabels && (\n            <thead>\n              <tr>\n                {/* Empty corner cell */}\n                <th className=\"w-16\"></th>\n                {/* Feature column headers */}\n                {matrix[0].map((_, colIndex) => (\n                  <th key={colIndex} className=\"w-16 text-center text-sm font-medium p-2\">\n                    Feature {colIndex+1}\n                    {normType === 'group' && (\n                      <div className={`text-xs mt-1 ${colIndex < 2 ? 'text-purple-700' : 'text-indigo-700'}`}>\n                        Group {Math.floor(colIndex/2) + 1}\n                      </div>\n                    )}\n                  </th>\n                ))}\n              </tr>\n            </thead>\n          )}\n          <tbody>\n            {matrix.map((row, rowIndex) => (\n              <tr key={rowIndex}>\n                {/* Row labels */}\n                {showLabels && (\n                  <td className=\"text-right text-sm font-medium p-2\">\n                    Sample {rowIndex+1}\n                  </td>\n                )}\n                {/* Matrix cell values */}\n                {row.map((value, colIndex) => {\n                  const bgColor = getCellColor(rowIndex, colIndex, isInput);\n                  const isSelected = selectedCell && selectedCell[0] === rowIndex && selectedCell[1] === colIndex;\n                  const borderColor = isSelected ? (isInput ? 'border-gray-800' : 'border-gray-600') : 'border-gray-300';\n                  const groupStyle = getGroupStyle(colIndex);\n                  \n                  return (\n                    <td \n                      key={colIndex} \n                      className={`w-16 h-16 border ${borderColor} text-center ${bgColor} ${groupStyle} cursor-pointer hover:bg-gray-100`}\n                      onClick={() => setSelectedCell([rowIndex, colIndex])}\n                    >\n                      {value}\n                    </td>\n                  );\n                })}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  // Render the calculation details for the selected cell\n  const renderCalculation = () => {\n    if (!selectedCell) return (\n      <div className=\"p-4 text-center bg-gray-100 rounded\">\n        <p>Select any cell to see calculation details</p>\n      </div>\n    );\n    \n    const [row, col] = selectedCell;\n    const numExamples = inputMatrix.length;\n    const numFeatures = inputMatrix[0].length;\n    let calculation = null;\n    \n    if (normType === 'batch') {\n      // Get all values for this feature across examples\n      const featureValues = inputMatrix.map(r => r[col]);\n      const mean = featureValues.reduce((sum, val) => sum + val, 0) / numExamples;\n      const variance = featureValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / numExamples;\n      const std = Math.sqrt(variance + 1e-5);\n      \n      calculation = (\n        <div>\n          <p className=\"font-medium\">Batch Normalization Calculation:</p>\n          <p>For feature {col+1}, we compute statistics across all examples (rows):</p>\n          <p>Values across batch: [{featureValues.join(', ')}]</p>\n          <p>Mean (μ): {mean.toFixed(2)}</p>\n          <p>Standard deviation (σ): {std.toFixed(2)}</p>\n          <p className=\"mt-2 font-medium\">Formula for example {row+1}, feature {col+1}:</p>\n          <p>(x - μ) / σ = ({inputMatrix[row][col]} - {mean.toFixed(2)}) / {std.toFixed(2)} = {normalizedMatrix[row][col]}</p>\n        </div>\n      );\n    } else if (normType === 'layer') {\n      // Get all values for this example\n      const exampleValues = inputMatrix[row];\n      const mean = exampleValues.reduce((sum, val) => sum + val, 0) / numFeatures;\n      const variance = exampleValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / numFeatures;\n      const std = Math.sqrt(variance + 1e-5);\n      \n      calculation = (\n        <div>\n          <p className=\"font-medium\">Layer Normalization Calculation:</p>\n          <p>For example {row+1}, we compute statistics across all features (columns):</p>\n          <p>Values across features: [{exampleValues.join(', ')}]</p>\n          <p>Mean (μ): {mean.toFixed(2)}</p>\n          <p>Standard deviation (σ): {std.toFixed(2)}</p>\n          <p className=\"mt-2 font-medium\">Formula for example {row+1}, feature {col+1}:</p>\n          <p>(x - μ) / σ = ({inputMatrix[row][col]} - {mean.toFixed(2)}) / {std.toFixed(2)} = {normalizedMatrix[row][col]}</p>\n        </div>\n      );\n    } else if (normType === 'group') {\n      // Group Normalization\n      const groupSize = 2;\n      const group = Math.floor(col / groupSize);\n      const startFeature = group * groupSize;\n      const endFeature = Math.min((group + 1) * groupSize, numFeatures);\n      \n      // Get values for this group\n      const groupValues = [];\n      for (let j = startFeature; j < endFeature; j++) {\n        groupValues.push(inputMatrix[row][j]);\n      }\n      \n      const mean = groupValues.reduce((sum, val) => sum + val, 0) / groupValues.length;\n      const variance = groupValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / groupValues.length;\n      const std = Math.sqrt(variance + 1e-5);\n      \n      calculation = (\n        <div>\n          <p className=\"font-medium\">Group Normalization Calculation:</p>\n          <p>For example {row+1}, group {group+1} (features {startFeature+1}-{endFeature}):</p>\n          <p>Values in this group: [{groupValues.join(', ')}]</p>\n          <p>Mean (μ): {mean.toFixed(2)}</p>\n          <p>Standard deviation (σ): {std.toFixed(2)}</p>\n          <p className=\"mt-2 font-medium\">Formula for example {row+1}, feature {col+1}:</p>\n          <p>(x - μ) / σ = ({inputMatrix[row][col]} - {mean.toFixed(2)}) / {std.toFixed(2)} = {normalizedMatrix[row][col]}</p>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"p-4 bg-gray-100 rounded\">\n        {calculation}\n      </div>\n    );\n  };\n\n  // Render diagram explaining the normalization method\n  const renderDiagram = () => {\n    if (normType === 'batch') {\n      return (\n        <div className=\"p-4 bg-blue-50 rounded\">\n          <h3 className=\"text-lg font-medium mb-2\">Batch Normalization</h3>\n          <div className=\"flex justify-center mb-4\">\n            <svg width=\"320\" height=\"180\" viewBox=\"0 0 320 180\">\n              {/* Input matrix */}\n              <rect x=\"10\" y=\"10\" width=\"120\" height=\"160\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <text x=\"70\" y=\"30\" textAnchor=\"middle\" fontSize=\"14\">Input Matrix</text>\n              \n              {/* Features */}\n              <rect x=\"40\" y=\"40\" width=\"20\" height=\"120\" fill=\"#90cdf4\" stroke=\"#3182ce\" />\n              <rect x=\"70\" y=\"40\" width=\"20\" height=\"120\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"100\" y=\"40\" width=\"20\" height=\"120\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              \n              {/* Arrow */}\n              <path d=\"M 140 90 L 180 90\" stroke=\"#666\" strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\n              <defs>\n                <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                  <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#666\" />\n                </marker>\n              </defs>\n              \n              {/* Calculation */}\n              <rect x=\"190\" y=\"65\" width=\"120\" height=\"50\" fill=\"#bee3f8\" rx=\"5\" ry=\"5\" stroke=\"#3182ce\" />\n              <text x=\"250\" y=\"85\" textAnchor=\"middle\" fontSize=\"12\">Compute μ, σ</text>\n              <text x=\"250\" y=\"105\" textAnchor=\"middle\" fontSize=\"12\">for each column</text>\n              \n              {/* Output matrix */}\n              <rect x=\"190\" y=\"10\" width=\"120\" height=\"160\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <text x=\"250\" y=\"30\" textAnchor=\"middle\" fontSize=\"14\">Normalized Matrix</text>\n              \n              {/* Normalized features */}\n              <rect x=\"220\" y=\"40\" width=\"20\" height=\"120\" fill=\"#bfdbfe\" stroke=\"#3182ce\" />\n              <rect x=\"250\" y=\"40\" width=\"20\" height=\"120\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"280\" y=\"40\" width=\"20\" height=\"120\" fill=\"#e6e6e6\" stroke=\"#666\" />\n            </svg>\n          </div>\n          <div>\n            <p className=\"font-medium\">Key Idea:</p>\n            <p>Normalizes each feature (column) independently across all examples (rows) in the batch.</p>\n            <p className=\"mt-2\">Formula: (x - μᵦ) / σᵦ, where μᵦ and σᵦ are calculated for each feature across the batch.</p>\n            <p className=\"mt-2\">Use Cases:</p>\n            <ul className=\"list-disc pl-5\">\n              <li>CNNs with large batch sizes</li>\n              <li>Deep networks where internal covariate shift is a problem</li>\n              <li>Most common normalization technique in computer vision</li>\n            </ul>\n          </div>\n        </div>\n      );\n    } else if (normType === 'layer') {\n      return (\n        <div className=\"p-4 bg-green-50 rounded\">\n          <h3 className=\"text-lg font-medium mb-2\">Layer Normalization</h3>\n          <div className=\"flex justify-center mb-4\">\n            <svg width=\"320\" height=\"180\" viewBox=\"0 0 320 180\">\n              {/* Input matrix */}\n              <rect x=\"10\" y=\"10\" width=\"120\" height=\"160\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <text x=\"70\" y=\"30\" textAnchor=\"middle\" fontSize=\"14\">Input Matrix</text>\n              \n              {/* Examples/rows */}\n              <rect x=\"40\" y=\"50\" width=\"80\" height=\"20\" fill=\"#9ae6b4\" stroke=\"#38a169\" />\n              <rect x=\"40\" y=\"80\" width=\"80\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"40\" y=\"110\" width=\"80\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              \n              {/* Arrow */}\n              <path d=\"M 140 90 L 180 90\" stroke=\"#666\" strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\n              <defs>\n                <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                  <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#666\" />\n                </marker>\n              </defs>\n              \n              {/* Calculation */}\n              <rect x=\"190\" y=\"65\" width=\"120\" height=\"50\" fill=\"#c6f6d5\" rx=\"5\" ry=\"5\" stroke=\"#38a169\" />\n              <text x=\"250\" y=\"85\" textAnchor=\"middle\" fontSize=\"12\">Compute μ, σ</text>\n              <text x=\"250\" y=\"105\" textAnchor=\"middle\" fontSize=\"12\">for each row</text>\n              \n              {/* Output matrix */}\n              <rect x=\"190\" y=\"10\" width=\"120\" height=\"160\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <text x=\"250\" y=\"30\" textAnchor=\"middle\" fontSize=\"14\">Normalized Matrix</text>\n              \n              {/* Normalized examples */}\n              <rect x=\"220\" y=\"50\" width=\"80\" height=\"20\" fill=\"#d1fae5\" stroke=\"#38a169\" />\n              <rect x=\"220\" y=\"80\" width=\"80\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"220\" y=\"110\" width=\"80\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n            </svg>\n          </div>\n          <div>\n            <p className=\"font-medium\">Key Idea:</p>\n            <p>Normalizes all features (columns) together for each example (row) independently.</p>\n            <p className=\"mt-2\">Formula: (x - μₗ) / σₗ, where μₗ and σₗ are calculated for all features in each example.</p>\n            <p className=\"mt-2\">Use Cases:</p>\n            <ul className=\"list-disc pl-5\">\n              <li>RNNs and Transformers</li>\n              <li>NLP tasks</li>\n              <li>When batch size is small or varies</li>\n              <li>Sequence modeling where sequence length varies</li>\n            </ul>\n          </div>\n        </div>\n      );\n    } else if (normType === 'group') {\n      return (\n        <div className=\"p-4 bg-purple-50 rounded\">\n          <h3 className=\"text-lg font-medium mb-2\">Group Normalization</h3>\n          <div className=\"flex justify-center mb-4\">\n            <svg width=\"320\" height=\"180\" viewBox=\"0 0 320 180\">\n              {/* Input matrix */}\n              <rect x=\"10\" y=\"10\" width=\"120\" height=\"160\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <text x=\"70\" y=\"30\" textAnchor=\"middle\" fontSize=\"14\">Input Matrix</text>\n              \n              {/* Examples with groups */}\n              <rect x=\"40\" y=\"50\" width=\"40\" height=\"20\" fill=\"#d8b4fe\" stroke=\"#7e22ce\" />\n              <rect x=\"80\" y=\"50\" width=\"40\" height=\"20\" fill=\"#c4b5fd\" stroke=\"#6d28d9\" />\n              <rect x=\"40\" y=\"80\" width=\"40\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"80\" y=\"80\" width=\"40\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"40\" y=\"110\" width=\"40\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"80\" y=\"110\" width=\"40\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              \n              {/* Arrow */}\n              <path d=\"M 140 90 L 180 90\" stroke=\"#666\" strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\n              <defs>\n                <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                  <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#666\" />\n                </marker>\n              </defs>\n              \n              {/* Calculation */}\n              <rect x=\"190\" y=\"50\" width=\"120\" height=\"80\" fill=\"#f3e8ff\" rx=\"5\" ry=\"5\" stroke=\"#7e22ce\" />\n              <text x=\"250\" y=\"70\" textAnchor=\"middle\" fontSize=\"12\">Compute μ₁, σ₁</text>\n              <text x=\"250\" y=\"85\" textAnchor=\"middle\" fontSize=\"12\">for group 1</text>\n              <text x=\"250\" y=\"105\" textAnchor=\"middle\" fontSize=\"12\">Compute μ₂, σ₂</text>\n              <text x=\"250\" y=\"120\" textAnchor=\"middle\" fontSize=\"12\">for group 2</text>\n              \n              {/* Output matrix */}\n              <rect x=\"190\" y=\"10\" width=\"120\" height=\"160\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <text x=\"250\" y=\"30\" textAnchor=\"middle\" fontSize=\"14\">Normalized Matrix</text>\n              \n              {/* Normalized groups */}\n              <rect x=\"220\" y=\"50\" width=\"40\" height=\"20\" fill=\"#f3e8ff\" stroke=\"#7e22ce\" />\n              <text x=\"240\" y=\"63\" textAnchor=\"middle\" fontSize=\"10\" fill=\"#7e22ce\">G1</text>\n              <rect x=\"260\" y=\"50\" width=\"40\" height=\"20\" fill=\"#e0e7ff\" stroke=\"#6d28d9\" />\n              <text x=\"280\" y=\"63\" textAnchor=\"middle\" fontSize=\"10\" fill=\"#6d28d9\">G2</text>\n              <rect x=\"220\" y=\"80\" width=\"40\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"260\" y=\"80\" width=\"40\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"220\" y=\"110\" width=\"40\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n              <rect x=\"260\" y=\"110\" width=\"40\" height=\"20\" fill=\"#e6e6e6\" stroke=\"#666\" />\n            </svg>\n          </div>\n          <div>\n            <p className=\"font-medium\">Key Idea:</p>\n            <p>Divides features into groups and normalizes each group independently for each example.</p>\n            <p className=\"mt-2\">Formula: (x - μg) / σg, where μg and σg are calculated within each feature group for each example.</p>\n            <p className=\"mt-2\">Use Cases:</p>\n            <ul className=\"list-disc pl-5\">\n              <li>When batch size is small (e.g., high-resolution images)</li>\n              <li>As a middle ground between batch and layer normalization</li>\n              <li>Computer vision tasks with limited GPU memory</li>\n              <li>When feature groups have semantic meaning</li>\n            </ul>\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"p-4 max-w-4xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">Normalization Techniques: Simplified Matrix Visualization</h1>\n      \n      <div className=\"mb-6\">\n        <div className=\"flex space-x-4\">\n          <button\n            className={`px-4 py-2 rounded ${normType === 'batch' ? 'bg-blue-500 text-white' : 'bg-gray-200'}`}\n            onClick={() => setNormType('batch')}\n          >\n            Batch Normalization\n          </button>\n          <button\n            className={`px-4 py-2 rounded ${normType === 'layer' ? 'bg-green-500 text-white' : 'bg-gray-200'}`}\n            onClick={() => setNormType('layer')}\n          >\n            Layer Normalization\n          </button>\n          <button\n            className={`px-4 py-2 rounded ${normType === 'group' ? 'bg-purple-500 text-white' : 'bg-gray-200'}`}\n            onClick={() => setNormType('group')}\n          >\n            Group Normalization\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"mb-6\">\n        <div className=\"bg-gray-100 p-4 rounded\">\n          <h3 className=\"text-lg font-medium mb-2\">Matrix Format Explanation</h3>\n          <p className=\"mb-2\">\n            <span className=\"font-medium\">Samples:</span> Each <span className=\"font-medium\">row</span> represents a training/testing data point (sample). In neural networks, this would be one input example in a batch.\n          </p>\n          <p className=\"mb-2\">\n            <span className=\"font-medium\">Features:</span> Each <span className=\"font-medium\">column</span> represents a dimension or attribute of the data. In neural networks, these are activation values at a particular layer.\n          </p>\n          <p className=\"mb-2\">\n            <span className=\"font-medium\">Group Normalization:</span> Features are divided into groups (indicated by different colors and G1/G2 labels). Each group is normalized independently within each sample.\n          </p>\n          <div className=\"mt-3 flex items-center mb-2\">\n            <span className=\"inline-block w-4 h-4 bg-purple-50 border border-gray-300 mr-2\"></span>\n            <span className=\"mr-4\">Group 1</span>\n            <span className=\"inline-block w-4 h-4 bg-indigo-50 border border-gray-300 mr-2\"></span>\n            <span>Group 2</span>\n          </div>\n          <p>\n            Click any cell to see which values are used in its normalization calculation.\n          </p>\n        </div>\n        <div className=\"flex justify-between mt-4\">\n          <button\n            className=\"px-3 py-1 bg-gray-200 rounded\"\n            onClick={() => setShowLabels(!showLabels)}\n          >\n            {showLabels ? \"Hide Labels\" : \"Show Labels\"}\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-2 gap-8 mb-6\">\n        <div>\n          <h2 className=\"text-lg font-medium mb-3\">Input Matrix</h2>\n          {inputMatrix.length > 0 && renderMatrix(inputMatrix, true)}\n        </div>\n        <div>\n          <h2 className=\"text-lg font-medium mb-3\">Normalized Matrix</h2>\n          {normalizedMatrix.length > 0 && renderMatrix(normalizedMatrix, false)}\n        </div>\n      </div>\n      \n      <div className=\"mb-6\">\n        {renderCalculation()}\n      </div>\n      \n      {renderDiagram()}\n      \n      <div className=\"mt-6 p-4 bg-gray-50 rounded\">\n        <h3 className=\"text-lg font-medium mb-2\">Summary of Normalization Methods</h3>\n        <div className=\"grid grid-cols-3 gap-4\">\n          <div className=\"p-3 bg-blue-50 rounded\">\n            <h4 className=\"font-medium mb-1\">Batch Normalization</h4>\n            <div className=\"flex justify-center my-2\">\n              <div className=\"bg-blue-200 p-2 rounded text-center\">\n                <strong>Normalizes each feature</strong><br/>across all samples\n              </div>\n            </div>\n            <p className=\"text-sm\">Works well with large batch sizes, but performance degrades with smaller batches.</p>\n            <div className=\"mt-2 text-sm\">\n              <strong>Best for:</strong> CNNs, large batches (32+)\n            </div>\n      </div>\n      <div className=\"p-3 bg-green-50 rounded\">\n        <h4 className=\"font-medium mb-1\">Layer Normalization</h4>\n        <div className=\"flex justify-center my-2\">\n          <div className=\"bg-green-200 p-2 rounded text-center\">\n            <strong>Normalizes all features</strong><br/>within each sample\n          </div>\n        </div>\n        <p className=\"text-sm\">Independent of batch size, works well for sequence models like RNNs and Transformers.</p>\n        <div className=\"mt-2 text-sm\">\n          <strong>Best for:</strong> RNNs, Transformers, NLP\n        </div>\n      </div>\n      <div className=\"p-3 bg-purple-50 rounded\">\n        <h4 className=\"font-medium mb-1\">Group Normalization</h4>\n        <div className=\"flex justify-center my-2\">\n          <div className=\"bg-purple-200 p-2 rounded text-center\">\n            <strong>Normalizes feature groups</strong><br/>within each sample\n          </div>\n        </div>\n        <p className=\"text-sm\">A middle ground approach. Features with similar semantics can be grouped together.</p>\n        <div className=\"mt-2 text-sm\">\n          <strong>Best for:</strong> Small batches, high-res images\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n);\n};\nexport default NormalizationVisualization;\n","import React from 'react';\n\n// Ultra-minimal, CSS-free visualization\nconst MinimalOptimizationViz = () => {\n  // Algorithm data and colors\n  const algorithms = [\n    {\n      id: 'sgd',\n      name: 'Standard SGD',\n      color: '#FF5733',\n      pathSvg: \"M50,150 Q75,120 100,140 Q125,160 150,130 Q175,100 200,120 Q225,140 250,110 Q275,80 300,100 Q325,120 350,90\",\n      lossSvg: \"M50,150 L84,135 L118,120 L152,105 L186,90 L220,75 L254,60 L288,45 L350,30\",\n      pros: ['Simple to implement', 'Low memory usage'],\n      cons: ['Zigzags in ravines', 'Sensitive to feature scaling', 'Easily trapped in local minima'],\n      convergence: '135+'\n    },\n    {\n      id: 'momentum',\n      name: 'SGD + Momentum',\n      color: '#33C4FF',\n      pathSvg: \"M50,150 C100,130 150,70 200,60 S250,70 300,90 L350,90\",\n      lossSvg: \"M50,150 L84,130 L118,110 L152,90 L186,70 L220,60 L254,50 L288,45 L350,40\",\n      pros: ['Accelerates in consistent directions', 'Reduces oscillations'],\n      cons: ['Can overshoot minima', 'Still affected by feature scaling'],\n      convergence: '~100'\n    },\n    {\n      id: 'rmsprop',\n      name: 'RMSProp',\n      color: '#A033FF',\n      pathSvg: \"M50,150 C100,120 150,80 200,50 S250,40 300,40 L350,40\",\n      lossSvg: \"M50,150 L84,120 L118,90 L152,70 L186,55 L220,45 L254,40 L288,37 L350,35\",\n      pros: ['Adapts learning rate per parameter', 'Handles different scales well'],\n      cons: ['No momentum for acceleration', 'Can make small updates too small'],\n      convergence: '~60'\n    },\n    {\n      id: 'adam',\n      name: 'Adam',\n      color: '#33FF57',\n      pathSvg: \"M50,150 C100,100 125,60 150,40 S175,30 300,30 L350,30\",\n      lossSvg: \"M50,150 L84,100 L118,60 L152,40 L186,30 L220,25 L254,22 L288,21 L350,20\",\n      pros: ['Combines momentum & adaptation', 'Best overall performance'],\n      cons: ['More complex to implement', 'Higher memory requirements'],\n      convergence: '~40'\n    }\n  ];\n\n  return (\n    <div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}>\n      <h1 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '20px' }}>\n        Adaptive Learning Rate Comparison\n      </h1>\n      \n      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: '20px', marginBottom: '20px' }}>\n        {algorithms.map(alg => (\n          <div key={alg.id} style={{ \n            backgroundColor: 'white', \n            padding: '15px', \n            borderRadius: '8px',\n            boxShadow: '0 2px 5px rgba(0,0,0,0.1)'\n          }}>\n            <h2 style={{ \n              fontSize: '18px', \n              fontWeight: 'bold', \n              marginBottom: '15px',\n              color: alg.color \n            }}>\n              {alg.name}\n            </h2>\n            \n            <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '15px' }}>\n              {/* Optimization Path */}\n              <div style={{ \n                backgroundColor: '#f8f9fa', \n                padding: '10px', \n                borderRadius: '4px',\n                display: 'flex',\n                flexDirection: 'column'\n              }}>\n                <div style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '5px', textAlign: 'center' }}>\n                  Optimization Path\n                </div>\n                <svg \n                  viewBox=\"0 0 400 200\" \n                  width=\"100%\" \n                  height=\"140\"\n                  style={{ backgroundColor: 'white', border: '1px solid #eee' }}\n                >\n                  {/* Background grid */}\n                  <g stroke=\"#eee\" strokeWidth=\"1\">\n                    <line x1=\"50\" y1=\"20\" x2=\"50\" y2=\"150\" />\n                    <line x1=\"50\" y1=\"150\" x2=\"350\" y2=\"150\" />\n                    <line x1=\"125\" y1=\"20\" x2=\"125\" y2=\"150\" />\n                    <line x1=\"200\" y1=\"20\" x2=\"200\" y2=\"150\" />\n                    <line x1=\"275\" y1=\"20\" x2=\"275\" y2=\"150\" />\n                    <line x1=\"350\" y1=\"20\" x2=\"350\" y2=\"150\" />\n                    <line x1=\"50\" y1=\"20\" x2=\"350\" y2=\"20\" />\n                    <line x1=\"50\" y1=\"63\" x2=\"350\" y2=\"63\" />\n                    <line x1=\"50\" y1=\"107\" x2=\"350\" y2=\"107\" />\n                  </g>\n                  \n                  {/* Axis labels */}\n                  <text x=\"200\" y=\"175\" textAnchor=\"middle\" fontSize=\"10\">Position</text>\n                  <text x=\"20\" y=\"85\" textAnchor=\"middle\" fontSize=\"10\" transform=\"rotate(-90, 20, 85)\">Height</text>\n                  \n                  {/* Path visualization */}\n                  <path \n                    d={alg.pathSvg} \n                    fill=\"none\" \n                    stroke={alg.color} \n                    strokeWidth=\"3\" \n                  />\n                  \n                  {/* Target point */}\n                  <circle cx=\"350\" cy=\"30\" r=\"4\" fill=\"#555\" />\n                </svg>\n              </div>\n              \n              {/* Loss Curve */}\n              <div style={{ \n                backgroundColor: '#f8f9fa', \n                padding: '10px', \n                borderRadius: '4px',\n                display: 'flex',\n                flexDirection: 'column'\n              }}>\n                <div style={{ fontSize: '14px', fontWeight: 'bold', marginBottom: '5px', textAlign: 'center' }}>\n                  Loss Over Iterations\n                </div>\n                <svg \n                  viewBox=\"0 0 400 200\" \n                  width=\"100%\" \n                  height=\"140\"\n                  style={{ backgroundColor: 'white', border: '1px solid #eee' }}\n                >\n                  {/* Background grid */}\n                  <g stroke=\"#eee\" strokeWidth=\"1\">\n                    <line x1=\"50\" y1=\"20\" x2=\"50\" y2=\"150\" />\n                    <line x1=\"50\" y1=\"150\" x2=\"350\" y2=\"150\" />\n                    <line x1=\"110\" y1=\"20\" x2=\"110\" y2=\"150\" />\n                    <line x1=\"170\" y1=\"20\" x2=\"170\" y2=\"150\" />\n                    <line x1=\"230\" y1=\"20\" x2=\"230\" y2=\"150\" />\n                    <line x1=\"290\" y1=\"20\" x2=\"290\" y2=\"150\" />\n                    <line x1=\"350\" y1=\"20\" x2=\"350\" y2=\"150\" />\n                    <line x1=\"50\" y1=\"20\" x2=\"350\" y2=\"20\" />\n                    <line x1=\"50\" y1=\"63\" x2=\"350\" y2=\"63\" />\n                    <line x1=\"50\" y1=\"107\" x2=\"350\" y2=\"107\" />\n                  </g>\n                  \n                  {/* Axis labels */}\n                  <text x=\"200\" y=\"175\" textAnchor=\"middle\" fontSize=\"10\">Iterations (0-140)</text>\n                  <text x=\"20\" y=\"85\" textAnchor=\"middle\" fontSize=\"10\" transform=\"rotate(-90, 20, 85)\">Loss</text>\n                  \n                  {/* Data line */}\n                  <path \n                    d={alg.lossSvg} \n                    fill=\"none\" \n                    stroke={alg.color} \n                    strokeWidth=\"3\" \n                  />\n                  \n                  {/* Data points */}\n                  {[0, 1, 2, 3, 4, 5, 6, 7, 8].map(i => {\n                    const x = 50 + i * 37.5;\n                    const y = alg.lossSvg.split(' ')[i*2+1]?.split(',')[1] || 30;\n                    return <circle key={i} cx={x} cy={y} r=\"3\" fill={alg.color} />;\n                  })}\n                </svg>\n              </div>\n            </div>\n            \n            {/* Pros and Cons */}\n            <div style={{ marginTop: '15px', display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '10px' }}>\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#22c55e', marginBottom: '5px' }}>Pros:</div>\n                <ul style={{ paddingLeft: '20px', margin: 0, fontSize: '14px' }}>\n                  {alg.pros.map((pro, i) => (\n                    <li key={i}>{pro}</li>\n                  ))}\n                </ul>\n              </div>\n              <div>\n                <div style={{ fontWeight: 'bold', color: '#ef4444', marginBottom: '5px' }}>Cons:</div>\n                <ul style={{ paddingLeft: '20px', margin: 0, fontSize: '14px' }}>\n                  {alg.cons.map((con, i) => (\n                    <li key={i}>{con}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {/* Performance Summary */}\n      <div style={{ \n        backgroundColor: '#f8f9fa', \n        padding: '15px', \n        borderRadius: '8px',\n        boxShadow: '0 2px 5px rgba(0,0,0,0.1)', \n        marginBottom: '20px'\n      }}>\n        <h2 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '15px' }}>\n          Key Performance Comparisons\n        </h2>\n        <div style={{ \n          display: 'grid', \n          gridTemplateColumns: 'repeat(auto-fit, minmax(150px, 1fr))', \n          gap: '10px'\n        }}>\n          {algorithms.map(alg => (\n            <div key={alg.id} style={{ \n              backgroundColor: 'white', \n              padding: '10px', \n              borderRadius: '4px',\n              border: '1px solid #ddd',\n              textAlign: 'center'\n            }}>\n              <div style={{ fontWeight: 'bold', marginBottom: '5px', color: alg.color }}>\n                {alg.name}\n              </div>\n              <div style={{ fontSize: '14px' }}>\n                Iterations to converge: <span style={{ fontWeight: 'bold' }}>{alg.convergence}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MinimalOptimizationViz;\n","import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine, Label } from 'recharts';\n\n// Define embedding types with consistent colors\nconst EMBEDDING_COLORS = {\n  sinusoidal: \"#3b82f6\", // blue\n  learned: \"#ef4444\",    // red\n  rope: \"#10b981\"        // green\n};\n\n// Custom tooltip component\nconst SimpleTooltip = ({ active, payload }) => {\n  if (!active || !payload || !payload.length) return null;\n  \n  const point = payload[0].payload;\n  return (\n    <div className=\"bg-white p-2 border border-gray-200 rounded shadow-sm text-xs\">\n      <p><strong>Position:</strong> {point.position}</p>\n      {payload.map(entry => (\n        <p key={entry.dataKey}>\n          <strong>{entry.name || entry.dataKey}:</strong> {entry.value.toFixed(4)}\n        </p>\n      ))}\n    </div>\n  );\n};\n\nconst PositionEmbeddingsComparison = () => {\n  const [selectedEmbedding, setSelectedEmbedding] = useState('sinusoidal');\n  const [sequenceLength, setSequenceLength] = useState(50);\n  const [visualizationData, setVisualizationData] = useState([]);\n  const [selectedPosition, setSelectedPosition] = useState(10);\n  \n  // Embedding type definitions\n  const embeddings = [\n    {\n      id: 'sinusoidal',\n      name: 'Sinusoidal (Original)',\n      description: 'Fixed pattern using sine/cosine functions of different frequencies',\n      pros: ['No parameters to learn', 'Can handle variable length sequences', 'Simple implementation'],\n      cons: ['Fixed pattern not adapted to data', 'Limited expressiveness'],\n      color: EMBEDDING_COLORS.sinusoidal,\n      examples: 'Original Transformer, BERT'\n    },\n    {\n      id: 'learned',\n      name: 'Learned Embeddings',\n      description: 'Position embeddings learned during training',\n      pros: ['Adapts to data patterns', 'Simple to implement'],\n      cons: ['Limited to trained sequence length', 'Cannot extrapolate to longer sequences'],\n      color: EMBEDDING_COLORS.learned,\n      examples: 'BERT, RoBERTa, early GPTs'\n    },\n    {\n      id: 'rope',\n      name: 'RoPE (Rotary)',\n      description: 'Rotates vectors in the complex plane based on position',\n      pros: ['Preserves relative positions', 'Good extrapolation', 'Better for long contexts'],\n      cons: ['More complex implementation', 'Requires careful parameter selection'],\n      color: EMBEDDING_COLORS.rope,\n      examples: 'LLaMA, PaLM, Modern LLMs'\n    }\n  ];\n  \n  // Generate visualization data when parameters change\n  useEffect(() => {\n    const data = generateVisualizationData(selectedEmbedding, sequenceLength);\n    setVisualizationData(data);\n  }, [selectedEmbedding, sequenceLength]);\n  \n  // Generate data for visualization\n  const generateVisualizationData = (embeddingType, seqLength) => {\n    const data = [];\n    \n    for (let pos = 0; pos < seqLength; pos++) {\n      const item = { position: pos };\n      \n      if (embeddingType === 'sinusoidal') {\n        // Sinusoidal embedding (showing 3 dimensions)\n        item.dimSlow = Math.sin(pos * 0.05);\n        item.dimMedium = Math.sin(pos * 0.15);\n        item.dimFast = Math.sin(pos * 0.45);\n      } \n      else if (embeddingType === 'learned') {\n        // Learned embedding (simulated with random but consistent patterns)\n        item.dim1 = 0.8 * Math.sin(pos * 0.12) + 0.2 * Math.sin(pos * 0.5);\n        item.dim2 = 0.7 * Math.sin(pos * 0.1 + 1) + 0.3 * Math.sin(pos * 0.3);\n        item.dim3 = 0.6 * Math.sin(pos * 0.08 + 2) + 0.4 * Math.cos(pos * 0.25);\n      }\n      else if (embeddingType === 'rope') {\n        // RoPE embedding (showing rotation patterns)\n        const theta1 = pos * 0.1;\n        const theta2 = pos * 0.2;\n        item.cosine = Math.cos(theta1);\n        item.sine = Math.sin(theta1);\n        item.rotation = Math.cos(theta1) * Math.cos(theta2 - theta1);\n      }\n      \n      data.push(item);\n    }\n    \n    return data;\n  };\n  \n  // Get dimension names and colors based on embedding type\n  const getDimensionInfo = () => {\n    if (selectedEmbedding === 'sinusoidal') {\n      return {\n        dimensions: ['dimSlow', 'dimMedium', 'dimFast'],\n        labels: ['Slow-changing dimension', 'Medium-changing dimension', 'Fast-changing dimension'],\n        colors: ['#4285F4', '#34A853', '#FBBC05']\n      };\n    } \n    else if (selectedEmbedding === 'learned') {\n      return {\n        dimensions: ['dim1', 'dim2', 'dim3'],\n        labels: ['Learned dimension 1', 'Learned dimension 2', 'Learned dimension 3'],\n        colors: ['#EA4335', '#34A853', '#4285F4']\n      };\n    }\n    else if (selectedEmbedding === 'rope') {\n      return {\n        dimensions: ['cosine', 'sine', 'rotation'],\n        labels: ['Cosine component', 'Sine component', 'Rotation effect'],\n        colors: ['#34A853', '#FBBC05', '#4285F4']\n      };\n    }\n    return { dimensions: [], labels: [], colors: [] };\n  };\n  \n  // Find current embedding info\n  const currentEmbedding = embeddings.find(emb => emb.id === selectedEmbedding);\n  const { dimensions, labels, colors } = getDimensionInfo();\n  \n  // Find position info for the selected position\n  const positionData = visualizationData.find(d => d.position === selectedPosition) || {};\n  \n  return (\n    <div className=\"p-4 w-full max-w-4xl mx-auto bg-gray-50 rounded-lg shadow-md\">\n      <h1 className=\"text-xl font-bold mb-4 text-center\">Transformer Position Embeddings</h1>\n      \n      {/* Controls */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4\">\n        <div className=\"mb-2\">\n          <label className=\"block text-sm font-medium mb-1\">\n            Sequence Length: {sequenceLength}\n          </label>\n          <input\n            type=\"range\"\n            min=\"10\"\n            max=\"100\"\n            value={sequenceLength}\n            onChange={(e) => setSequenceLength(parseInt(e.target.value))}\n            className=\"w-full\"\n          />\n        </div>\n        \n        <div className=\"mb-2\">\n          <label className=\"block text-sm font-medium mb-1\">\n            View Position {selectedPosition} Details:\n          </label>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max={sequenceLength - 1}\n            value={selectedPosition}\n            onChange={(e) => setSelectedPosition(parseInt(e.target.value))}\n            className=\"w-full\"\n          />\n        </div>\n      </div>\n      \n      {/* Embedding selector */}\n      <div className=\"flex flex-wrap gap-2 mb-4 justify-center\">\n        {embeddings.map(emb => (\n          <button\n            key={emb.id}\n            className={`px-3 py-1 rounded-full text-sm ${selectedEmbedding === emb.id \n              ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-800 hover:bg-gray-300'}`}\n            onClick={() => setSelectedEmbedding(emb.id)}\n          >\n            {emb.name}\n          </button>\n        ))}\n      </div>\n      \n      {/* Current embedding info */}\n      <div className=\"w-full bg-white p-3 rounded-lg border border-gray-200 mb-4 shadow-sm\">\n        <h2 className=\"text-lg font-medium mb-1\" style={{color: currentEmbedding?.color}}>\n          {currentEmbedding?.name}\n        </h2>\n        <p className=\"text-sm mb-1\">{currentEmbedding?.description}</p>\n        <p className=\"text-xs text-gray-500\">Used in: {currentEmbedding?.examples}</p>\n      </div>\n      \n{/* Visualization */}\n<div className=\"w-full bg-white p-3 rounded-lg border border-gray-200 mb-4 shadow-sm\">\n  <h2 className=\"text-lg font-medium mb-2\">Visualization</h2>\n  \n  <div className=\"w-full\" style={{ height: '300px' }}>\n    {visualizationData.length > 0 ? (\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <LineChart \n          data={visualizationData}\n          margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" opacity={0.3} />\n          <XAxis \n            dataKey=\"position\" \n            type=\"number\"\n            domain={[0, sequenceLength - 1]}\n            label={{ value: 'Position', position: 'bottom', offset: 5 }} \n          />\n          <YAxis \n            domain={[-1.1, 1.1]}\n            label={{ value: 'Embedding Value', angle: -90, position: 'insideLeft', offset: -5 }}\n          />\n          <Tooltip content={<SimpleTooltip />} />\n          <Legend />\n          \n          {/* Selected position marker */}\n          <ReferenceLine x={selectedPosition} stroke=\"#000\" strokeWidth={1} strokeDasharray=\"3 3\">\n            <Label value=\"Selected Position\" position=\"top\" fontSize={10} />\n          </ReferenceLine>\n          \n          {/* Training length marker for learned embeddings */}\n          {selectedEmbedding === 'learned' && (\n            <ReferenceLine x={30} stroke=\"#ef4444\" strokeDasharray=\"3 3\">\n              <Label value=\"Training Length Limit\" position=\"insideBottomRight\" fontSize={10} fill=\"#ef4444\" />\n            </ReferenceLine>\n          )}\n          \n          {/* Draw lines for each dimension */}\n          {dimensions.map((dim, i) => (\n            <Line \n              key={dim} \n              type=\"monotone\" \n              dataKey={dim} \n              name={labels[i]} \n              stroke={colors[i]} \n              strokeWidth={2}\n              dot={false} \n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    ) : (\n      <div className=\"flex h-full items-center justify-center\">\n        <p className=\"text-gray-500\">Loading chart data...</p>\n      </div>\n    )}\n  </div>\n</div>\n      \n      {/* Position details */}\n      <div className=\"w-full bg-white p-3 rounded-lg border border-gray-200 mb-4 shadow-sm\">\n        <h2 className=\"text-lg font-medium mb-2\">Position {selectedPosition} Details</h2>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n          {dimensions.map((dim, i) => (\n            <div key={dim} className=\"p-2 rounded-lg border\" style={{borderColor: colors[i]}}>\n              <h3 className=\"text-sm font-medium mb-1\" style={{color: colors[i]}}>\n                {labels[i]}\n              </h3>\n              <div className=\"text-3xl font-bold text-center py-2\">\n                {positionData[dim] ? positionData[dim].toFixed(4) : \"N/A\"}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      {/* Pros/Cons */}\n      <div className=\"w-full bg-white p-3 rounded-lg border border-gray-200 mb-4 shadow-sm\">\n        <h2 className=\"text-lg font-medium mb-2\">Advantages & Limitations</h2>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n          <div className=\"p-3 bg-green-50 rounded-lg\">\n            <h3 className=\"text-sm font-medium text-green-700 mb-2\">Advantages</h3>\n            <ul className=\"list-disc pl-5 space-y-1\">\n              {currentEmbedding?.pros.map((pro, idx) => (\n                <li key={idx} className=\"text-sm\">{pro}</li>\n              ))}\n            </ul>\n          </div>\n          \n          <div className=\"p-3 bg-red-50 rounded-lg\">\n            <h3 className=\"text-sm font-medium text-red-700 mb-2\">Limitations</h3>\n            <ul className=\"list-disc pl-5 space-y-1\">\n              {currentEmbedding?.cons.map((con, idx) => (\n                <li key={idx} className=\"text-sm\">{con}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n      \n      {/* Key insights */}\n      <div className=\"w-full bg-white p-3 rounded-lg border border-gray-200 shadow-sm\">\n        <h2 className=\"text-lg font-medium mb-2\">Key Insights</h2>\n        \n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-3\">\n          <div className=\"p-2 rounded bg-blue-50 border border-blue-100\">\n            <h4 className=\"font-medium mb-1 text-blue-600\">Sinusoidal</h4>\n            <p className=\"text-xs mb-1\">💡 Different frequencies create unique \"fingerprints\"</p>\n            <p className=\"text-xs mb-1\">💡 Mathematically guaranteed uniqueness</p>\n            <p className=\"text-xs mb-1\">💡 Works for any sequence length</p>\n          </div>\n          \n          <div className=\"p-2 rounded bg-red-50 border border-red-100\">\n            <h4 className=\"font-medium mb-1 text-red-600\">Learned</h4>\n            <p className=\"text-xs mb-1\">💡 Data-adaptive patterns for better fit</p>\n            <p className=\"text-xs mb-1\">💡 Simple lookup implementation</p>\n            <p className=\"text-xs mb-1\">💡 Limited to training sequence length</p>\n          </div>\n          \n          <div className=\"p-2 rounded bg-green-50 border border-green-100\">\n            <h4 className=\"font-medium mb-1 text-green-600\">RoPE</h4>\n            <p className=\"text-xs mb-1\">💡 Preserves relative position relationships</p>\n            <p className=\"text-xs mb-1\">💡 Strong extrapolation to longer sequences</p>\n            <p className=\"text-xs mb-1\">💡 Used in modern large language models</p>\n          </div>\n        </div>\n        \n        <div className=\"p-3 bg-blue-50 rounded-lg\">\n          <h3 className=\"text-sm font-medium text-blue-700 mb-2\">Understanding Position Embeddings:</h3>\n          <ul className=\"list-disc pl-5 space-y-1 text-sm\">\n            <li>Position embeddings add <strong>order information</strong> to transformer models that would otherwise treat tokens as a set</li>\n            <li>Each embedding creates a unique \"fingerprint\" for every position in a sequence</li>\n            <li>The choice of embedding affects how well models handle <strong>longer sequences</strong> not seen during training</li>\n            <li>Modern models like LLaMA use more sophisticated approaches (RoPE) for better performance on long contexts</li>\n          </ul>\n        </div>\n      </div>\n      \n      {/* How embeddings are used in transformers */}\n      <div className=\"w-full bg-white p-3 rounded-lg border border-gray-200 mt-4 shadow-sm\">\n        <h2 className=\"text-lg font-medium mb-2\">How Position Embeddings Are Used in Transformers</h2>\n        \n        <div className=\"flex flex-col md:flex-row gap-4\">\n          <div className=\"flex-1 p-3 bg-gray-50 rounded-lg\">\n            <h3 className=\"text-sm font-medium mb-2\">Embedding Process:</h3>\n            <ol className=\"list-decimal pl-5 space-y-1 text-sm\">\n              <li>Each token is converted to a token embedding</li>\n              <li>Each position gets a position embedding</li>\n              <li>The two embeddings are added together</li>\n              <li>This combined embedding preserves both <strong>what</strong> the token is and <strong>where</strong> it appears</li>\n              <li>The result is processed by attention layers</li>\n            </ol>\n          </div>\n          \n          <div className=\"flex-1 p-3 bg-gray-50 rounded-lg\">\n            <h3 className=\"text-sm font-medium mb-2\">Why Position Information Matters:</h3>\n            <p className=\"text-sm mb-2\">In language, order changes meaning:</p>\n            <div className=\"p-2 bg-white rounded border border-gray-200 text-sm\">\n              <p>\"The dog chased the cat\" vs. \"The cat chased the dog\"</p>\n              <p className=\"mt-1 text-xs text-gray-600\">Same tokens, different order, completely different meaning</p>\n            </div>\n            <p className=\"text-sm mt-2\">Position embeddings ensure transformers understand these differences despite processing all tokens in parallel.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PositionEmbeddingsComparison;\n","import React, { useState, useEffect } from 'react';\n\nconst BetaVAEVisualization = () => {\n  const [beta, setBeta] = useState(1.0);\n  const [latentData, setLatentData] = useState([]);\n  const [lossValues, setLossValues] = useState({ kl: 0.2, recon: 0.1 });\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  \n  // Set up responsive dimensions\n  useEffect(() => {\n    // Initial sizing\n    updateDimensions();\n    \n    // Update on resize\n    window.addEventListener('resize', updateDimensions);\n    return () => window.removeEventListener('resize', updateDimensions);\n  }, []);\n  \n  const updateDimensions = () => {\n    // Get available width (capped at reasonable max size)\n    const containerWidth = Math.min(\n      document.body.clientWidth - 40, \n      800\n    );\n    \n    // Determine if we should switch to vertical layout\n    const isMobile = containerWidth < 600;\n    \n    // Calculate graph width and height based on container\n    const graphWidth = isMobile ? containerWidth - 40 : (containerWidth / 2) - 40;\n    const graphHeight = Math.min(300, graphWidth * 0.8);\n    \n    setDimensions({\n      width: graphWidth,\n      height: graphHeight,\n      isMobile\n    });\n  };\n  \n  // Generate latent space data based on beta value\n  useEffect(() => {\n    try {\n      // Higher beta = more disentangled (clearer clusters)\n      const disentanglementFactor = Math.min(beta, 4) / 4;\n      const entanglementFactor = 1 - disentanglementFactor;\n      \n      // Generate data for 5 different classes\n      const newData = [];\n      for (let classIdx = 0; classIdx < 5; classIdx++) {\n        for (let i = 0; i < 10; i++) {\n          // Base position for each class\n          const baseX = (classIdx - 2) * 2;\n          const baseY = Math.sin(classIdx * Math.PI / 2.5) * 2;\n          \n          // More noise and overlap for lower beta values\n          const noiseX = (Math.random() - 0.5) * 2 * (1 + entanglementFactor * 3);\n          const noiseY = (Math.random() - 0.5) * 2 * (1 + entanglementFactor * 3);\n          \n          newData.push({\n            id: `${classIdx}-${i}`,\n            x: baseX + noiseX,\n            y: baseY + noiseY,\n            classIdx\n          });\n        }\n      }\n      \n      setLatentData(newData);\n      \n      // Update loss values\n      const kl = 0.2 + Math.min(beta, 4) / 8;\n      const recon = 0.1 + Math.min(beta, 4) / 6;\n      setLossValues({ kl, recon, total: recon + beta * kl });\n    } catch (error) {\n      console.error(\"Error generating latent data:\", error);\n      // Set fallback data if there's an error\n      setLatentData([]);\n    }\n  }, [beta]);\n  \n  // Safe margin calculation with fallbacks\n  const margin = Math.max(10, Math.min(30, dimensions.width * 0.08));\n  \n  // Colors for different classes\n  const colors = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00'];\n  \n  // Calculate plot dimensions with safeguards\n  const plotWidth = Math.max(50, dimensions.width - 2 * margin);\n  const plotHeight = Math.max(50, dimensions.height - 2 * margin);\n  \n  // Calculate scales with defensive coding\n  let xMin = -5, xMax = 5, yMin = -5, yMax = 5;\n  \n  // Only recalculate if we have data\n  if (latentData.length > 0) {\n    const xValues = latentData.map(d => d.x);\n    const yValues = latentData.map(d => d.y);\n    \n    xMin = Math.min(...xValues);\n    xMax = Math.max(...xValues);\n    yMin = Math.min(...yValues);\n    yMax = Math.max(...yValues);\n    \n    // Add padding and handle identical min/max\n    if (xMin === xMax) {\n      xMin -= 1;\n      xMax += 1;\n    } else {\n      const xPadding = (xMax - xMin) * 0.1;\n      xMin -= xPadding;\n      xMax += xPadding;\n    }\n    \n    if (yMin === yMax) {\n      yMin -= 1;\n      yMax += 1;\n    } else {\n      const yPadding = (yMax - yMin) * 0.1;\n      yMin -= yPadding;\n      yMax += yPadding;\n    }\n  }\n  \n  // Scale points to fit in the plot area\n  const scaleX = x => margin + ((x - xMin) / (xMax - xMin)) * plotWidth;\n  const scaleY = y => margin + ((y - yMin) / (yMax - yMin)) * plotHeight;\n  \n  // If dimensions aren't set yet, render a placeholder\n  if (dimensions.width === 0) {\n    return <div className=\"p-4 text-center\">Loading visualization...</div>;\n  }\n  \n  return (\n    <div className=\"p-2 mx-auto\" style={{ maxWidth: '800px' }}>\n      <h2 className=\"text-xl font-bold mb-4 text-center\">β-VAE Latent Space Visualization</h2>\n      \n      {/* Beta slider */}\n      <div className=\"mb-6 px-2\">\n        <label className=\"block text-sm font-medium mb-1\">\n          β value: {beta.toFixed(1)}\n        </label>\n        <input\n          type=\"range\"\n          min=\"0.1\"\n          max=\"4\"\n          step=\"0.1\"\n          value={beta}\n          onChange={e => setBeta(parseFloat(e.target.value))}\n          className=\"w-full\"\n        />\n      </div>\n      \n      <div className={`flex ${dimensions.isMobile ? 'flex-col' : 'flex-row'} gap-4`}>\n        {/* Latent space visualization */}\n        <div className=\"border rounded p-2 flex-1\">\n          <h3 className=\"text-sm font-medium mb-2 text-center\">Latent Space</h3>\n          <div className=\"flex justify-center\">\n            <svg \n              width={dimensions.width} \n              height={dimensions.height} \n              className=\"bg-gray-50 rounded shadow-inner\"\n              style={{ minHeight: '200px' }}\n            >\n              {/* Axes */}\n              <line \n                x1={margin} \n                y1={dimensions.height/2} \n                x2={dimensions.width-margin} \n                y2={dimensions.height/2} \n                stroke=\"#ccc\" \n                strokeWidth=\"1\"\n              />\n              <line \n                x1={dimensions.width/2} \n                y1={margin} \n                x2={dimensions.width/2} \n                y2={dimensions.height-margin} \n                stroke=\"#ccc\" \n                strokeWidth=\"1\"\n              />\n              \n              {/* Points */}\n              {latentData.map(point => (\n                <circle\n                  key={point.id}\n                  cx={scaleX(point.x)}\n                  cy={scaleY(point.y)}\n                  r={Math.max(3, Math.min(6, dimensions.width * 0.01))}\n                  fill={colors[point.classIdx % colors.length]}\n                  opacity={0.7}\n                />\n              ))}\n            </svg>\n          </div>\n          <div className=\"text-xs mt-1 text-center\">\n            More clustered = Better disentanglement\n          </div>\n        </div>\n        \n        {/* Loss values visualization - ultra robust implementation */}\n        <div className=\"border rounded p-2 flex-1\">\n          <h3 className=\"text-sm font-medium mb-2 text-center\">Loss Components</h3>\n          \n          {/* Table-based layout for maximum compatibility */}\n          <table style={{ width: '100%', borderCollapse: 'separate', borderSpacing: '20px 0', margin: '20px 0' }}>\n            <tbody>\n              <tr style={{ height: '150px', verticalAlign: 'bottom' }}>\n                {/* Reconstruction loss */}\n                <td style={{ width: '33%', textAlign: 'center', verticalAlign: 'bottom' }}>\n                  <div style={{ \n                    margin: '0 auto',\n                    width: '40px', \n                    height: `${Math.max(20, lossValues.recon * 150)}px`, \n                    backgroundColor: '#3B82F6',\n                    border: '2px solid #2563EB',\n                    position: 'relative'\n                  }}>\n                    {/* Add text inside bar for extra visibility */}\n                    <div style={{ \n                      position: 'absolute', \n                      bottom: '5px', \n                      left: '0', \n                      right: '0', \n                      color: 'white', \n                      fontSize: '10px',\n                      textAlign: 'center'\n                    }}>\n                      {Math.round(lossValues.recon * 100)}%\n                    </div>\n                  </div>\n                </td>\n                \n                {/* KL divergence */}\n                <td style={{ width: '33%', textAlign: 'center', verticalAlign: 'bottom' }}>\n                  <div style={{ \n                    margin: '0 auto',\n                    width: '40px', \n                    height: `${Math.max(20, lossValues.kl * 150)}px`, \n                    backgroundColor: '#EF4444',\n                    border: '2px solid #DC2626',\n                    position: 'relative'\n                  }}>\n                    {/* Add text inside bar for extra visibility */}\n                    <div style={{ \n                      position: 'absolute', \n                      bottom: '5px', \n                      left: '0', \n                      right: '0', \n                      color: 'white', \n                      fontSize: '10px',\n                      textAlign: 'center'\n                    }}>\n                      {Math.round(lossValues.kl * 100)}%\n                    </div>\n                  </div>\n                </td>\n                \n                {/* Total loss */}\n                <td style={{ width: '33%', textAlign: 'center', verticalAlign: 'bottom' }}>\n                  <div style={{ \n                    margin: '0 auto',\n                    width: '40px', \n                    height: `${Math.max(20, lossValues.total * 50)}px`, \n                    backgroundColor: '#8B5CF6',\n                    border: '2px solid #7C3AED',\n                    position: 'relative'\n                  }}>\n                    {/* Add text inside bar for extra visibility */}\n                    <div style={{ \n                      position: 'absolute', \n                      bottom: '5px', \n                      left: '0', \n                      right: '0', \n                      color: 'white', \n                      fontSize: '10px',\n                      textAlign: 'center'\n                    }}>\n                      {Math.round(lossValues.total * 100)}%\n                    </div>\n                  </div>\n                </td>\n              </tr>\n              \n              {/* Labels row */}\n              <tr>\n                <td style={{ textAlign: 'center', padding: '10px 0' }}>\n                  <strong style={{ fontSize: '12px' }}>Recon.</strong>\n                </td>\n                <td style={{ textAlign: 'center', padding: '10px 0' }}>\n                  <strong style={{ fontSize: '12px' }}>KL Div.</strong>\n                </td>\n                <td style={{ textAlign: 'center', padding: '10px 0' }}>\n                  <strong style={{ fontSize: '12px' }}>Total</strong>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          \n          <div style={{ \n            fontSize: '12px', \n            marginTop: '10px', \n            textAlign: 'center',\n            padding: '5px',\n            backgroundColor: '#f8f9fa',\n            borderRadius: '4px'\n          }}>\n            β = {beta.toFixed(1)} weighs the KL divergence term\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 text-sm p-2\">\n        <h3 className=\"font-medium\">Impact of β parameter:</h3>\n        <ul className=\"list-disc pl-6 mt-1 space-y-1\">\n          <li><strong>Low β</strong> (0.1-1): Prioritizes reconstruction accuracy, leads to less disentangled latent space</li>\n          <li><strong>β = 1</strong>: Standard VAE</li>\n          <li><strong>High β</strong> (&gt;1): Encourages disentanglement, clearer separation in latent space, but worse reconstruction</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default BetaVAEVisualization;\n","import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nconst ActivationFunctionsExplorer = () => {\n  const [viewMode, setViewMode] = useState('function'); // 'function' or 'derivative'\n  const [selectedFunctions, setSelectedFunctions] = useState(['relu', 'sigmoid', 'tanh']);\n  const [dataPoints, setDataPoints] = useState([]);\n  const [activeTab, setActiveTab] = useState('pros');\n  \n  // Define activation functions and their properties\n  const activationFunctions = {\n    sigmoid: {\n      name: 'Sigmoid',\n      formula: 'σ(x) = 1 / (1 + e^(-x))',\n      function: (x) => 1 / (1 + Math.exp(-x)),\n      derivative: (x) => {\n        const sigmoid = 1 / (1 + Math.exp(-x));\n        return sigmoid * (1 - sigmoid);\n      },\n      color: '#8884d8',\n      range: '(0, 1)',\n      pros: [\n        'Smooth and differentiable everywhere',\n        'Output bounded between 0 and 1',\n        'Good for binary classification output layers'\n      ],\n      cons: [\n        'Suffers from vanishing gradient problem',\n        'Not zero-centered',\n        'Computationally expensive'\n      ],\n      whenToUse: [\n        'Binary classification (output layer)',\n        'When bounded output between 0 and 1 is needed'\n      ]\n    },\n    tanh: {\n      name: 'Tanh',\n      formula: 'tanh(x) = (e^x - e^(-x)) / (e^x + e^(-x))',\n      function: (x) => Math.tanh(x),\n      derivative: (x) => 1 - Math.pow(Math.tanh(x), 2),\n      color: '#82ca9d',\n      range: '(-1, 1)',\n      pros: [\n        'Zero-centered (outputs between -1 and 1)',\n        'Stronger gradients than sigmoid',\n        'Better convergence than sigmoid'\n      ],\n      cons: [\n        'Still suffers from vanishing gradient problem',\n        'Saturates at extreme values'\n      ],\n      whenToUse: [\n        'Hidden layers in neural networks',\n        'When zero-centered activation is needed',\n        'Recurrent neural networks'\n      ]\n    },\n    relu: {\n      name: 'ReLU',\n      formula: 'f(x) = max(0, x)',\n      function: (x) => Math.max(0, x),\n      derivative: (x) => x > 0 ? 1 : 0,\n      color: '#ff7300',\n      range: '[0, ∞)',\n      pros: [\n        'Computationally efficient',\n        'No vanishing gradient for positive inputs',\n        'Converges faster than sigmoid/tanh'\n      ],\n      cons: [\n        '\"Dying ReLU\" problem',\n        'Not zero-centered',\n        'Unbounded output'\n      ],\n      whenToUse: [\n        'Default choice for hidden layers in CNNs',\n        'When computational efficiency is important',\n        'Deep networks'\n      ]\n    },\n    leakyRelu: {\n      name: 'Leaky ReLU',\n      formula: 'f(x) = max(αx, x), where α = 0.01',\n      function: (x) => Math.max(0.01 * x, x),\n      derivative: (x) => x > 0 ? 1 : 0.01,\n      color: '#ff8e00',\n      range: '(-∞, ∞)',\n      pros: [\n        'Prevents \"dying ReLU\" problem',\n        'Allows negative values to contribute',\n        'Computationally efficient'\n      ],\n      cons: [\n        'Not zero-centered',\n        'α is a hyperparameter that needs tuning'\n      ],\n      whenToUse: [\n        'When you want to avoid dying ReLU problem',\n        'Deep networks with potential negative activations'\n      ]\n    },\n    prelu: {\n      name: 'PReLU',\n      formula: 'f(x) = max(αx, x), where α is learnable',\n      function: (x) => Math.max(0.1 * x, x), // Using 0.1 as example α\n      derivative: (x) => x > 0 ? 1 : 0.1,    // Using 0.1 as example α\n      color: '#ff9e00',\n      range: '(-∞, ∞)',\n      pros: [\n        'Adaptive negative slope (α is learned)',\n        'Can outperform ReLU and Leaky ReLU',\n        'Mitigates dying ReLU problem'\n      ],\n      cons: [\n        'Additional parameters to learn',\n        'Can overfit small datasets',\n        'Not zero-centered'\n      ],\n      whenToUse: [\n        'When you have sufficient data to learn α',\n        'When performance is critical',\n        'When dying ReLU is an issue'\n      ]\n    },\n    elu: {\n      name: 'ELU',\n      formula: 'f(x) = x if x > 0, α(e^x - 1) if x ≤ 0',\n      function: (x) => x > 0 ? x : 1 * (Math.exp(x) - 1),\n      derivative: (x) => x > 0 ? 1 : 1 * Math.exp(x),\n      color: '#ff4500',\n      range: '(-α, ∞)',\n      pros: [\n        'Smooth function with negative values',\n        'Closer to zero-mean activations',\n        'Reduces \"bias shift\"'\n      ],\n      cons: [\n        'Computationally more expensive than ReLU',\n        'Can produce negative outputs'\n      ],\n      whenToUse: [\n        'When you want benefits of both ReLU and negative values',\n        'Deep networks that need regularizing effects'\n      ]\n    },\n    selu: {\n      name: 'SELU',\n      formula: 'f(x) = λ * (x if x > 0, α(e^x - 1) if x ≤ 0)',\n      function: (x) => {\n        const lambda = 1.0507;\n        const alpha = 1.67326;\n        return x > 0 ? lambda * x : lambda * alpha * (Math.exp(x) - 1);\n      },\n      derivative: (x) => {\n        const lambda = 1.0507;\n        const alpha = 1.67326;\n        return x > 0 ? lambda : lambda * alpha * Math.exp(x);\n      },\n      color: '#9932cc',\n      range: 'Self-norm',\n      pros: [\n        'Self-normalizing (preserves mean/variance)',\n        'Helps with vanishing/exploding gradients',\n        'Can eliminate need for batch normalization'\n      ],\n      cons: [\n        'Requires specific weight initialization',\n        'Works best when used for all layers',\n        'Less established than ReLU/ELU'\n      ],\n      whenToUse: [\n        'Fully Connected Neural Networks',\n        'When you want to avoid batch normalization',\n        'Deep networks requiring normalization'\n      ]\n    },\n    swish: {\n      name: 'Swish',\n      formula: 'f(x) = x * sigmoid(x)',\n      function: (x) => x * (1 / (1 + Math.exp(-x))),\n      derivative: (x) => {\n        const sigmoid = 1 / (1 + Math.exp(-x));\n        return sigmoid + x * sigmoid * (1 - sigmoid);\n      },\n      color: '#20b2aa',\n      range: 'Unbounded',\n      pros: [\n        'Often outperforms ReLU in deep networks',\n        'Smooth function with non-monotonic shape',\n        'Works well with normalization techniques'\n      ],\n      cons: [\n        'Computationally more expensive than ReLU',\n        'Relatively new and less established'\n      ],\n      whenToUse: [\n        'Deep neural networks',\n        'Modern architectures like transformers',\n        'When seeking potentially better performance than ReLU'\n      ]\n    },\n    gelu: {\n      name: 'GELU',\n      formula: 'f(x) = x * Φ(x)',\n      // Approximation: 0.5x * (1 + tanh(√(2/π) * (x + 0.044715x^3)))\n      function: (x) => 0.5 * x * (1 + Math.tanh(Math.sqrt(2 / Math.PI) * (x + 0.044715 * Math.pow(x, 3)))),\n      derivative: (x) => {\n        const inner = Math.sqrt(2 / Math.PI) * (x + 0.044715 * Math.pow(x, 3));\n        const dtanh = 1 - Math.pow(Math.tanh(inner), 2);\n        const dinner = Math.sqrt(2 / Math.PI) * (1 + 3 * 0.044715 * Math.pow(x, 2));\n        return 0.5 * (1 + Math.tanh(inner)) + 0.5 * x * dtanh * dinner;\n      },\n      color: '#4682b4',\n      range: 'Unbounded',\n      pros: [\n        'Used in modern transformers (BERT, GPT)',\n        'Smooth non-monotonic shape',\n        'Strong empirical performance'\n      ],\n      cons: [\n        'Computationally more expensive than ReLU',\n        'More complex to implement efficiently',\n        'Less intuitive than simpler activations'\n      ],\n      whenToUse: [\n        'Modern transformer architectures',\n        'NLP models',\n        'When seeking state-of-the-art performance'\n      ]\n    },\n    softmax: {\n      name: 'Softmax',\n      formula: 'softmax(x_i) = e^(x_i) / Σ_j e^(x_j)',\n      function: (x) => Math.exp(x) / 10, // Simplified for visualization\n      derivative: (x) => Math.exp(x) / 10 * (1 - Math.exp(x) / 10), // Simplified\n      color: '#dc143c',\n      range: '(0,1), sum=1',\n      pros: [\n        'Converts values to probability distribution',\n        'Outputs sum to 1 across all classes',\n        'Good for multi-class classification'\n      ],\n      cons: [\n        'Only meaningful for multiple outputs',\n        'Can have numerical stability issues',\n        'Computationally expensive'\n      ],\n      whenToUse: [\n        'Multi-class classification output layers',\n        'When probabilistic interpretation is needed',\n        'Final layer of classification networks'\n      ]\n    }\n  };\n\n  // Generate data points for plotting\n  useEffect(() => {\n    const min = -5, max = 5;\n    const step = (max - min) / 200;\n    const points = [];\n\n    for (let x = min; x <= max; x += step) {\n      const point = { x: parseFloat(x.toFixed(2)) };\n      \n      Object.entries(activationFunctions).forEach(([key, func]) => {\n        try {\n          if (viewMode === 'function') {\n            point[key] = func.function(x);\n          } else {\n            point[key] = func.derivative(x);\n          }\n          \n          // Handle infinity and NaN\n          if (!isFinite(point[key]) || isNaN(point[key])) {\n            point[key] = null;\n          }\n        } catch (error) {\n          point[key] = null;\n        }\n      });\n      \n      points.push(point);\n    }\n    \n    setDataPoints(points);\n  }, [viewMode]);\n\n  // Toggle function selection\n  const toggleFunction = (funcKey) => {\n    if (selectedFunctions.includes(funcKey)) {\n      setSelectedFunctions(selectedFunctions.filter(key => key !== funcKey));\n    } else {\n      setSelectedFunctions([...selectedFunctions, funcKey]);\n    }\n  };\n\n  // Function to render a table row for an activation function\n  const renderFunctionTableRow = (key, func) => (\n    <tr key={key}>\n      <td className=\"px-3 py-2 border-r\">\n        <div className=\"font-medium\" style={{color: func.color}}>{func.name}</div>\n        <div className=\"text-gray-500\">{func.formula}</div>\n      </td>\n      <td className=\"px-3 py-2 border-r\">{func.range}</td>\n      <td className=\"px-3 py-2 border-r\">\n        <ul className=\"list-disc pl-4\">\n          {func.pros.map((pro, idx) => (\n            <li key={idx}>{pro}</li>\n          ))}\n        </ul>\n      </td>\n      <td className=\"px-3 py-2\">\n        <ul className=\"list-disc pl-4\">\n          {func.cons.map((con, idx) => (\n            <li key={idx}>{con}</li>\n          ))}\n        </ul>\n      </td>\n    </tr>\n  );\n\n  return (\n    <div className=\"flex flex-col w-full space-y-4\">\n      <div className=\"w-full border rounded-lg shadow-sm\">\n        <div className=\"p-4 border-b\">\n          <h2 className=\"text-xl font-semibold\">Neural Network Activation Functions Explorer</h2>\n        </div>\n        <div className=\"p-4\">\n          <div className=\"flex flex-col space-y-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"relative inline-block w-10 h-5\">\n                <input\n                  type=\"checkbox\"\n                  id=\"viewMode\"\n                  className=\"opacity-0 w-0 h-0\"\n                  checked={viewMode === 'derivative'}\n                  onChange={(e) => setViewMode(e.target.checked ? 'derivative' : 'function')}\n                />\n                <span \n                  className={`absolute cursor-pointer top-0 left-0 right-0 bottom-0 rounded-full transition-colors duration-200 ${\n                    viewMode === 'derivative' ? 'bg-blue-500' : 'bg-gray-300'\n                  }`}\n                >\n                  <span \n                    className={`absolute h-4 w-4 rounded-full bg-white transition-transform duration-200 ${\n                      viewMode === 'derivative' ? 'transform translate-x-5' : 'transform translate-x-0.5'\n                    }`} \n                    style={{top: '2px'}}\n                  />\n                </span>\n              </div>\n              <label htmlFor=\"viewMode\" className=\"ml-2 cursor-pointer\">\n                {viewMode === 'function' ? 'Show Function' : 'Show Derivative'}\n              </label>\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n              <div className=\"lg:col-span-2\">\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <LineChart data={dataPoints} margin={{ top: 5, right: 5, left: 5, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                      dataKey=\"x\"\n                      type=\"number\"\n                      domain={[-5, 5]}\n                      tickCount={11}\n                      label={{ value: 'x', position: 'insideBottomRight', offset: -5 }}\n                    />\n                    <YAxis \n                      domain={[-2, 2]} \n                      tickCount={9}\n                      label={{ value: viewMode === 'function' ? 'f(x)' : 'f\\'(x)', angle: -90, position: 'insideLeft' }}\n                    />\n                    <Tooltip \n                      formatter={(value, name) => [value?.toFixed(4), activationFunctions[name]?.name || name]}\n                      labelFormatter={(label) => `x = ${label}`}\n                    />\n                    <Legend \n                      onClick={(e) => toggleFunction(e.dataKey)}\n                      wrapperStyle={{ paddingTop: '10px' }}\n                      formatter={(value, entry) => {\n                        const funcKey = entry.dataKey;\n                        return activationFunctions[funcKey]?.name || value;\n                      }}\n                    />\n                    {selectedFunctions.map(funcKey => (\n                      <Line\n                        key={funcKey}\n                        type=\"monotone\"\n                        dataKey={funcKey}\n                        stroke={activationFunctions[funcKey].color}\n                        dot={false}\n                        activeDot={{ r: 5 }}\n                      />\n                    ))}\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {Object.entries(activationFunctions).map(([key, func]) => (\n                    <button\n                      key={key}\n                      className={`px-3 py-1 text-sm rounded-md border transition-colors ${\n                        selectedFunctions.includes(key) \n                          ? 'bg-blue-500 text-white border-blue-500' \n                          : 'bg-white hover:bg-gray-50 border-gray-300'\n                      }`}\n                      onClick={() => toggleFunction(key)}\n                      style={{ \n                        borderColor: selectedFunctions.includes(key) ? undefined : func.color,\n                        color: selectedFunctions.includes(key) ? undefined : func.color \n                      }}\n                    >\n                      {func.name}\n                    </button>\n                  ))}\n                </div>\n                \n                {selectedFunctions.length === 1 && (\n                  <div className=\"mt-4 border rounded-lg shadow-sm\">\n                    <div className=\"p-3 border-b\">\n                      <h3 className=\"text-md font-medium\">{activationFunctions[selectedFunctions[0]].name}</h3>\n                    </div>\n                    <div className=\"p-4 text-sm\">\n                      <p className=\"font-mono mb-2\">{activationFunctions[selectedFunctions[0]].formula}</p>\n                      \n                      <div className=\"border-b mb-2\">\n                        <div className=\"flex space-x-2 mb-2\">\n                          <button \n                            className={`px-3 py-1 rounded-t-md ${activeTab === 'pros' ? 'bg-blue-100 border-b-2 border-blue-500' : 'hover:bg-gray-100'}`}\n                            onClick={() => setActiveTab('pros')}\n                          >\n                            Pros\n                          </button>\n                          <button \n                            className={`px-3 py-1 rounded-t-md ${activeTab === 'cons' ? 'bg-blue-100 border-b-2 border-blue-500' : 'hover:bg-gray-100'}`}\n                            onClick={() => setActiveTab('cons')}\n                          >\n                            Cons\n                          </button>\n                          <button \n                            className={`px-3 py-1 rounded-t-md ${activeTab === 'when' ? 'bg-blue-100 border-b-2 border-blue-500' : 'hover:bg-gray-100'}`}\n                            onClick={() => setActiveTab('when')}\n                          >\n                            When to Use\n                          </button>\n                        </div>\n                      </div>\n                      \n                      {activeTab === 'pros' && (\n                        <ul className=\"list-disc pl-4 space-y-1\">\n                          {activationFunctions[selectedFunctions[0]].pros.map((pro, idx) => (\n                            <li key={idx}>{pro}</li>\n                          ))}\n                        </ul>\n                      )}\n                      \n                      {activeTab === 'cons' && (\n                        <ul className=\"list-disc pl-4 space-y-1\">\n                          {activationFunctions[selectedFunctions[0]].cons.map((con, idx) => (\n                            <li key={idx}>{con}</li>\n                          ))}\n                        </ul>\n                      )}\n                      \n                      {activeTab === 'when' && (\n                        <ul className=\"list-disc pl-4 space-y-1\">\n                          {activationFunctions[selectedFunctions[0]].whenToUse.map((use, idx) => (\n                            <li key={idx}>{use}</li>\n                          ))}\n                        </ul>\n                      )}\n                    </div>\n                  </div>\n                )}\n                \n                {selectedFunctions.length !== 1 && (\n                  <div className=\"mt-4 p-4 border rounded-md bg-gray-50 text-center text-sm\">\n                    Select a single activation function to see detailed information.\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"pt-4\">\n              <h3 className=\"font-medium mb-4 text-center\">Activation Functions Comparison</h3>\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200 border\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r\">Function</th>\n                      <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r\">Range</th>\n                      <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r\">Key Pros</th>\n                      <th className=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Key Cons</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200 text-xs\">\n                    {Object.entries(activationFunctions).map(([key, func]) => \n                      renderFunctionTableRow(key, func)\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"w-full border rounded-lg shadow-sm p-4 bg-blue-50\">\n        <h3 className=\"font-medium mb-2\">Activation Functions Evolution Timeline</h3>\n        <div className=\"relative\">\n          {/* Timeline line */}\n          <div className=\"absolute left-1/2 transform -translate-x-1/2 h-full w-1 bg-blue-300\"></div>\n          \n          {/* Timeline entries */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            {/* 1940s-50s */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">1940s-50s</div>\n              <div>Linear & Step Functions</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>First neural networks used simple threshold/step functions</div>\n              <div className=\"text-gray-600 text-sm\">Problem: Not differentiable</div>\n            </div>\n            \n            {/* 1970s-80s */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">1970s-80s</div>\n              <div className=\"text-purple-700\">Sigmoid & Tanh</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>Smooth, differentiable activation functions</div>\n              <div className=\"text-gray-600 text-sm\">Problem: Vanishing gradient in deep networks</div>\n            </div>\n            \n            {/* 2010 */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">2010</div>\n              <div className=\"text-orange-500\">ReLU</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>Simplified, faster computation, no vanishing gradient for positive inputs</div>\n              <div className=\"text-gray-600 text-sm\">Problem: \"Dying ReLU\" - neurons can permanently die during training</div>\n            </div>\n            \n            {/* 2013 */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">2013</div>\n              <div className=\"text-orange-600\">Leaky ReLU</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>Allows small negative values (α*x) to prevent dying neurons</div>\n              <div className=\"text-gray-600 text-sm\">Problem: α hyperparameter needs tuning</div>\n            </div>\n            \n            {/* 2015 */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">2015</div>\n              <div className=\"text-orange-700\">PReLU</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>Makes the α parameter learnable rather than fixed</div>\n              <div className=\"text-gray-600 text-sm\">Problem: Additional parameters, can overfit</div>\n            </div>\n            \n            {/* 2015 */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">2015</div>\n              <div className=\"text-red-500\">ELU</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>Introduced by Clevert et al., smooth negative values with saturation</div>\n              <div className=\"text-gray-600 text-sm\">Problem: Computationally more expensive than ReLU</div>\n            </div>\n            \n            {/* 2016 */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">2016</div>\n              <div className=\"text-blue-500\">GELU</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>Combines properties from ReLU and dropout with probabilistic approach</div>\n              <div className=\"text-gray-600 text-sm\">Later adopted in transformers (BERT, GPT)</div>\n            </div>\n            \n            {/* 2017 */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">2017</div>\n              <div className=\"text-purple-500\">SELU</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>Introduced by Klambauer et al., self-normalizing neural networks</div>\n              <div className=\"text-gray-600 text-sm\">Designed to maintain normalized activations across layers</div>\n            </div>\n            \n            {/* 2017 */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">2017</div>\n              <div className=\"text-teal-500\">Swish</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>x * sigmoid(x), discovered through automated search</div>\n              <div className=\"text-gray-600 text-sm\">Similar to GELU with strong empirical performance</div>\n            </div>\n            \n            {/* Present */}\n            <div className=\"text-right pr-4 py-4\">\n              <div className=\"font-semibold\">Present</div>\n              <div>Task-specific choice</div>\n            </div>\n            <div className=\"pl-4 py-4\">\n              <div>Different functions excel in different contexts</div>\n              <div className=\"text-gray-600 text-sm\">ReLU variants for CNN, GELU/Swish for transformers</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ActivationFunctionsExplorer;\n","import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nconst LossFunctionsVisualization = () => {\n  // States for fixed parameters (no longer interactive)\n  const [huberDelta] = useState(0.30);\n  const [marginValue] = useState(0.40);\n  const [activeTab, setActiveTab] = useState('plots');\n  \n  // Generate data points for visualizations\n  const generateData = () => {\n    const data = [];\n    // Create data points from -0.2 to 1.2 to show behavior around valid range\n    for (let i = -0.2; i <= 1.2; i += 0.02) {\n      const point = {\n        x: i,\n        // Different loss functions for target=1\n        mse: Math.pow(i - 1, 2),\n        mae: Math.abs(i - 1),\n        binaryCrossEntropy: -(1 * Math.log(Math.max(i, 0.001)) + 0 * Math.log(Math.max(1 - i, 0.001))),\n        huber: i < 1 - huberDelta/2 ? \n               huberDelta * (Math.abs(i - 1) - huberDelta/2) : \n               Math.pow(i - 1, 2) / 2,\n        hinge: Math.max(0, marginValue - i * 1)\n      };\n      data.push(point);\n    }\n    return data;\n  };\n\n  // Generate comparison data for different target values\n  const generateComparisonData = () => {\n    return [\n      { name: \"Perfect Match (y=1, ŷ=1)\", mse: 0, bce: 0, mae: 0, huber: 0, hinge: 0 },\n      { name: \"Slight Error (y=1, ŷ=0.8)\", mse: 0.04, bce: 0.22, mae: 0.2, huber: 0.02, hinge: 0.2 },\n      { name: \"Medium Error (y=1, ŷ=0.5)\", mse: 0.25, bce: 0.69, mae: 0.5, huber: 0.125, hinge: 0.5 },\n      { name: \"Large Error (y=1, ŷ=0.2)\", mse: 0.64, bce: 1.61, mae: 0.8, huber: 0.32, hinge: 0.8 },\n      { name: \"Complete Error (y=1, ŷ=0)\", mse: 1, bce: 15, mae: 1, huber: 0.5, hinge: 1 },\n    ];\n  };\n\n  const [data, setData] = useState(generateData());\n  const [comparisonData, setComparisonData] = useState(generateComparisonData());\n\n  // Update data when parameters change\n  useEffect(() => {\n    setData(generateData());\n  }, []);\n\n  const lossFunctionInfo = {\n    mse: {\n      name: \"Mean Squared Error (MSE)\",\n      formula: \"MSE = (y - ŷ)²\",\n      description: \"Measures the average squared difference between predictions and actual values.\",\n      pros: [\n        \"Differentiable everywhere\",\n        \"Penalizes larger errors more heavily\",\n        \"Mathematically convenient for optimization\"\n      ],\n      cons: [\n        \"Very sensitive to outliers\",\n        \"Can lead to slow convergence if features are on different scales\",\n        \"Not ideal for classification tasks\"\n      ],\n      use: \"Regression problems where outliers are rare and error distribution is expected to be Gaussian.\"\n    },\n    binaryCrossEntropy: {\n      name: \"Binary Cross-Entropy Loss\",\n      formula: \"BCE = -[y·log(ŷ) + (1-y)·log(1-ŷ)]\",\n      description: \"Measures the performance of a classification model whose output is a probability value between 0 and 1.\",\n      pros: [\n        \"Well-suited for binary classification\",\n        \"Works well with probabilistic outputs\",\n        \"Penalizes confident wrong predictions heavily\"\n      ],\n      cons: [\n        \"Not suitable for regression tasks\",\n        \"Can lead to numerical instability with predictions near 0 or 1\",\n        \"More computationally intensive than MSE\"\n      ],\n      use: \"Binary classification problems where output represents probability.\"\n    },\n    mae: {\n      name: \"Mean Absolute Error (MAE)\",\n      formula: \"MAE = |y - ŷ|\",\n      description: \"Measures the average absolute difference between predictions and actual values.\",\n      pros: [\n        \"More robust to outliers than MSE\",\n        \"Provides uniform gradient\",\n        \"Easier to interpret than MSE\"\n      ],\n      cons: [\n        \"Not differentiable at y = ŷ\",\n        \"Doesn't penalize large errors as heavily as MSE\",\n        \"May converge slower than MSE in some cases\"\n      ],\n      use: \"Regression problems where outliers need to be handled better.\"\n    },\n    huber: {\n      name: \"Huber Loss\",\n      formula: \"L = 0.5(y-ŷ)² if |y-ŷ| ≤ δ, else δ(|y-ŷ| - 0.5δ)\",\n      description: \"Combines MSE and MAE, behaving like MSE for small errors and MAE for large errors.\",\n      pros: [\n        \"Robust to outliers like MAE\",\n        \"Differentiable everywhere unlike MAE\",\n        \"Adaptable based on the delta parameter\"\n      ],\n      cons: [\n        \"Requires tuning of the delta hyperparameter\",\n        \"More complex to implement\",\n        \"Computationally more expensive than simpler losses\"\n      ],\n      use: \"Regression problems where some outliers are expected but differentiability is needed.\"\n    },\n    hinge: {\n      name: \"Hinge Loss\",\n      formula: \"L = max(0, margin - y·ŷ)\",\n      description: \"Measures how well a model separates classes with a margin, commonly used in SVMs.\",\n      pros: [\n        \"Encourages maximum-margin classification\",\n        \"Good for binary classification tasks\",\n        \"Can lead to sparse support vectors\"\n      ],\n      cons: [\n        \"Not differentiable at the hinge point\",\n        \"Doesn't provide probability outputs\",\n        \"Less commonly used in deep learning\"\n      ],\n      use: \"Margin-based classification problems, especially when using SVMs or when a clear decision boundary is needed.\"\n    }\n  };\n\n  // Styles for custom tabs and card components\n  const styles = {\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '1rem',\n      padding: '1rem',\n      maxWidth: '1200px',\n      margin: '0 auto',\n      fontFamily: 'system-ui, -apple-system, sans-serif'\n    },\n    title: {\n      fontSize: '1.5rem',\n      fontWeight: 'bold',\n      textAlign: 'center',\n      marginBottom: '1rem'\n    },\n    tabList: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(3, 1fr)',\n      gap: '0.5rem',\n      marginBottom: '1rem'\n    },\n    tabButton: (isActive) => ({\n      padding: '0.5rem 1rem',\n      border: '1px solid #ccc',\n      borderRadius: '0.25rem',\n      background: isActive ? '#4f46e5' : '#fff',\n      color: isActive ? '#fff' : '#333',\n      cursor: 'pointer',\n      fontSize: '0.875rem',\n      fontWeight: isActive ? 'bold' : 'normal'\n    }),\n    card: {\n      border: '1px solid #e5e7eb',\n      borderRadius: '0.5rem',\n      overflow: 'hidden',\n      marginBottom: '1rem',\n      background: '#fff',\n      boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)'\n    },\n    cardHeader: {\n      padding: '1rem',\n      borderBottom: '1px solid #e5e7eb',\n      background: '#f9fafb'\n    },\n    cardTitle: {\n      fontSize: '1.25rem',\n      fontWeight: 'bold',\n      margin: 0\n    },\n    cardDescription: {\n      fontSize: '0.875rem',\n      color: '#6b7280',\n      marginTop: '0.25rem'\n    },\n    cardContent: {\n      padding: '1rem'\n    },\n    cardFooter: {\n      padding: '1rem',\n      borderTop: '1px solid #e5e7eb',\n      background: '#f9fafb'\n    },\n    sliderContainer: {\n      marginBottom: '1rem'\n    },\n    sliderLabel: {\n      display: 'block',\n      fontSize: '0.875rem',\n      fontWeight: '500',\n      marginBottom: '0.5rem'\n    },\n    slider: {\n      width: '100%',\n      marginTop: '0.5rem'\n    },\n    grid: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(1, 1fr)',\n      gap: '1rem',\n      marginBottom: '1rem'\n    },\n    gridMd2: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(1, 1fr)',\n      gap: '1rem',\n      marginBottom: '1rem',\n      '@media (min-width: 768px)': {\n        gridTemplateColumns: 'repeat(2, 1fr)'\n      }\n    },\n    spacerY: {\n      marginTop: '1.5rem',\n      marginBottom: '1.5rem'\n    },\n    listItem: {\n      marginLeft: '1.5rem',\n      position: 'relative',\n      paddingLeft: '0.5rem'\n    },\n    infoBox: {\n      padding: '1rem',\n      borderRadius: '0.375rem',\n      marginBottom: '1rem'\n    },\n    blueBox: {\n      background: '#ebf5ff',\n    },\n    greenBox: {\n      background: '#f0fdf4',\n    },\n    grayBox: {\n      background: '#f9fafb',\n    },\n    yellowBox: {\n      background: '#fffbeb',\n    },\n    sectionHeading: {\n      fontSize: '1.125rem',\n      fontWeight: '500',\n      marginBottom: '0.5rem',\n      color: '#1f2937'\n    },\n    sectionHeadingBlue: {\n      color: '#1e40af'\n    },\n    sectionHeadingGreen: {\n      color: '#15803d'\n    },\n    sectionHeadingYellow: {\n      color: '#92400e'\n    },\n    table: {\n      minWidth: '100%',\n      borderCollapse: 'separate',\n      borderSpacing: 0\n    },\n    th: {\n      padding: '0.5rem 1rem',\n      textAlign: 'left',\n      fontSize: '0.875rem',\n      fontWeight: '500',\n      background: '#f9fafb',\n      borderBottom: '1px solid #e5e7eb'\n    },\n    td: {\n      padding: '0.5rem 1rem',\n      borderBottom: '1px solid #e5e7eb',\n      fontSize: '0.875rem'\n    },\n    chartContainer: {\n      height: '16rem'\n    }\n  };\n\n  // Apply media query for grid\n  useEffect(() => {\n    const handleResize = () => {\n      const gridElements = document.querySelectorAll('.grid-md-2');\n      gridElements.forEach(element => {\n        if (window.innerWidth >= 768) {\n          element.style.gridTemplateColumns = 'repeat(2, 1fr)';\n        } else {\n          element.style.gridTemplateColumns = 'repeat(1, 1fr)';\n        }\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n    handleResize(); // Initial check\n    \n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <div style={styles.container}>\n      <h1 style={styles.title}>Neural Network Loss Functions Visualization</h1>\n      \n      {/* Custom Tabs */}\n      <div style={styles.tabList}>\n        <button \n          style={styles.tabButton(activeTab === 'plots')}\n          onClick={() => setActiveTab('plots')}\n        >\n          Loss Function Plots\n        </button>\n        <button \n          style={styles.tabButton(activeTab === 'fundamentals')}\n          onClick={() => setActiveTab('fundamentals')}\n        >\n          Why Different Loss Functions\n        </button>\n        <button \n          style={styles.tabButton(activeTab === 'details')}\n          onClick={() => setActiveTab('details')}\n        >\n          Detailed Explanations\n        </button>\n      </div>\n      \n      {/* Plots Tab */}\n      {activeTab === 'plots' && (\n        <div style={styles.grid}>\n          <div className=\"grid-md-2\" style={{display: 'grid', gridTemplateColumns: 'repeat(1, 1fr)', gap: '1rem'}}>\n            <div style={styles.card}>\n              <div style={styles.cardHeader}>\n                <div style={styles.cardTitle}>Regression Loss Functions</div>\n                <div style={styles.cardDescription}>MSE, MAE, and Huber Loss</div>\n              </div>\n              <div style={styles.cardContent}>\n                <div style={styles.chartContainer}>\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={data}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis \n                        dataKey=\"x\" \n                        label={{ value: 'Predicted Value', position: 'insideBottom', offset: -5 }} \n                        domain={[0, 1]}\n                      />\n                      <YAxis \n                        label={{ value: 'Loss', angle: -90, position: 'insideLeft' }} \n                        domain={[0, 1.5]}\n                      />\n                      <Tooltip \n                        formatter={(value, name) => [value.toFixed(3), name === 'mse' ? 'MSE' : name === 'mae' ? 'MAE' : 'Huber']}\n                        labelFormatter={(value) => `Prediction: ${parseFloat(value).toFixed(2)}`}\n                      />\n                      <Legend />\n                      <Line type=\"monotone\" dataKey=\"mse\" stroke=\"#8884d8\" name=\"MSE\" dot={false} />\n                      <Line type=\"monotone\" dataKey=\"mae\" stroke=\"#82ca9d\" name=\"MAE\" dot={false} />\n                      <Line type=\"monotone\" dataKey=\"huber\" stroke=\"#ff7300\" name=\"Huber\" dot={false} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n            </div>\n            \n            <div style={styles.card}>\n              <div style={styles.cardHeader}>\n                <div style={styles.cardTitle}>Classification Loss Functions</div>\n                <div style={styles.cardDescription}>Binary Cross-Entropy and Hinge Loss</div>\n              </div>\n              <div style={styles.cardContent}>\n                <div style={styles.chartContainer}>\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart data={data}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis \n                        dataKey=\"x\" \n                        label={{ value: 'Predicted Value', position: 'insideBottom', offset: -5 }} \n                        domain={[0, 1]}\n                      />\n                      <YAxis \n                        label={{ value: 'Loss', angle: -90, position: 'insideLeft' }} \n                        domain={[0, 5]}\n                      />\n                      <Tooltip \n                        formatter={(value, name) => [value.toFixed(3), name === 'binaryCrossEntropy' ? 'BCE' : 'Hinge']}\n                        labelFormatter={(value) => `Prediction: ${parseFloat(value).toFixed(2)}`}\n                      />\n                      <Legend />\n                      <Line type=\"monotone\" dataKey=\"binaryCrossEntropy\" stroke=\"#8884d8\" name=\"Binary Cross-Entropy\" dot={false} />\n                      <Line type=\"monotone\" dataKey=\"hinge\" stroke=\"#82ca9d\" name=\"Hinge Loss\" dot={false} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Fundamentals Tab */}\n      {activeTab === 'fundamentals' && (\n        <div style={styles.grid}>\n          <div style={styles.card}>\n            <div style={styles.cardHeader}>\n              <div style={styles.cardTitle}>Why Regression and Classification Need Different Loss Functions</div>\n              <div style={styles.cardDescription}>Understanding the fundamental differences in simple terms</div>\n            </div>\n            <div style={styles.cardContent}>\n              <div className=\"grid-md-2\" style={{display: 'grid', gridTemplateColumns: 'repeat(1, 1fr)', gap: '1rem', marginBottom: '1.5rem'}}>\n                <div style={{...styles.infoBox, ...styles.blueBox}}>\n                  <h3 style={{...styles.sectionHeading, ...styles.sectionHeadingBlue}}>Regression Tasks</h3>\n                  <p style={{marginBottom: '0.5rem'}}>Imagine you're trying to predict house prices or tomorrow's temperature.</p>\n                  <p style={{marginBottom: '0.5rem'}}><strong>What's being predicted:</strong> Continuous numbers (like $350,000 or 72°F)</p>\n                  <p style={{marginBottom: '0.5rem'}}><strong>How errors are measured:</strong> By the distance between prediction and actual value</p>\n                  <p><strong>Real-world analogy:</strong> Like measuring how far your arrow landed from the bullseye</p>\n                </div>\n                \n                <div style={{...styles.infoBox, ...styles.greenBox}}>\n                  <h3 style={{...styles.sectionHeading, ...styles.sectionHeadingGreen}}>Classification Tasks</h3>\n                  <p style={{marginBottom: '0.5rem'}}>Imagine you're trying to identify spam emails or diagnose a disease.</p>\n                  <p style={{marginBottom: '0.5rem'}}><strong>What's being predicted:</strong> Categories or classes (like \"spam/not spam\" or \"cat/dog\")</p>\n                  <p style={{marginBottom: '0.5rem'}}><strong>How errors are measured:</strong> By whether the prediction is right or wrong, and how confident you were</p>\n                  <p><strong>Real-world analogy:</strong> Like betting on a horse race - you either win or lose, and it matters how much you bet</p>\n                </div>\n              </div>\n              \n              <div style={styles.spacerY}>\n                <h3 style={styles.sectionHeading}>Why They Need Different Loss Functions</h3>\n                \n                <div style={{display: 'flex', flexDirection: 'column', gap: '1rem'}}>\n                  <div style={{...styles.infoBox, ...styles.grayBox}}>\n                    <h4 style={{fontWeight: '500', color: '#374151', marginBottom: '0.25rem'}}>Different Types of Errors</h4>\n                    <p>In regression, being off by 10 or by 100 matters (different magnitudes of error). In classification, you're either right or wrong, but your confidence level matters.</p>\n                  </div>\n                  \n                  <div style={{...styles.infoBox, ...styles.grayBox}}>\n                    <h4 style={{fontWeight: '500', color: '#374151', marginBottom: '0.25rem'}}>Different Learning Behaviors</h4>\n                    <p>Regression loss functions guide the model to find the \"shortest path\" to the correct value. Classification loss functions push the model to draw clear boundaries between categories.</p>\n                  </div>\n                  \n                  <div style={{...styles.infoBox, ...styles.grayBox}}>\n                    <h4 style={{fontWeight: '500', color: '#374151', marginBottom: '0.25rem'}}>Different Output Ranges</h4>\n                    <p>Regression outputs can be any number (even negative). Classification often outputs probabilities (0-1) or scores, requiring special handling.</p>\n                  </div>\n                  \n                  <div style={{...styles.infoBox, ...styles.yellowBox}}>\n                    <h4 style={{...styles.sectionHeading, ...styles.sectionHeadingYellow, marginBottom: '0.25rem'}}>Why Cross-Entropy is Perfect for Classification</h4>\n                    <p style={{marginBottom: '0.5rem'}}>Cross-Entropy Loss has special properties that make it ideal for classification tasks:</p>\n                    <ul style={{paddingLeft: '1.5rem', marginBottom: '0.5rem'}}>\n                      <li style={{marginBottom: '0.25rem'}}>It measures the difference between probability distributions (your prediction vs. the truth)</li>\n                      <li style={{marginBottom: '0.25rem'}}>It severely punishes confident wrong predictions (like being 99% sure an email is not spam when it actually is)</li>\n                      <li style={{marginBottom: '0.25rem'}}>It works naturally with the probability outputs (0-1) that classification models produce</li>\n                      <li style={{marginBottom: '0.25rem'}}>It has favorable gradient properties when used with sigmoid/softmax functions</li>\n                    </ul>\n                    <p style={{marginTop: '0.5rem'}}><strong>Real-world analogy:</strong> It's like a teacher who doesn't mind if you're unsure and get something wrong, but severely penalizes you when you confidently assert an incorrect answer.</p>\n                  </div>\n                  \n                  <div style={{...styles.infoBox, ...styles.grayBox}}>\n                    <h4 style={{fontWeight: '500', color: '#374151', marginBottom: '0.25rem'}}>Real-World Example: Weather Prediction</h4>\n                    <p><strong>Regression task:</strong> Predicting tomorrow's temperature (72°F, 73°F, etc.)<br />\n                    <strong>Classification task:</strong> Predicting if it will rain (Yes/No)</p>\n                    <p>The temperature prediction needs MSE/MAE to measure \"how far off\" you were.<br />\n                    The rain prediction needs Cross-Entropy to penalize confident wrong predictions (like confidently saying \"no rain\" right before a downpour).</p>\n                  </div>\n                </div>\n              </div>\n              \n              <div style={styles.spacerY}>\n                <h3 style={styles.sectionHeading}>Choosing the Right Loss Function</h3>\n                <div style={{overflowX: 'auto'}}>\n                  <table style={styles.table}>\n                    <thead>\n                      <tr>\n                        <th style={styles.th}>If your task is...</th>\n                        <th style={styles.th}>And you care about...</th>\n                        <th style={styles.th}>Consider using...</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td style={styles.td}>Regression</td>\n                        <td style={styles.td}>Penalizing large errors more</td>\n                        <td style={styles.td}>Mean Squared Error (MSE)</td>\n                      </tr>\n                      <tr style={{background: '#f9fafb'}}>\n                        <td style={styles.td}>Regression</td>\n                        <td style={styles.td}>Being robust to outliers</td>\n                        <td style={styles.td}>Mean Absolute Error (MAE)</td>\n                      </tr>\n                      <tr>\n                        <td style={styles.td}>Regression</td>\n                        <td style={styles.td}>Balance between MSE and MAE</td>\n                        <td style={styles.td}>Huber Loss</td>\n                      </tr>\n                      <tr style={{background: '#f9fafb'}}>\n                        <td style={styles.td}>Binary Classification</td>\n                        <td style={styles.td}>Probability outputs (0-1)</td>\n                        <td style={styles.td}>Binary Cross-Entropy</td>\n                      </tr>\n                      <tr>\n                        <td style={styles.td}>Multi-class Classification</td>\n                        <td style={styles.td}>Probability distribution across classes</td>\n                        <td style={styles.td}>Categorical Cross-Entropy</td>\n                      </tr>\n                      <tr style={{background: '#f9fafb'}}>\n                        <td style={styles.td}>Classification</td>\n                        <td style={styles.td}>Clear decision boundaries</td>\n                        <td style={styles.td}>Hinge Loss</td>\n                      </tr>\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Details Tab */}\n      {activeTab === 'details' && (\n        <div style={styles.grid}>\n          {Object.entries(lossFunctionInfo).map(([key, info]) => (\n            <div key={key} style={styles.card}>\n              <div style={styles.cardHeader}>\n                <div style={styles.cardTitle}>{info.name}</div>\n                <div style={{...styles.cardDescription, fontFamily: 'monospace'}}>{info.formula}</div>\n              </div>\n              <div style={styles.cardContent}>\n                <p style={{marginBottom: '1rem'}}>{info.description}</p>\n                \n                <div className=\"grid-md-2\" style={{display: 'grid', gridTemplateColumns: 'repeat(1, 1fr)', gap: '1rem'}}>\n                  <div>\n                    <h3 style={{fontWeight: '500', marginBottom: '0.5rem'}}>Pros:</h3>\n                    <ul style={{paddingLeft: '1.5rem'}}>\n                      {info.pros.map((pro, i) => (\n                        <li key={i} style={{marginBottom: '0.25rem'}}>{pro}</li>\n                      ))}\n                    </ul>\n                  </div>\n                  <div>\n                    <h3 style={{fontWeight: '500', marginBottom: '0.5rem'}}>Cons:</h3>\n                    <ul style={{paddingLeft: '1.5rem'}}>\n                      {info.cons.map((con, i) => (\n                        <li key={i} style={{marginBottom: '0.25rem'}}>{con}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n              <div style={styles.cardFooter}>\n                <p><strong>Best used for:</strong> {info.use}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LossFunctionsVisualization;\n","import React, { useState } from 'react';\n\nconst RegularizationViz = () => {\n  // Example data for visualizations\n  const weights = [\n    {name: 'Feature1', noReg: 8, l1: 0, l2: 2},\n    {name: 'Feature2', noReg: -6, l1: 0, l2: -1.5},\n    {name: 'Feature3', noReg: 5, l1: 2, l2: 1.2},\n    {name: 'Feature4', noReg: 7, l1: 3, l2: 1.8},\n    {name: 'Feature5', noReg: -4, l1: -2, l2: -1},\n    {name: 'Feature6', noReg: 0.5, l1: 0, l2: 0.1},\n  ];\n  \n  // Simulated network activations\n  const activationMatrix = [\n    // Original activations\n    [5.2, -4.8, 0.2, 2.3, -0.9],\n    [6.1, -5.2, 0.1, 2.1, -1.1],\n    [4.9, -4.5, 0.3, 2.5, -0.8],\n    [5.5, -5.0, 0.2, 2.2, -1.0],\n    \n    // After Batch Norm\n    [0.8, -0.9, 0.7, 0.5, -0.6],\n    [1.0, -1.0, -0.5, 0.2, 1.1],\n    [0.2, -0.7, 1.5, 0.9, -0.8],\n    [0.9, -0.8, 0.2, 0.3, -0.9],\n    \n    // After Layer Norm\n    [1.2, -1.1, -0.2, 0.7, -0.6],\n    [1.3, -1.2, -0.4, 0.5, -0.8],\n    [1.0, -0.9, -0.1, 0.8, -0.5],\n    [1.1, -1.0, -0.3, 0.6, -0.7]\n  ];\n  \n  // Get color for activation values\n  const getColor = (value) => {\n    const normalized = Math.max(-2, Math.min(2, value)); \n    \n    if (normalized < 0) {\n      const intensity = Math.min(255, Math.round(Math.abs(normalized) * 127));\n      return `rgb(0,0,${intensity + 127})`;\n    } else {\n      const intensity = Math.min(255, Math.round(normalized * 127));\n      return `rgb(${intensity + 127},0,0)`;\n    }\n  };\n  \n  // Styles for components - using inline styles like the example\n  const styles = {\n    container: {\n      padding: '1.5rem',\n      backgroundColor: '#f9fafb',\n      borderRadius: '0.5rem',\n      maxWidth: '100%',\n      margin: '0 auto',\n      fontFamily: 'system-ui, -apple-system, sans-serif'\n    },\n    heading: {\n      fontSize: '1.5rem',\n      fontWeight: 'bold',\n      textAlign: 'center',\n      marginBottom: '1.5rem'\n    },\n    subheading: {\n      fontSize: '1.25rem',\n      fontWeight: 'bold',\n      textAlign: 'center',\n      marginBottom: '1rem'\n    },\n    infoBox: {\n      marginBottom: '1rem',\n      padding: '0.75rem',\n      backgroundColor: '#fff9e5',\n      border: '1px solid #ffe58f',\n      borderRadius: '0.25rem'\n    },\n    gridContainer: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(1, 1fr)',\n      gap: '1.5rem',\n      marginBottom: '1.5rem',\n      '@media (min-width: 1024px)': {\n        gridTemplateColumns: 'repeat(2, 1fr)'\n      }\n    },\n    card: {\n      backgroundColor: 'white',\n      borderRadius: '0.375rem',\n      boxShadow: '0 1px 3px rgba(0, 0, 0, 0.1)',\n      overflow: 'hidden'\n    },\n    cardHeader: {\n      padding: '1rem',\n      backgroundColor: 'white',\n      borderBottom: '1px solid #e5e7eb'\n    },\n    cardContent: {\n      padding: '1rem'\n    },\n    visualizationContainer: {\n      position: 'relative',\n      height: '14rem',\n      width: '100%',\n      border: '1px solid #e5e7eb',\n      marginTop: '2rem',\n      marginBottom: '2rem',\n      overflow: 'visible'\n    },\n    xAxisLabel: {\n      position: 'absolute',\n      bottom: '-30px',\n      width: '100%',\n      textAlign: 'center',\n      fontSize: '0.875rem',\n      fontWeight: 'bold',\n      color: '#4b5563'\n    },\n    yAxisLabel: {\n      position: 'absolute',\n      left: '-25px',\n      top: '50%',\n      transform: 'translateY(-50%) rotate(-90deg)',\n      fontSize: '0.875rem',\n      fontWeight: 'bold',\n      color: '#4b5563'\n    },\n    yAxisTicks: {\n      position: 'absolute',\n      left: '-10px',\n      top: '0',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      fontSize: '0.75rem',\n      color: '#6b7280'\n    },\n    barsContainer: {\n      position: 'absolute',\n      inset: '0',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-around'\n    },\n    barGroup: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      width: '40px'\n    },\n    bar: (color, height, isPositive) => ({\n      width: '16px',\n      height: `${height}px`,\n      backgroundColor: color,\n      marginBottom: '4px',\n      marginTop: isPositive ? '0' : 'auto',\n      marginBottom: isPositive ? 'auto' : '0'\n    }),\n    barLabel: {\n      marginTop: '8px',\n      fontSize: '0.75rem',\n      fontWeight: '500',\n      textAlign: 'center'\n    },\n    legend: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginBottom: '0.75rem'\n    },\n    legendItem: {\n      display: 'flex',\n      alignItems: 'center',\n      marginRight: '1rem'\n    },\n    legendColor: (color) => ({\n      width: '16px',\n      height: '16px',\n      backgroundColor: color,\n      borderRadius: '9999px',\n      marginRight: '8px'\n    }),\n    legendText: {\n      fontSize: '0.875rem'\n    },\n    infoGrid: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(2, 1fr)',\n      gap: '1rem',\n      marginTop: '2rem'\n    },\n    infoCard: (color) => ({\n      padding: '0.75rem',\n      backgroundColor: color,\n      borderRadius: '0.25rem'\n    }),\n    infoTitle: (color) => ({\n      fontWeight: 'bold',\n      fontSize: '0.875rem',\n      color: color,\n      marginBottom: '0.25rem'\n    }),\n    infoText: {\n      fontSize: '0.875rem',\n      marginBottom: '0.25rem'\n    },\n    infoBold: {\n      fontSize: '0.75rem',\n      fontWeight: 'bold',\n      marginTop: '0.25rem' \n    },\n    infoItalic: {\n      fontSize: '0.75rem',\n      fontStyle: 'italic',\n      marginTop: '0.25rem'\n    },\n    activationGrid: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(3, 1fr)',\n      gap: '0.5rem',\n      marginBottom: '1.5rem'\n    },\n    activationBox: {\n      textAlign: 'center'\n    },\n    activationTitle: {\n      fontSize: '0.875rem',\n      fontWeight: 'bold',\n      marginBottom: '0.5rem'\n    },\n    matrixContainer: {\n      display: 'flex',\n      marginBottom: '0.5rem',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    matrixLabel: {\n      transform: 'rotate(90deg)',\n      fontSize: '0.75rem',\n      fontWeight: 'bold',\n      marginRight: '0.25rem',\n      flexShrink: '0',\n      position: 'relative',\n      width: '20px',\n      marginLeft: '-10px'\n    },\n    matrixLabelText: {\n      position: 'absolute',\n      transform: 'translateX(-50%)',\n      whiteSpace: 'nowrap',\n      top: '40px'\n    },\n    matrixContent: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    matrixHeader: {\n      fontSize: '0.75rem',\n      fontWeight: 'bold',\n      marginBottom: '0.25rem',\n      textAlign: 'center'\n    },\n    matrixGrid: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(5, 1fr)',\n      gap: '2px',\n      padding: '0.25rem',\n      backgroundColor: '#f3f4f6',\n      borderRadius: '0.25rem',\n      margin: '0 auto'\n    },\n    matrixCell: (bgColor, textColor) => ({\n      width: '24px',\n      height: '24px',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: '0.75rem',\n      borderRadius: '0.25rem',\n      backgroundColor: bgColor,\n      color: textColor\n    }),\n    matrixDesc: {\n      fontSize: '0.75rem',\n      marginTop: '0.25rem'\n    },\n    arrowContainer: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: '0.25rem'\n    },\n    architectureBox: {\n      position: 'relative',\n      padding: '1rem',\n      borderRadius: '0.25rem',\n      marginBottom: '1.5rem'\n    },\n    architectureTitle: {\n      fontWeight: 'bold',\n      textAlign: 'center',\n      marginBottom: '1.5rem'\n    },\n    architectureDiagram: {\n      position: 'relative',\n      margin: '0 auto',\n      width: '95%',\n      height: '180px'\n    },\n    diagramBg: {\n      position: 'absolute',\n      inset: '0',\n      backgroundColor: 'white',\n      borderRadius: '0.5rem',\n      boxShadow: 'inset 0 2px 4px rgba(0, 0, 0, 0.05)'\n    },\n    layersContainer: {\n      position: 'absolute',\n      inset: '0',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      paddingLeft: '1rem',\n      paddingRight: '1rem'\n    },\n    layer: (bgColor, height) => ({\n      width: '56px',\n      height: height,\n      backgroundColor: bgColor,\n      borderRadius: '0.25rem',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: '0.75rem'\n    }),\n    layerStack: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    weightDecayMarker: {\n      position: 'absolute',\n      bottom: '-25px',\n      left: '0',\n      right: '0',\n      textAlign: 'center'\n    },\n    weightDecayBox: {\n      display: 'inline-block',\n      backgroundColor: '#fee2e2',\n      padding: '0.5rem',\n      borderRadius: '0.25rem',\n      border: '1px solid #fca5a5',\n      fontSize: '0.75rem',\n      fontWeight: 'bold'\n    },\n    techSpecs: {\n      marginTop: '2.5rem',\n      fontSize: '0.75rem',\n      padding: '0.5rem',\n      borderRadius: '0.25rem'\n    },\n    pointsContainer: {\n      padding: '1rem',\n      backgroundColor: '#fffbeb',\n      borderRadius: '0.25rem',\n      border: '1px solid #fde68a',\n      marginTop: '1rem'\n    },\n    pointsTitle: {\n      fontWeight: 'bold',\n      textAlign: 'center',\n      marginBottom: '0.75rem',\n      fontSize: '1rem'\n    },\n    reasonsGrid: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(1, 1fr)',\n      gap: '1rem',\n      marginTop: '0.5rem',\n      '@media (min-width: 768px)': {\n        gridTemplateColumns: 'repeat(2, 1fr)'\n      }\n    },\n    reasonItem: {\n      display: 'flex',\n      alignItems: 'start'\n    },\n    reasonNumber: {\n      flexShrink: '0',\n      width: '32px',\n      height: '32px',\n      backgroundColor: (color) => color,\n      borderRadius: '9999px',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginRight: '0.5rem',\n      fontWeight: 'bold'\n    },\n    reasonText: {\n      fontSize: '0.875rem'\n    },\n    codeContainer: {\n      padding: '1rem',\n      backgroundColor: '#f3f4f6',\n      borderRadius: '0.25rem',\n      border: '1px solid #d1d5db',\n      marginTop: '1rem'\n    },\n    codeTitle: {\n      fontWeight: 'bold',\n      textAlign: 'center',\n      marginBottom: '0.75rem'\n    },\n    codeGrid: {\n      display: 'grid',\n      gridTemplateColumns: 'repeat(1, 1fr)',\n      gap: '1rem',\n      marginTop: '0.5rem',\n      '@media (min-width: 768px)': {\n        gridTemplateColumns: 'repeat(2, 1fr)'\n      }\n    },\n    codeBlock: {\n      backgroundColor: '#111827',\n      borderRadius: '0.25rem',\n      padding: '0.75rem',\n      color: '#34d399',\n      fontFamily: 'monospace',\n      fontSize: '0.75rem',\n      overflow: 'auto',\n      maxHeight: '200px'\n    },\n    codeAnalysis: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center'\n    },\n    analysisTitle: {\n      fontWeight: 'bold',\n      fontSize: '0.875rem',\n      marginBottom: '0.25rem'\n    },\n    analysisList: {\n      listStyleType: 'disc',\n      paddingLeft: '1.25rem',\n      fontSize: '0.875rem'\n    },\n    analysisItem: {\n      marginBottom: '0.25rem'\n    },\n    codeHighlight: (bgColor) => ({\n      fontFamily: 'monospace',\n      backgroundColor: bgColor,\n      padding: '0 0.25rem'\n    }),\n    analysisBox: {\n      padding: '0.5rem',\n      backgroundColor: 'white',\n      borderRadius: '0.25rem',\n      boxShadow: 'inset 0 2px 4px rgba(0, 0, 0, 0.05)',\n      marginTop: '0.5rem'\n    },\n    analysisText: {\n      fontSize: '0.75rem'\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      <h2 style={styles.heading}>Regularization and Normalization: Core Comparison</h2>\n      \n      <div style={styles.infoBox}>\n        <h3 style={styles.subheading}>Understanding the Visualizations</h3>\n        <div style={styles.gridContainer}>\n          <div style={{ padding: '0.5rem' }}>\n            <p><span style={{ fontWeight: 'bold' }}>Weight Regularization Chart</span>: Each set of bars shows the weight value for a specific feature, demonstrating how different regularization methods affect weight magnitudes.</p>\n          </div>\n          <div style={{ padding: '0.5rem' }}>\n            <p><span style={{ fontWeight: 'bold' }}>Activation Normalization Chart</span>: The three matrices represent different normalization methods, where each row is a sample and each column is a neuron, with colors and values showing activation strength.</p>\n          </div>\n        </div>\n      </div>\n      \n      <div style={styles.gridContainer}>\n        {/* L1 vs L2 Regularization Section */}\n        <div style={styles.card}>\n          <div style={styles.cardHeader}>\n            <h4 style={styles.subheading}>Weight Regularization: L1 vs L2</h4>\n          </div>\n          \n          <div style={styles.cardContent}>\n            <div style={styles.legend}>\n              <div style={styles.legendItem}>\n                <div style={styles.legendColor('#a855f7')}></div>\n                <span style={styles.legendText}>No Regularization</span>\n              </div>\n              <div style={styles.legendItem}>\n                <div style={styles.legendColor('#22c55e')}></div>\n                <span style={styles.legendText}>L1 Regularization</span>\n              </div>\n              <div style={styles.legendItem}>\n                <div style={styles.legendColor('#3b82f6')}></div>\n                <span style={styles.legendText}>L2 Regularization</span>\n              </div>\n            </div>\n            \n            {/* Weight visualization */}\n            <div style={styles.visualizationContainer}>\n              {/* Y-axis label */}\n              <div style={styles.yAxisLabel}>\n                Weight Value\n              </div>\n              \n              {/* Y-axis */}\n              <div style={styles.yAxisTicks}>\n                <span>8</span>\n                <span>4</span>\n                <span>0</span>\n                <span>-4</span>\n                <span>-8</span>\n              </div>\n              \n              {/* X-axis label */}\n              <div style={styles.xAxisLabel}>\n                Model Features/Neural Network Weights\n              </div>\n              \n              {/* Weight bars */}\n              <div style={styles.barsContainer}>\n                {weights.map((item, index) => (\n                  <div key={index} style={styles.barGroup}>\n                    {/* No regularization */}\n                    <div \n                      style={styles.bar('#a855f7', Math.abs(item.noReg) * 5, item.noReg >= 0)}\n                    ></div>\n                    \n                    {/* L1 regularization */}\n                    {item.l1 !== 0 && (\n                      <div \n                        style={styles.bar('#22c55e', Math.abs(item.l1) * 5, item.l1 >= 0)}\n                      ></div>\n                    )}\n                    \n                    {/* L2 regularization */}\n                    <div \n                      style={styles.bar('#3b82f6', Math.abs(item.l2) * 5, item.l2 >= 0)}\n                    ></div>\n                    \n                    <span style={styles.barLabel}>{item.name}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div style={styles.infoGrid}>\n              <div style={styles.infoCard('#f0fdf4')}>\n                <h5 style={styles.infoTitle('#15803d')}>L1 Regularization</h5>\n                <p style={styles.infoText}>Adds |w| to loss function</p>\n                <p style={styles.infoBold}>Effect: Makes many weights zero</p>\n                <div style={styles.infoItalic}>Like minimalism, completely removing unimportant items</div>\n              </div>\n              <div style={styles.infoCard('#eff6ff')}>\n                <h5 style={styles.infoTitle('#1e40af')}>L2 Regularization</h5>\n                <p style={styles.infoText}>Adds w² to loss function</p>\n                <p style={styles.infoBold}>Effect: All weights become smaller</p>\n                <div style={styles.infoItalic}>Like downsizing all furniture while keeping balance</div>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* Batch vs Layer Normalization Section */}\n        <div style={styles.card}>\n          <div style={styles.cardHeader}>\n            <h4 style={styles.subheading}>Activation Normalization: Batch vs Layer</h4>\n          </div>\n          \n          <div style={styles.cardContent}>\n            <div style={styles.activationGrid}>\n              {/* Original activations */}\n              <div style={styles.activationBox}>\n                <h5 style={styles.activationTitle}>Original Activations</h5>\n                <div style={styles.matrixContainer}>\n                  <div style={styles.matrixLabel}>\n                    <span style={styles.matrixLabelText}>Samples</span>\n                  </div>\n                  <div style={styles.matrixContent}>\n                    <div style={styles.matrixHeader}>Neurons</div>\n                    <div style={styles.matrixGrid}>\n                      {[0,1,2,3].map(row => (\n                        <React.Fragment key={`orig-row-${row}`}>\n                          {[0,1,2,3,4].map(col => (\n                            <div \n                              key={`orig-${row}-${col}`}\n                              style={styles.matrixCell(\n                                getColor(activationMatrix[row][col]),\n                                Math.abs(activationMatrix[row][col]) > 1.5 ? 'white' : 'black'\n                              )}\n                            >\n                              {activationMatrix[row][col].toFixed(1)}\n                            </div>\n                          ))}\n                        </React.Fragment>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                <div style={styles.matrixDesc}>Large range differences between neurons</div>\n              </div>\n              \n              {/* Batch Norm */}\n              <div style={styles.activationBox}>\n                <h5 style={styles.activationTitle}>Batch Norm</h5>\n                <div style={styles.matrixContainer}>\n                  <div style={styles.matrixContent}>\n                    <div style={styles.matrixHeader}>Neurons</div>\n                    <div style={styles.matrixGrid}>\n                      {[0,1,2,3].map(row => (\n                        <React.Fragment key={`bn-row-${row}`}>\n                          {[0,1,2,3,4].map(col => (\n                            <div \n                              key={`bn-${row}-${col}`}\n                              style={styles.matrixCell(\n                                getColor(activationMatrix[row+4][col]),\n                                Math.abs(activationMatrix[row+4][col]) > 1.5 ? 'white' : 'black'\n                              )}\n                            >\n                              {activationMatrix[row+4][col].toFixed(1)}\n                            </div>\n                          ))}\n                        </React.Fragment>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                <div style={styles.arrowContainer}>\n                  <svg width=\"120\" height=\"20\">\n                    <path d=\"M5,10 L115,10\" stroke=\"#4C1D95\" strokeWidth=\"2\" />\n                    <path d=\"M110,5 L115,10 L110,15\" fill=\"none\" stroke=\"#4C1D95\" strokeWidth=\"2\" />\n                  </svg>\n                </div>\n                <div style={{ ...styles.matrixDesc, fontWeight: 'bold', color: '#4C1D95' }}>\n                  Normalize along columns (each neuron)\n                </div>\n              </div>\n              \n              {/* Layer Norm */}\n              <div style={styles.activationBox}>\n                <h5 style={styles.activationTitle}>Layer Norm</h5>\n                <div style={styles.matrixContainer}>\n                  <div style={styles.matrixContent}>\n                    <div style={styles.matrixHeader}>Neurons</div>\n                    <div style={styles.matrixGrid}>\n                      {[0,1,2,3].map(row => (\n                        <React.Fragment key={`ln-row-${row}`}>\n                          {[0,1,2,3,4].map(col => (\n                            <div \n                              key={`ln-${row}-${col}`}\n                              style={styles.matrixCell(\n                                getColor(activationMatrix[row+8][col]),\n                                Math.abs(activationMatrix[row+8][col]) > 1.5 ? 'white' : 'black'\n                              )}\n                            >\n                              {activationMatrix[row+8][col].toFixed(1)}\n                            </div>\n                          ))}\n                        </React.Fragment>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                <div style={styles.arrowContainer}>\n                  <svg width=\"120\" height=\"20\">\n                    <path d=\"M5,10 L115,10\" stroke=\"#9D174D\" strokeWidth=\"2\" />\n                    <path d=\"M110,5 L115,10 L110,15\" fill=\"none\" stroke=\"#9D174D\" strokeWidth=\"2\" />\n                  </svg>\n                </div>\n                <div style={{ ...styles.matrixDesc, fontWeight: 'bold', color: '#9D174D' }}>\n                  Normalize along rows (each sample)\n                </div>\n              </div>\n            </div>\n            \n            {/* Explanation */}\n            <div style={styles.infoGrid}>\n              <div style={styles.infoCard('#f5f3ff')}>\n                <h5 style={styles.infoTitle('#4C1D95')}>Batch Normalization</h5>\n                <p style={styles.infoBold}>Formula: (x-μ_batch)/σ_batch</p>\n                <div style={styles.infoText}>\n                  <span style={{ fontWeight: 'bold' }}>Direction:</span> Normalize each feature across samples\n                </div>\n                <div style={styles.infoItalic}>Like ensuring each exam question has similar average scores</div>\n              </div>\n              <div style={styles.infoCard('#fdf2f8')}>\n                <h5 style={styles.infoTitle('#9D174D')}>Layer Normalization</h5>\n                <p style={styles.infoBold}>Formula: (x-μ_layer)/σ_layer</p> \n                <div style={styles.infoText}>\n                  <span style={{ fontWeight: 'bold' }}>Direction:</span> Normalize each sample across features\n                </div>\n                <div style={styles.infoItalic}>Like ensuring each student has balanced scores</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Combined Application Section */}\n      <div style={{ ...styles.card, marginTop: '1.5rem' }}>\n        <div style={styles.cardHeader}>\n          <h3 style={styles.subheading}>Combined Application in Deep Learning Practice</h3>\n        </div>\n        \n        <div style={styles.cardContent}>\n          <div style={styles.gridContainer}>\n            <div style={{ ...styles.architectureBox, backgroundColor: '#eff6ff', border: '1px solid #bfdbfe' }}>\n              <h4 style={styles.architectureTitle}>CNN Architecture (e.g., ResNet)</h4>\n              \n{/* CNN architecture diagram */}\n              <div style={styles.architectureDiagram}>\n                {/* Architecture background */}\n                <div style={styles.diagramBg}></div>\n                \n                {/* Layer layout */}\n                <div style={styles.layersContainer}>\n                  {/* Input layer */}\n                  <div style={styles.layerStack}>\n                    <div style={styles.layer('#e5e7eb', '80px')}>\n                      <span>Input</span>\n                    </div>\n                  </div>\n                  \n                  {/* Conv layer 1 */}\n                  <div style={styles.layerStack}>\n                    <div style={styles.layer('#fef9c3', '64px')}>\n                      <span>Conv Layer</span>\n                    </div>\n                    <div style={styles.layer('#86efac', '20px')}>\n                      <span style={{fontWeight: 'bold'}}>BatchNorm</span>\n                    </div>\n                    <div style={styles.layer('#e9d5ff', '20px')}>\n                      <span>ReLU</span>\n                    </div>\n                  </div>\n                  \n                  {/* Conv layer 2 */}\n                  <div style={styles.layerStack}>\n                    <div style={styles.layer('#fef9c3', '64px')}>\n                      <span>Conv Layer</span>\n                    </div>\n                    <div style={styles.layer('#86efac', '20px')}>\n                      <span style={{fontWeight: 'bold'}}>BatchNorm</span>\n                    </div>\n                    <div style={styles.layer('#e9d5ff', '20px')}>\n                      <span>ReLU</span>\n                    </div>\n                  </div>\n                  \n                  {/* Fully connected layer */}\n                  <div style={styles.layerStack}>\n                    <div style={styles.layer('#dbeafe', '80px')}>\n                      <span>FC Layer</span>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Weight decay marker */}\n                <div style={styles.weightDecayMarker}>\n                  <div style={styles.weightDecayBox}>\n                    <span>L2 Weight Decay applied to all weights</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div style={{...styles.techSpecs, backgroundColor: '#dbeafe'}}>\n                <strong>Typical Applications:</strong> ResNet, VGG, MobileNet\n                <br />\n                <strong>Normalization Choice:</strong> Primarily Batch Normalization\n                <br />\n                <strong>Regularization Choice:</strong> Almost always L2 weight decay\n              </div>\n            </div>\n            \n            <div style={{...styles.architectureBox, backgroundColor: '#f5f3ff', border: '1px solid #e9d5ff'}}>\n              <h4 style={styles.architectureTitle}>Transformer Architecture (e.g., BERT, GPT)</h4>\n              \n              {/* Transformer architecture diagram */}\n              <div style={styles.architectureDiagram}>\n                {/* Architecture background */}\n                <div style={styles.diagramBg}></div>\n                \n                {/* Layer layout */}\n                <div style={styles.layersContainer}>\n                  {/* Input embeddings */}\n                  <div style={styles.layerStack}>\n                    <div style={styles.layer('#e5e7eb', '80px')}>\n                      <span>Embeddings</span>\n                    </div>\n                  </div>\n                  \n                  {/* Attention block */}\n                  <div style={styles.layerStack}>\n                    <div style={styles.layer('#e9d5ff', '32px')}>\n                      <span>Multi-Head Attn</span>\n                    </div>\n                    <div style={styles.layer('#fbcfe8', '16px')}>\n                      <span style={{fontWeight: 'bold'}}>LayerNorm</span>\n                    </div>\n                    <div style={styles.layer('#e0e7ff', '24px')}>\n                      <span>Feed Forward</span>\n                    </div>\n                    <div style={styles.layer('#fbcfe8', '16px')}>\n                      <span style={{fontWeight: 'bold'}}>LayerNorm</span>\n                    </div>\n                  </div>\n                  \n                  {/* Repeated attention block */}\n                  <div style={styles.layerStack}>\n                    <div style={styles.layer('#e9d5ff', '32px')}>\n                      <span>Multi-Head Attn</span>\n                    </div>\n                    <div style={styles.layer('#fbcfe8', '16px')}>\n                      <span style={{fontWeight: 'bold'}}>LayerNorm</span>\n                    </div>\n                    <div style={styles.layer('#e0e7ff', '24px')}>\n                      <span>Feed Forward</span>\n                    </div>\n                    <div style={styles.layer('#fbcfe8', '16px')}>\n                      <span style={{fontWeight: 'bold'}}>LayerNorm</span>\n                    </div>\n                  </div>\n                  \n                  {/* Output layer */}\n                  <div style={styles.layerStack}>\n                    <div style={styles.layer('#dbeafe', '80px')}>\n                      <span>Output Layer</span>\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Weight decay marker */}\n                <div style={styles.weightDecayMarker}>\n                  <div style={styles.weightDecayBox}>\n                    <span>L2 Weight Decay + Dropout</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div style={{...styles.techSpecs, backgroundColor: '#f5f3ff'}}>\n                <strong>Typical Applications:</strong> BERT, GPT, T5, ViT\n                <br />\n                <strong>Normalization Choice:</strong> Primarily Layer Normalization\n                <br />\n                <strong>Regularization Choice:</strong> L2 Weight Decay + Dropout\n              </div>\n            </div>\n          </div>\n          \n          <div style={styles.pointsContainer}>\n            <h4 style={styles.pointsTitle}>Reasons for Combined Usage in Deep Learning</h4>\n            <div style={styles.reasonsGrid}>\n              <div style={styles.reasonItem}>\n                <div style={{...styles.reasonNumber, backgroundColor: '#dbeafe'}}>\n                  <span>1</span>\n                </div>\n                <div>\n                  <p style={styles.reasonText}><strong>Complementary Effects:</strong> Weight regularization controls model complexity, activation normalization improves training stability</p>\n                </div>\n              </div>\n              <div style={styles.reasonItem}>\n                <div style={{...styles.reasonNumber, backgroundColor: '#dcfce7'}}>\n                  <span>2</span>\n                </div>\n                <div>\n                  <p style={styles.reasonText}><strong>Synergistic Action:</strong> Normalization allows higher learning rates, regularization prevents overfitting at those higher rates</p>\n                </div>\n              </div>\n              <div style={styles.reasonItem}>\n                <div style={{...styles.reasonNumber, backgroundColor: '#f3e8ff'}}>\n                  <span>3</span>\n                </div>\n                <div>\n                  <p style={styles.reasonText}><strong>Engineering Practice:</strong> Normalization typically integrated as part of network architecture, weight regularization applied through optimizer</p>\n                </div>\n              </div>\n              <div style={styles.reasonItem}>\n                <div style={{...styles.reasonNumber, backgroundColor: '#fee2e2'}}>\n                  <span>4</span>\n                </div>\n                <div>\n                  <p style={styles.reasonText}><strong>Flexible Combination:</strong> Different architectures and tasks need different normalization and regularization combinations</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* PyTorch code example */}\n          <div style={styles.codeContainer}>\n            <h4 style={styles.codeTitle}>PyTorch Code Example: Activation Normalization + Weight Regularization</h4>\n            <div style={styles.codeGrid}>\n              <div style={styles.codeBlock}>\n                <pre style={{whiteSpace: 'pre-wrap', wordBreak: 'break-word'}}>\n{`# CNN model example using both techniques\nmodel = nn.Sequential(\n    nn.Conv2d(3, 16, 3, padding=1),\n    nn.BatchNorm2d(16),  # Activation normalization\n    nn.ReLU(),\n    nn.Conv2d(16, 32, 3, padding=1),\n    nn.BatchNorm2d(32),  # Activation normalization\n    nn.ReLU(),\n    nn.Flatten(),\n    nn.Linear(32*32*32, 10)\n)\n\n# Adding L2 weight regularization\noptimizer = torch.optim.Adam(\n    model.parameters(), \n    lr=0.001, \n    weight_decay=1e-4  # L2 regularization\n)`}\n                </pre>\n              </div>\n              \n              <div style={styles.codeAnalysis}>\n                <div>\n                  <h5 style={styles.analysisTitle}>Code Analysis</h5>\n                  <ul style={styles.analysisList}>\n                    <li style={styles.analysisItem}><span style={styles.codeHighlight('#dbeafe')}>nn.BatchNorm2d</span> - Activation normalization added after each convolutional layer</li>\n                    <li style={styles.analysisItem}><span style={styles.codeHighlight('#fee2e2')}>weight_decay=1e-4</span> - L2 weight regularization applied via optimizer parameter</li>\n                  </ul>\n                </div>\n                \n                <div style={styles.analysisBox}>\n                  <p style={styles.analysisText}>\n                    <strong>Key Implementation Pattern:</strong> BatchNorm is added as part of the model architecture, while L2 regularization is configured as an optimizer parameter, highlighting their different implementation approaches.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RegularizationViz;\n","import React, { useState, useEffect } from 'react';\n\nconst EigenvalueVisualization = () => {\n  const [matrix, setMatrix] = useState({\n    a: 1.5, b: 0.5,\n    c: 0.5, d: 1.0\n  });\n  \n  const [iterations, setIterations] = useState(1);\n  const [randomVectors, setRandomVectors] = useState([]);\n  \n  // Calculate eigenvalues and eigenvectors\n  const calculateEigen = () => {\n    const { a, b, c, d } = matrix;\n    \n    const trace = a + d;\n    const det = a * d - b * c;\n    \n    // Check if we have complex eigenvalues\n    const discriminantValue = trace * trace - 4 * det;\n    \n    let eigenvalue1, eigenvalue2;\n    let isComplex = false;\n    \n    if (discriminantValue >= 0) {\n      // Real eigenvalues\n      const discriminant = Math.sqrt(discriminantValue);\n      eigenvalue1 = (trace + discriminant) / 2;\n      eigenvalue2 = (trace - discriminant) / 2;\n    } else {\n      // Complex eigenvalues\n      isComplex = true;\n      const realPart = trace / 2;\n      const imagPart = Math.sqrt(-discriminantValue) / 2;\n      // Use magnitude of complex number for scaling\n      const magnitude = Math.sqrt(realPart * realPart + imagPart * imagPart);\n      eigenvalue1 = magnitude;\n      eigenvalue2 = magnitude;\n    }\n    \n    // Calculate eigenvectors\n    let eigenvector1 = [1, 0];\n    let eigenvector2 = [0, 1];\n    \n    if (b !== 0) {\n      eigenvector1 = [1, (eigenvalue1 - a) / b];\n      eigenvector2 = [1, (eigenvalue2 - a) / b];\n    } else if (c !== 0) {\n      eigenvector1 = [(eigenvalue1 - d) / c, 1];\n      eigenvector2 = [(eigenvalue2 - d) / c, 1];\n    }\n    \n    // Normalize eigenvectors\n    const normalize = (v) => {\n      const mag = Math.sqrt(v[0] * v[0] + v[1] * v[1]);\n      return [v[0] / mag, v[1] / mag];\n    };\n    \n    return {\n      eigenvalues: [eigenvalue1, eigenvalue2],\n      eigenvectors: [normalize(eigenvector1), normalize(eigenvector2)]\n    };\n  };\n  \n  // Apply matrix transformation\n  const applyTransformation = (x, y, iterations = 1) => {\n    let currentX = x;\n    let currentY = y;\n    \n    for (let i = 0; i < iterations; i++) {\n      const newX = matrix.a * currentX + matrix.b * currentY;\n      const newY = matrix.c * currentX + matrix.d * currentY;\n      currentX = newX;\n      currentY = newY;\n    }\n    \n    return [currentX, currentY];\n  };\n  \n  // Generate random vectors\n  useEffect(() => {\n    const vectors = [];\n    for (let i = 0; i < 8; i++) {\n      const angle = Math.random() * 2 * Math.PI;\n      const radius = 0.2 + Math.random() * 0.3;\n      vectors.push([Math.cos(angle) * radius, Math.sin(angle) * radius]);\n    }\n    setRandomVectors(vectors);\n  }, []);\n  \n  // Calculate transformed vectors\n  const transformedVectors = randomVectors.map(v => ({\n    original: v,\n    transformed: applyTransformation(v[0], v[1], iterations)\n  }));\n  \n  // Calculate eigenvalues and eigenvectors\n  const { eigenvalues, eigenvectors } = calculateEigen();\n  \n  // Transformed eigenvectors (only change length, direction stays the same)\n  const transformedEigenvectors = eigenvectors.map((v, i) => {\n    const scaleFactor = Math.pow(eigenvalues[i], iterations);\n    return [v[0] * scaleFactor, v[1] * scaleFactor];\n  });\n  \n  // Visualization settings\n  const width = 600;\n  const height = 400;\n  const scaleX = x => (x * 100) + width / 2;\n  const scaleY = y => height / 2 - (y * 100);\n  \n  // Preset matrices\n  const presetMatrices = [\n    { name: \"Scaling\", matrix: { a: 2.0, b: 0.0, c: 0.0, d: 0.5 } },\n    { name: \"Rotation\", matrix: { a: 0.7, b: -0.7, c: 0.7, d: 0.7 } },\n    { name: \"Shear\", matrix: { a: 1.0, b: 0.5, c: 0.0, d: 1.0 } }\n  ];\n  \n  return (\n    <div className=\"flex flex-col items-center w-full p-4\">\n      <h1 className=\"text-xl font-bold mb-2\">Eigenvalues and Repeated Linear Transformations</h1>\n      \n      <div className=\"flex flex-col md:flex-row gap-4 w-full\">\n        <div className=\"flex flex-col bg-gray-100 p-4 rounded-lg\">\n          <h2 className=\"text-lg font-medium mb-2\">Transformation Settings</h2>\n          \n          <div className=\"bg-blue-50 p-2 rounded mb-3 text-xs\">\n            <p className=\"font-semibold mb-1\">Matrix [a b; c d] parameters:</p>\n            <p><strong>a</strong>: x-axis scaling factor</p>\n            <p><strong>b</strong>: y's influence on x (horizontal shear)</p>\n            <p><strong>c</strong>: x's influence on y (vertical shear)</p>\n            <p><strong>d</strong>: y-axis scaling factor</p>\n          </div>\n          \n          {/* Matrix inputs */}\n          <div className=\"grid grid-cols-2 gap-2 mb-4\">\n            {['a', 'b', 'c', 'd'].map(key => (\n              <div key={key}>\n                <label className=\"block text-sm\">{key}:</label>\n                <input \n                  type=\"number\" \n                  step=\"0.1\"\n                  value={matrix[key]} \n                  onChange={(e) => setMatrix({...matrix, [key]: parseFloat(e.target.value)})}\n                  className=\"w-full p-1 border rounded\"\n                />\n              </div>\n            ))}\n          </div>\n          \n          {/* Preset matrices */}\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {presetMatrices.map((preset, index) => (\n              <button\n                key={index}\n                onClick={() => setMatrix(preset.matrix)}\n                className=\"px-2 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600\"\n              >\n                {preset.name}\n              </button>\n            ))}\n          </div>\n          \n          {/* Iteration control */}\n          <div className=\"flex items-center gap-2 mb-4\">\n            <label className=\"text-sm\">Iterations:</label>\n            <input\n              type=\"range\"\n              min=\"0\"\n              max=\"5\"\n              step=\"0.1\"\n              value={iterations}\n              onChange={(e) => setIterations(parseFloat(e.target.value))}\n              className=\"w-full\"\n            />\n            <span className=\"text-sm\">{iterations.toFixed(1)}</span>\n          </div>\n          \n          {/* Eigenvalue information */}\n          <div className=\"mt-2 bg-white p-3 rounded border text-sm\">\n            <p className=\"mb-1\"><strong>Eigenvalue λ₁:</strong> {eigenvalues[0].toFixed(2)}</p>\n            <p className=\"mb-1\"><strong>Eigenvalue λ₂:</strong> {eigenvalues[1].toFixed(2)}</p>\n            <p className=\"mb-1\"><strong>λ₁^{iterations.toFixed(1)}:</strong> {Math.pow(eigenvalues[0], iterations).toFixed(2)}</p>\n            <p className=\"mb-1\"><strong>λ₂^{iterations.toFixed(1)}:</strong> {Math.pow(eigenvalues[1], iterations).toFixed(2)}</p>\n            {/* Rotation matrix hint */}\n            {matrix.a.toFixed(1) === matrix.d.toFixed(1) && \n             matrix.b.toFixed(1) === (-matrix.c).toFixed(1) &&\n             matrix.b !== 0 &&\n              <p className=\"text-xs mt-1\">Rotation matrices have complex eigenvalues; showing magnitude</p>\n            }\n          </div>\n        </div>\n        \n        {/* Visualization area */}\n        <div className=\"flex-grow bg-white border rounded-lg overflow-hidden\">\n          <svg width={width} height={height}>\n            {/* Coordinate axes */}\n            <line x1={0} y1={height/2} x2={width} y2={height/2} stroke=\"#ccc\" strokeWidth=\"1\" />\n            <line x1={width/2} y1={0} x2={width/2} y2={height} stroke=\"#ccc\" strokeWidth=\"1\" />\n            \n            {/* Grid lines */}\n            {[-2, -1, 1, 2].map(i => (\n              <React.Fragment key={i}>\n                <line \n                  x1={scaleX(i)} y1={0} x2={scaleX(i)} y2={height} \n                  stroke=\"#eee\" strokeWidth=\"1\" \n                />\n                <line \n                  x1={0} y1={scaleY(i)} x2={width} y2={scaleY(i)} \n                  stroke=\"#eee\" strokeWidth=\"1\" \n                />\n              </React.Fragment>\n            ))}\n            \n            {/* Random vectors */}\n            {transformedVectors.map((vector, index) => (\n              <g key={index}>\n                {/* Original vector */}\n                <line\n                  x1={scaleX(0)}\n                  y1={scaleY(0)}\n                  x2={scaleX(vector.original[0])}\n                  y2={scaleY(vector.original[1])}\n                  stroke=\"#ddd\"\n                  strokeWidth=\"1\"\n                />\n                <circle\n                  cx={scaleX(vector.original[0])}\n                  cy={scaleY(vector.original[1])}\n                  r=\"3\"\n                  fill=\"#aaa\"\n                />\n                \n                {/* Transformed vector */}\n                <line\n                  x1={scaleX(0)}\n                  y1={scaleY(0)}\n                  x2={scaleX(vector.transformed[0])}\n                  y2={scaleY(vector.transformed[1])}\n                  stroke=\"#2980b9\"\n                  strokeWidth=\"1.5\"\n                />\n                <circle\n                  cx={scaleX(vector.transformed[0])}\n                  cy={scaleY(vector.transformed[1])}\n                  r=\"4\"\n                  fill=\"#2980b9\"\n                />\n              </g>\n            ))}\n            \n            {/* Eigenvectors */}\n            {eigenvectors.map((vector, index) => {\n              const color = index === 0 ? \"#e74c3c\" : \"#2ecc71\";\n              return (\n                <g key={`eigen-${index}`}>\n                  {/* Original eigenvector */}\n                  <line\n                    x1={scaleX(0)}\n                    y1={scaleY(0)}\n                    x2={scaleX(vector[0])}\n                    y2={scaleY(vector[1])}\n                    stroke={color}\n                    strokeWidth=\"2\"\n                    strokeDasharray=\"5,5\"\n                  />\n                  \n                  {/* Transformed eigenvector */}\n                  <line\n                    x1={scaleX(0)}\n                    y1={scaleY(0)}\n                    x2={scaleX(transformedEigenvectors[index][0])}\n                    y2={scaleY(transformedEigenvectors[index][1])}\n                    stroke={color}\n                    strokeWidth=\"2\"\n                  />\n                  <circle\n                    cx={scaleX(transformedEigenvectors[index][0])}\n                    cy={scaleY(transformedEigenvectors[index][1])}\n                    r=\"5\"\n                    fill={color}\n                  />\n                  \n                  {/* Label */}\n                  <text\n                    x={scaleX(vector[0] * 1.1)}\n                    y={scaleY(vector[1] * 1.1)}\n                    fill={color}\n                    fontSize=\"12\"\n                  >\n                    λ{index + 1}={eigenvalues[index].toFixed(2)}\n                  </text>\n                </g>\n              );\n            })}\n          </svg>\n        </div>\n      </div>\n      \n      {/* Brief explanation */}\n      <div className=\"bg-gray-100 p-3 rounded-lg w-full mt-4 text-sm\">\n        <p>This visualization demonstrates the role of eigenvalues in repeated transformations:</p>\n        <ul className=\"list-disc pl-6 mt-1\">\n          <li>Eigenvectors (colored lines) maintain their direction during transformation</li>\n          <li>Eigenvector length changes by eigenvalue raised to power n (λⁿ)</li>\n          <li>Gray dots are original vectors, blue dots are transformed vectors</li>\n          <li>Try different matrices and iteration counts to observe changes</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default EigenvalueVisualization;\n","import React, { useState, useEffect } from 'react';\nimport * as math from 'mathjs';\n\nconst InvertibleMatricesDemo = () => {\n  // State for matrix and vectors\n  const [matrix, setMatrix] = useState([\n    [3, 1],\n    [2, 2]\n  ]);\n  const [inverse, setInverse] = useState(null);\n  const [determinant, setDeterminant] = useState(null);\n  const [product, setProduct] = useState(null);\n  const [vectorX, setVectorX] = useState([2, 1]);\n  const [transformedVector, setTransformedVector] = useState(null);\n  const [inverseMappedVector, setInverseMappedVector] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  \n  // Grid properties\n  const gridSize = 300;\n  const gridCenter = gridSize / 2;\n  const scale = 25;\n  \n  // Add preset matrix examples\n  const presetMatrices = [\n    { name: \"Identity\", matrix: [[1, 0], [0, 1]], desc: \"No change to area (det=1)\" },\n    { name: \"Scaling\", matrix: [[2, 0], [0, 2]], desc: \"Area scaled by 4 (det=4)\" },\n    { name: \"Shear\", matrix: [[1, 1], [0, 1]], desc: \"Area preserved (det=1)\" },\n    { name: \"Rotation\", matrix: [[0, -1], [1, 0]], desc: \"Area preserved (det=1)\" },\n    { name: \"Reflection\", matrix: [[-1, 0], [0, 1]], desc: \"Area preserved, orientation flipped (det=-1)\" },\n    { name: \"Non-invertible\", matrix: [[1, 1], [1, 1]], desc: \"Zero area, not invertible (det=0)\" },\n  ];\n  \n  const applyPreset = (preset) => {\n    setMatrix(preset.matrix);\n  };\n  \n  useEffect(() => {\n    try {\n      // Calculate determinant\n      const det = math.det(matrix);\n      setDeterminant(det);\n      \n      // Check if invertible\n      if (Math.abs(det) < 1e-10) {\n        setErrorMessage(\"Matrix is not invertible (determinant is zero)\");\n        setInverse(null);\n        setProduct(null);\n        setTransformedVector(math.multiply(matrix, vectorX));\n        setInverseMappedVector(null);\n        return;\n      } else {\n        setErrorMessage(\"\");\n      }\n      \n      // Calculate inverse\n      const inv = math.inv(matrix);\n      setInverse(inv);\n      \n      // Calculate A * A^(-1)\n      const prod = math.multiply(matrix, inv);\n      setProduct(prod);\n      \n      // Transform vector\n      const transformed = math.multiply(matrix, vectorX);\n      setTransformedVector(transformed);\n      \n      // Map transformed vector back with inverse\n      const inverseMapped = math.multiply(inv, transformed);\n      setInverseMappedVector(inverseMapped);\n      \n    } catch (error) {\n      setErrorMessage(\"Error in calculation: \" + error.message);\n    }\n  }, [matrix, vectorX]);\n  \n  // Render a grid point\n  const renderPoint = (x, y, color, size = 4) => {\n    const screenX = gridCenter + x * scale;\n    const screenY = gridCenter - y * scale;\n    return (\n      <circle\n        key={`point-${x}-${y}`}\n        cx={screenX}\n        cy={screenY}\n        r={size}\n        fill={color}\n      />\n    );\n  };\n  \n  // Render a vector\n  const renderVector = (x, y, color, thickness = 2) => {\n    const startX = gridCenter;\n    const startY = gridCenter;\n    const endX = gridCenter + x * scale;\n    const endY = gridCenter - y * scale;\n    \n    return (\n      <>\n        <line\n          x1={startX}\n          y1={startY}\n          x2={endX}\n          y2={endY}\n          stroke={color}\n          strokeWidth={thickness}\n        />\n        <polygon\n          points={calculateArrowhead(startX, startY, endX, endY, 10)}\n          fill={color}\n        />\n      </>\n    );\n  };\n  \n  // Render a parallelogram to show determinant as area\n  const renderParallelogram = (vectorsArray, color, opacity = 0.4) => {\n    // For 2x2 matrix, we need the column vectors\n    const col1 = [matrix[0][0], matrix[1][0]];\n    const col2 = [matrix[0][1], matrix[1][1]];\n    \n    // Calculate the four points of the parallelogram\n    const origin = [gridCenter, gridCenter];\n    const point1 = [gridCenter + col1[0] * scale, gridCenter - col1[1] * scale];\n    const point2 = [gridCenter + col2[0] * scale, gridCenter - col2[1] * scale];\n    const point3 = [point1[0] + col2[0] * scale, point1[1] - col2[1] * scale];\n    \n    // Create path string for the parallelogram\n    const pathStr = `M${origin[0]},${origin[1]} L${point1[0]},${point1[1]} L${point3[0]},${point3[1]} L${point2[0]},${point2[1]} Z`;\n    \n    return (\n      <>\n        <path d={pathStr} fill={color} fillOpacity={opacity} stroke={color} strokeWidth=\"2\" />\n        <line x1={origin[0]} y1={origin[1]} x2={point1[0]} y2={point1[1]} stroke={color} strokeWidth=\"3\" />\n        <line x1={origin[0]} y1={origin[1]} x2={point2[0]} y2={point2[1]} stroke={color} strokeWidth=\"3\" />\n        <line x1={point1[0]} y1={point1[1]} x2={point3[0]} y2={point3[1]} stroke={color} strokeWidth=\"2\" strokeDasharray=\"4 2\" />\n        <line x1={point2[0]} y1={point2[1]} x2={point3[0]} y2={point3[1]} stroke={color} strokeWidth=\"2\" strokeDasharray=\"4 2\" />\n        \n        {/* Add labels for the basis vectors */}\n        <text x={point1[0] + 5} y={point1[1]} fill={color} fontWeight=\"bold\">v₁</text>\n        <text x={point2[0] + 5} y={point2[1]} fill={color} fontWeight=\"bold\">v₂</text>\n      </>\n    );\n  };\n  \n  // Calculate arrowhead points\n  const calculateArrowhead = (x1, y1, x2, y2, size) => {\n    const angle = Math.atan2(y2 - y1, x2 - x1);\n    const x3 = x2 - size * Math.cos(angle - Math.PI / 6);\n    const y3 = y2 - size * Math.sin(angle - Math.PI / 6);\n    const x4 = x2 - size * Math.cos(angle + Math.PI / 6);\n    const y4 = y2 - size * Math.sin(angle + Math.PI / 6);\n    return `${x2},${y2} ${x3},${y3} ${x4},${y4}`;\n  };\n  \n  // Render grid\n  const renderGrid = () => {\n    const gridLines = [];\n    \n    // X and Y axes\n    gridLines.push(\n      <line key=\"x-axis\" x1=\"0\" y1={gridCenter} x2={gridSize} y2={gridCenter} stroke=\"#000\" strokeWidth=\"1.5\" />\n    );\n    gridLines.push(\n      <line key=\"y-axis\" x1={gridCenter} y1=\"0\" x2={gridCenter} y2={gridSize} stroke=\"#000\" strokeWidth=\"1.5\" />\n    );\n    \n    // Grid lines\n    for (let i = -6; i <= 6; i++) {\n      if (i === 0) continue;\n      \n      const pos = gridCenter + i * scale;\n      \n      // Horizontal grid line\n      if (pos >= 0 && pos <= gridSize) {\n        gridLines.push(\n          <line key={`h-${i}`} x1=\"0\" y1={pos} x2={gridSize} y2={pos} stroke=\"#ccc\" strokeWidth=\"0.5\" />\n        );\n      }\n      \n      // Vertical grid line\n      if (pos >= 0 && pos <= gridSize) {\n        gridLines.push(\n          <line key={`v-${i}`} x1={pos} y1=\"0\" x2={pos} y2={gridSize} stroke=\"#ccc\" strokeWidth=\"0.5\" />\n        );\n      }\n      \n      // Axis labels at -6, -4, -2, 2, 4, 6\n      if (i % 2 === 0 && i !== 0 && pos >= 0 && pos <= gridSize) {\n        gridLines.push(\n          <text key={`xlabel-${i}`} x={pos} y={gridCenter + 15} textAnchor=\"middle\" fontSize=\"10\">{i}</text>\n        );\n        gridLines.push(\n          <text key={`ylabel-${i}`} x={gridCenter - 15} y={pos + 4} textAnchor=\"middle\" fontSize=\"10\">{-i}</text>\n        );\n      }\n    }\n    \n    return gridLines;\n  };\n  \n  // Matrix input handler\n  const handleMatrixChange = (row, col, value) => {\n    const newMatrix = [...matrix];\n    newMatrix[row][col] = parseFloat(value) || 0;\n    setMatrix(newMatrix);\n  };\n  \n  // Vector input handler\n  const handleVectorChange = (index, value) => {\n    const newVector = [...vectorX];\n    newVector[index] = parseFloat(value) || 0;\n    setVectorX(newVector);\n  };\n  \n  // Format number for display\n  const formatNumber = (num) => {\n    if (num === null || num === undefined) return \"\";\n    return Math.abs(num) < 1e-10 ? \"0\" : num.toFixed(2);\n  };\n  \n  return (\n    <div className=\"p-4 max-w-4xl mx-auto\">\n      <h1 className=\"text-2xl font-bold mb-4\">Invertible Matrices Visualization</h1>\n      \n      <div className=\"flex flex-col md:flex-row gap-6\">\n        <div className=\"space-y-4 md:w-1/3\">\n          <div>\n            <h2 className=\"text-lg font-semibold\">Input Matrix A</h2>\n            <div className=\"flex items-center\">\n              <div className=\"mr-2 font-bold\">A =</div>\n              <div className=\"border border-gray-300 p-2 rounded\">\n                {matrix.map((row, i) => (\n                  <div key={`row-${i}`} className=\"flex\">\n                    {row.map((val, j) => (\n                      <input\n                        key={`cell-${i}-${j}`}\n                        type=\"number\"\n                        value={val}\n                        onChange={(e) => handleMatrixChange(i, j, e.target.value)}\n                        className=\"w-16 m-1 p-1 border border-gray-300 rounded text-center\"\n                      />\n                    ))}\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"text-sm text-gray-600 mt-1\">\n              (Matrix columns represent basis vectors v₁ and v₂)\n            </div>\n          </div>\n          \n          <div>\n            <h2 className=\"text-lg font-semibold\">Input Vector x</h2>\n            <div className=\"flex items-center\">\n              <div className=\"mr-2\">x =</div>\n              <div className=\"border border-gray-300 p-2 rounded\">\n                {vectorX.map((val, i) => (\n                  <input\n                    key={`vec-${i}`}\n                    type=\"number\"\n                    value={val}\n                    onChange={(e) => handleVectorChange(i, e.target.value)}\n                    className=\"w-16 m-1 p-1 border border-gray-300 rounded text-center\"\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h2 className=\"text-lg font-semibold\">Determinant & Invertibility</h2>\n            <div className=\"p-2 border border-gray-300 rounded bg-gray-50\">\n              <div className=\"text-base mb-2\">\n                det(A) = <span className={determinant === 0 ? \"text-red-600 font-bold\" : (determinant < 0 ? \"text-orange-600 font-bold\" : \"text-green-600 font-bold\")}>\n                  {determinant !== null ? formatNumber(determinant) : \"N/A\"}\n                </span>\n              </div>\n              <div className=\"text-sm\">\n                {determinant === 0 ? (\n                  <span className=\"text-red-600\">Matrix is not invertible! The transformation collapses space (loses dimension).</span>\n                ) : determinant < 0 ? (\n                  <span className=\"text-orange-600\">Matrix is invertible. Negative determinant means orientation is flipped.</span>\n                ) : (\n                  <span className=\"text-green-600\">Matrix is invertible. Positive determinant preserves orientation.</span>\n                )}\n              </div>\n              <div className=\"text-sm mt-1\">\n                {determinant !== 0 && `1/det(A) = ${formatNumber(1/determinant)} (scaling factor for inverse matrix)`}\n              </div>\n            </div>\n          </div>\n          \n          <div>\n            <h2 className=\"text-lg font-semibold mt-3\">Preset Examples</h2>\n            <div className=\"grid grid-cols-2 gap-1 mt-1\">\n              {presetMatrices.map((preset, idx) => (\n                <button \n                  key={idx}\n                  onClick={() => applyPreset(preset)}\n                  className=\"p-1 text-sm border border-gray-300 rounded hover:bg-blue-100 transition-colors\"\n                >\n                  {preset.name}\n                </button>\n              ))}\n            </div>\n            <div className=\"text-xs mt-1 text-gray-600\">\n              Click a preset to see how different transformations affect determinant and invertibility\n            </div>\n          </div>\n          \n          {inverse && (\n            <>\n              <div>\n                <h2 className=\"text-lg font-semibold\">Inverse Matrix A<sup>-1</sup></h2>\n                <div className=\"p-2 border border-gray-300 rounded\">\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {inverse.map((row, i) => (\n                      <div key={`inv-row-${i}`} className=\"flex justify-around\">\n                        {row.map((val, j) => (\n                          <div key={`inv-${i}-${j}`} className=\"w-16 text-center\">\n                            {formatNumber(val)}\n                          </div>\n                        ))}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h2 className=\"text-lg font-semibold\">A × A<sup>-1</sup> = I (Identity)</h2>\n                <div className=\"p-2 border border-gray-300 rounded\">\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {product.map((row, i) => (\n                      <div key={`prod-row-${i}`} className=\"flex justify-around\">\n                        {row.map((val, j) => (\n                          <div key={`prod-${i}-${j}`} className=\"w-16 text-center\">\n                            {formatNumber(val)}\n                          </div>\n                        ))}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n        \n        <div className=\"md:w-2/3\">\n          <h2 className=\"text-xl font-semibold mb-3\">Determinant as Area & Transformation</h2>\n          <div className=\"border border-gray-300 rounded p-2 bg-gray-50\">\n            <svg width={gridSize} height={gridSize} className=\"mx-auto\">\n              {renderGrid()}\n              \n              <g>\n                {/* Show the unit square before transformation */}\n                <path \n                  d={`M${gridCenter},${gridCenter} L${gridCenter + scale},${gridCenter} L${gridCenter + scale},${gridCenter - scale} L${gridCenter},${gridCenter - scale} Z`} \n                  fill=\"#cccccc\" \n                  fillOpacity=\"0.2\" \n                  stroke=\"#999999\" \n                  strokeWidth=\"1\" \n                  strokeDasharray=\"5,5\"\n                />\n                <text x={gridCenter + scale/2} y={gridCenter - scale/2} fill=\"#999999\" fontSize=\"12\">Unit Square</text>\n              </g>\n              \n              {/* Transformed parallelogram showing determinant as area */}\n              {renderParallelogram(matrix, \"#9370DB\")}\n              \n              {/* Add text to show the area = determinant */}\n              <text \n                x={gridCenter + 40} \n                y={gridCenter - 40} \n                fill=\"#663399\" \n                fontWeight=\"bold\"\n                fontSize=\"14\"\n              >\n                Area = |det(A)| =\n              </text>\n              \n              {/* Original vector */}\n              {renderVector(vectorX[0], vectorX[1], \"#0066cc\", 2)}\n              {renderPoint(vectorX[0], vectorX[1], \"#0066cc\", 4)}\n              \n              {/* Transformed vector */}\n              {transformedVector && (\n                <>\n                  {renderVector(transformedVector[0], transformedVector[1], \"#cc3300\", 2)}\n                  {renderPoint(transformedVector[0], transformedVector[1], \"#cc3300\", 4)}\n                </>\n              )}\n              \n              {/* Inverse mapped vector */}\n              {inverseMappedVector && (\n                <>\n                  <line\n                    x1={gridCenter + transformedVector[0] * scale}\n                    y1={gridCenter - transformedVector[1] * scale}\n                    x2={gridCenter + inverseMappedVector[0] * scale}\n                    y2={gridCenter - inverseMappedVector[1] * scale}\n                    stroke=\"#009900\"\n                    strokeWidth={1}\n                    strokeDasharray=\"4 2\"\n                  />\n                  {renderPoint(inverseMappedVector[0], inverseMappedVector[1], \"#009900\", 4)}\n                </>\n              )}\n            </svg>\n            \n            <div className=\"mt-3 text-sm space-y-2\">\n              <div className=\"flex items-center\">\n                <div className=\"w-4 h-4 bg-purple-600 rounded-full mr-2\"></div>\n                <span><strong>Parallelogram</strong>: Area = |det(A)| = {Math.abs(determinant).toFixed(2)}</span>\n              </div>\n            \n              <div className=\"flex items-center\">\n                <div className=\"w-4 h-4 bg-blue-600 rounded-full mr-2\"></div>\n                <span><strong>Original vector</strong> x = [{vectorX.join(', ')}]</span>\n              </div>\n              \n              {transformedVector && (\n                <div className=\"flex items-center\">\n                  <div className=\"w-4 h-4 bg-red-600 rounded-full mr-2\"></div>\n                  <span><strong>Transformed vector</strong> Ax = [{transformedVector.map(v => formatNumber(v)).join(', ')}]</span>\n                </div>\n              )}\n              \n              {inverseMappedVector && (\n                <div className=\"flex items-center\">\n                  <div className=\"w-4 h-4 bg-green-600 rounded-full mr-2\"></div>\n                  <span><strong>Inverse mapped</strong> A<sup>-1</sup>(Ax) = [{inverseMappedVector.map(v => formatNumber(v)).join(', ')}]</span>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"mt-4 p-4 bg-gray-100 rounded\">\n            <h3 className=\"font-semibold text-blue-800\">Understanding Determinants & Invertibility</h3>\n            \n            <div className=\"mt-2 space-y-3\">\n              <div>\n                <h4 className=\"font-medium\">Why is the determinant so important?</h4>\n                <p className=\"text-sm mt-1\">\n                  The determinant tells us whether a matrix transformation can be \"undone.\" If |det(A)| = 0, \n                  the transformation compresses space into fewer dimensions, making it impossible to recover the original input.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium\">Determinant, Area, and the Inverse:</h4>\n                <ul className=\"list-disc pl-5 mt-1 text-sm space-y-1\">\n                  <li><strong>When det(A) ≠ 0:</strong> The transformation preserves dimensionality, making an inverse possible</li>\n                  <li><strong>When det(A) = 0:</strong> The transformation collapses space (e.g., squashes a square into a line), making inversion impossible</li>\n                  <li><strong>For the inverse:</strong> Each element in A<sup>-1</sup> is scaled by 1/det(A), so smaller determinants create larger inverses</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h4 className=\"font-medium\">Visual Interpretation:</h4>\n                <ul className=\"list-disc pl-5 mt-1 text-sm space-y-1\">\n                  <li>The <span className=\"text-purple-600 font-bold\">purple parallelogram</span> shows how the unit square is transformed by matrix A</li>\n                  <li>If this parallelogram has zero area (det=0), the matrix isn't invertible</li>\n                  <li>The sign of det(A) tells us if orientation is preserved (positive) or flipped (negative)</li>\n                  <li>Larger |det(A)| means the transformation expands area; smaller |det(A)| means it contracts area</li>\n                </ul>\n              </div>\n            </div>\n            \n            <h3 className=\"font-semibold mt-4 text-blue-800\">Key Formulas</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-2\">\n              <div className=\"border border-gray-300 rounded p-2 bg-white\">\n                <h4 className=\"font-medium\">2×2 Matrix Determinant:</h4>\n                <div className=\"mt-1 text-center\">\n                  det([a b; c d]) = ad - bc\n                </div>\n              </div>\n              \n              <div className=\"border border-gray-300 rounded p-2 bg-white\">\n                <h4 className=\"font-medium\">2×2 Matrix Inverse:</h4>\n                <div className=\"mt-1 text-center\">\n                  [a b; c d]<sup>-1</sup> = (1/det) × [d -b; -c a]\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InvertibleMatricesDemo;\n","import React, { useState } from 'react';\nimport NeuralNetworkVisualization from './components/NeuralNetworkFunctionApproximator';\nimport VAEVisualizer from './components/VAEVisualizer';\nimport GradientDescent from './components/GradientDescentAtSaddlePoint';\nimport EpochAndBatch from './components/EpochAndBatchVisualization';\nimport EncoderDecoder from './components/EncoderDecoderVisualizer';\nimport HessianEigenvalue from './components/HessianAndEigenvalue';\nimport LearningRate from './components/LearningRate';\nimport Normalization from './components/Normalization';\nimport AdaptiveLearning from './components/AdaptiveLearningComparison';\nimport PositionEmbedding from './components/PositionEmbedding';\nimport BetaVAE from './components/BetaVAE';\nimport ActivationFunctions from './components/ActivationFunctions';\nimport LossFunctions from './components/LossFunctions';\nimport RegularizationNormalization from './components/RegularizationNormalization';\nimport Eigenvalue from './components/Eigenvalue';\nimport InvertibleMatrix from './components/InvertibleMatrix';\n\nfunction App() {\n  const [activeComponent, setActiveComponent] = useState('neural');\n  \n  // Button data array\n  const buttons = [\n    { id: 'neural', label: 'Function Approximation' },\n    { id: 'vae', label: 'Variational Autoencoder' },\n    { id: 'gd', label: 'Saddle Points' },\n    { id: 'eb', label: 'Epochs & Batches' },\n    { id: 'ed', label: 'Encoder-Decoder Models' },\n    { id: 'hessian', label: 'Hessian & Eigenvalues' },\n    { id: 'learningrate', label: 'Learning Rates' },\n    { id: 'normalization', label: 'Normalization Techniques' },\n    { id: 'adaptive', label: 'Adaptive Learning Rate Comparison' },\n    { id: 'position', label: 'Position Embedding' },\n    { id: 'betavae', label: 'Beta VAE' },\n    { id: 'activation', label: 'Activation functions' },\n    { id: 'loss', label: 'Loss functions' },\n    { id: 'rn', label: 'Regularization & Normalization' },\n    { id: 'eigenvalue', label: 'Eigenvalue & Transform' },\n    { id: 'invertible', label: 'Invertible Matrix' }\n  ];\n  \n  // Button style generator function\n  const getButtonStyle = (id) => ({\n    padding: '8px 16px',\n    border: 'none',\n    borderRadius: '4px',\n    backgroundColor: activeComponent === id ? '#007bff' : '#f0f0f0',\n    color: activeComponent === id ? 'white' : 'black',\n    cursor: 'pointer',\n    fontWeight: activeComponent === id ? 'bold' : 'normal',\n    transition: 'background-color 0.2s'\n  });\n  \n  // Component mapping object\n  const componentMap = {\n    neural: <NeuralNetworkVisualization />,\n    vae: <VAEVisualizer />,\n    gd: <GradientDescent />,\n    eb: <EpochAndBatch />,\n    ed: <EncoderDecoder />,\n    hessian: <HessianEigenvalue />,\n    learningrate: <LearningRate />,\n    normalization: <Normalization />,\n    adaptive: <AdaptiveLearning />,\n    position: <PositionEmbedding />,\n    betavae: <BetaVAE />,\n    activation: <ActivationFunctions />,\n    loss: <LossFunctions />,\n    rn: <RegularizationNormalization />,\n    eigenvalue: <Eigenvalue />,\n    invertible: <InvertibleMatrix />\n  };\n  \n  return (\n    <div className=\"App\">\n      <header style={{ \n        padding: '12px 20px', \n        display: 'flex', \n        justifyContent: 'space-between', \n        alignItems: 'center', \n        borderBottom: '1px solid #e0e0e0' \n      }}>\n        <div style={{ fontSize: '16px', fontWeight: 'bold' }}>Machine Learning Algorithm Visualizer</div>\n        <div className=\"tabs\" style={{ \n          display: 'flex', \n          flexWrap: 'wrap',  \n          gap: '10px',       \n          justifyContent: 'flex-start'\n        }}>\n          {buttons.map(button => (\n            <button \n              key={button.id}\n              onClick={() => setActiveComponent(button.id)}\n              style={getButtonStyle(button.id)}\n            >\n              {button.label}\n            </button>\n          ))}\n        </div>\n      </header>\n      \n      <div style={{ padding: '20px' }}>\n        {componentMap[activeComponent]}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}