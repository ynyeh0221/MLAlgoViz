{"version":3,"sources":["components/NeuralNetworkFunctionApproximator.js","components/VAEVisualizer.js","components/GradientDescentAtSaddlePoint.js","App.js","reportWebVitals.js","index.js"],"names":["NeuralNetworkVisualization","layers","weights","setWeights","useState","biases","setBiases","learningRate","setLearningRate","epoch","setEpoch","isTraining","setIsTraining","approximationData","setApproximationData","targetData","setTargetData","loss","setLoss","canvasRef","useRef","animationRef","networkRef","useEffect","initializeNetwork","newWeights","newBiases","i","length","layerWeights","layerBiases","j","neuronWeights","k","stddev","Math","sqrt","push","random","current","generateFunctionData","currentWeights","currentBiases","extendedDomain","PI","newTargetData","x","y","sin","yApprox","boundaryExtraSamples","ratio","newApproximationData","map","point","forward","input","activation","layer","bias","newActivation","sum","sigmoid","exp","backward","target","activations","preActivations","preActivation","outputError","o","deltas","currentDelta","newDelta","error","derivative","unshift","JSON","parse","stringify","change","reduce","err","stopTraining","cancelAnimationFrame","_approximationData$sa","canvas","ctx","getContext","clearRect","width","height","layerSpacing","minSpacingNeeded","neurons","neuronRadius","neuronSpacings","idealSpacing","max","layerHeights","sampleIndex","currentSample","currentOutput","layerNeurons","layerHeight","startY","prevLayerNeurons","prevLayerHeight","prevStartY","prevSpacing","currentSpacing","prevX","prevY","w","absW","abs","weightColor","min","weightWidth","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","midX","midY","fillStyle","textWidth","measureText","toFixed","fillRect","font","fillText","arc","fill","textAlign","textBaseline","inputText","outputText","targetText","outputWidth","targetWidth","maxWidth","React","createElement","className","type","step","value","onChange","e","parseFloat","disabled","onClick","startTraining","frameCount","train","trainEpoch","totalLoss","shuffledData","sort","slice","forEach","prev","requestAnimationFrame","resetNetwork","ref","ResponsiveContainer","LineChart","margin","top","right","left","bottom","data","CartesianGrid","strokeDasharray","XAxis","dataKey","label","position","offset","domain","tickFormatter","YAxis","angle","Tooltip","formatter","name","Legend","Line","dot","strokeWidth","isAnimationActive","StableVAEVisualization","dimension1","setDimension1","dimension2","setDimension2","dimension3","setDimension3","diffusionMode","setDiffusionMode","generateFlower","dim1","dim2","dim3","flowerColor","floor","bloomFactor","shapeFactor","transform","d","cx","cy","r","Array","_","petalLength","controlPoint","key","cos","opacity","generateSmallFlower","viewBox","style","padding","fontFamily","marginBottom","backgroundColor","borderRadius","boxShadow","display","gridTemplateColumns","gap","border","fontSize","background","flexDirection","alignItems","marginTop","justifyContent","marginRight","color","cursor","generateLatentSpace","x1","y1","x2","y2","textAnchor","noiseX","noiseY","fontWeight","paddingLeft","OptimizerComparison","renderVisualization","d3","selectAll","remove","innerWidth","innerHeight","svg","append","attr","xScale","range","yScale","sgdData","adamData","adamWData","sgdLoss","adamLoss","adamWLoss","call","ticks","text","line","curve","datum","legend","saddle","saddleSize","saddleScale","points","z","colorScale","enter","id","App","activeComponent","setActiveComponent","borderBottom","transition","VAEVisualizer","GradientDescent","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.3f054c8f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Neural Network Visualization Component\nconst NeuralNetworkVisualization = () => {\n  // Fixed network structure: 1 input, four hidden layers with architecture adjustments, 1 output\n  const layers = [1, 12, 10, 8, 6, 1];\n  \n  // State variables\n  const [weights, setWeights] = useState([]); // Network weights\n  const [biases, setBiases] = useState([]); // Network biases\n  const [learningRate, setLearningRate] = useState(0.05); // Learning rate\n  const [epoch, setEpoch] = useState(0); // Current training epoch\n  const [isTraining, setIsTraining] = useState(false); // Training status\n  const [approximationData, setApproximationData] = useState([]); // Approximation function data\n  const [targetData, setTargetData] = useState([]); // Target function data\n  const [loss, setLoss] = useState(1.0); // Current loss\n\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  const networkRef = useRef({ weights: [], biases: [] });\n\n  // Initialize network\n  useEffect(() => {\n    initializeNetwork();\n  }, []);\n\n  // Initialize network weights and biases\n  const initializeNetwork = () => {\n    const newWeights = [];\n    const newBiases = [];\n    \n    for (let i = 0; i < layers.length - 1; i++) {\n      const layerWeights = [];\n      const layerBiases = [];\n      \n      for (let j = 0; j < layers[i + 1]; j++) {\n        const neuronWeights = [];\n        for (let k = 0; k < layers[i]; k++) {\n          // Initialize weights (using Xavier initialization)\n          const stddev = Math.sqrt(1.0 / (layers[i] + layers[i + 1]));\n          neuronWeights.push((Math.random() * 2 - 1) * stddev);\n        }\n        layerWeights.push(neuronWeights);\n        layerBiases.push((Math.random() * 2 - 1) * 0.05);\n      }\n      \n      newWeights.push(layerWeights);\n      newBiases.push(layerBiases);\n    }\n    \n    // Update component state\n    setWeights(newWeights);\n    setBiases(newBiases);\n    setEpoch(0);\n    setLoss(1.0);\n    \n    // Also update reference to ensure always using latest weights\n    networkRef.current = {\n      weights: newWeights,\n      biases: newBiases\n    };\n    \n    // Generate initial data\n    generateFunctionData(newWeights, newBiases);\n  };\n\n  // Generate target function data (more complex function with extended domain and higher boundary sampling)\n  const generateFunctionData = (currentWeights, currentBiases) => {\n    // Create two sets of samples:\n    // 1. Regular samples across the domain\n    // 2. Extra samples concentrated at boundaries\n    \n    const regularSamples = 40;\n    const boundaryExtraSamples = 20; // Extra samples focused on boundaries\n    const extendedDomain = 0.1 * Math.PI; // Extend domain by 10% of π\n    \n    const newTargetData = [];\n    \n    // Regular samples across the domain\n    for (let i = 0; i < regularSamples; i++) {\n      const x = -Math.PI - extendedDomain + ((2 * Math.PI + 2 * extendedDomain) * i) / (regularSamples - 1);\n      \n      // Complex target function: sin(x) + 0.5*sin(3x) * x^2/5\n      const y = Math.sin(x) + 0.5 * Math.sin(3 * x) * (x * x / 5);\n      \n      newTargetData.push({ x, y, yApprox: 0 });\n    }\n    \n    // Extra samples near left boundary\n    for (let i = 0; i < boundaryExtraSamples / 2; i++) {\n      const ratio = i / (boundaryExtraSamples / 2);\n      const x = -Math.PI - extendedDomain + ratio * Math.PI * 0.4; // Focus on first 40% of left side\n      \n      const y = Math.sin(x) + 0.5 * Math.sin(3 * x) * (x * x / 5);\n      newTargetData.push({ x, y, yApprox: 0 });\n    }\n    \n    // Extra samples near right boundary\n    for (let i = 0; i < boundaryExtraSamples / 2; i++) {\n      const ratio = i / (boundaryExtraSamples / 2);\n      const x = Math.PI * 0.6 + ratio * (Math.PI * 0.4 + extendedDomain); // Focus on last 40% of right side\n      \n      const y = Math.sin(x) + 0.5 * Math.sin(3 * x) * (x * x / 5);\n      newTargetData.push({ x, y, yApprox: 0 });\n    }\n    \n    setTargetData(newTargetData);\n    \n    // Calculate initial approximation function\n    if (currentWeights && currentWeights.length > 0) {\n      const newApproximationData = newTargetData.map(point => {\n        const yApprox = forward([point.x], currentWeights, currentBiases)[0];\n        return { x: point.x, y: point.y, yApprox };\n      });\n      \n      setApproximationData(newApproximationData);\n    }\n  };\n\n  // Forward propagation with SiLU (Swish) activation\n  const forward = (input, currentWeights, currentBiases) => {\n    let activation = [...input];\n    const weights = currentWeights || networkRef.current.weights;\n    const biases = currentBiases || networkRef.current.biases;\n    \n    for (let i = 0; i < weights.length; i++) {\n      const layer = weights[i];\n      const bias = biases[i];\n      const newActivation = [];\n      \n      for (let j = 0; j < layer.length; j++) {\n        const neuronWeights = layer[j];\n        let sum = bias[j];\n        \n        for (let k = 0; k < neuronWeights.length; k++) {\n          sum += neuronWeights[k] * activation[k];\n        }\n        \n        // Use SiLU/Swish activation function (x * sigmoid(x)) for hidden layers\n        if (i < weights.length - 1) {\n          // SiLU/Swish: x * sigmoid(x)\n          const sigmoid = 1 / (1 + Math.exp(-sum));\n          newActivation.push(sum * sigmoid);\n        } else {\n          newActivation.push(sum); // No activation function for output layer\n        }\n      }\n      \n      activation = [...newActivation];\n    }\n    \n    return activation;\n  };\n\n  // Backward propagation with SiLU derivative\n  const backward = (input, target) => {\n    const weights = networkRef.current.weights;\n    const biases = networkRef.current.biases;\n    \n    // Forward pass and save activations and pre-activations for each layer\n    const activations = [input]; // Outputs after activation\n    const preActivations = []; // Inputs before activation\n    let activation = [...input];\n    \n    for (let i = 0; i < weights.length; i++) {\n      const layer = weights[i];\n      const bias = biases[i];\n      const newActivation = [];\n      const preActivation = [];\n      \n      for (let j = 0; j < layer.length; j++) {\n        const neuronWeights = layer[j];\n        let sum = bias[j];\n        \n        for (let k = 0; k < neuronWeights.length; k++) {\n          sum += neuronWeights[k] * activation[k];\n        }\n        \n        preActivation.push(sum);\n        \n        // Use SiLU activation for hidden layers\n        if (i < weights.length - 1) {\n          const sigmoid = 1 / (1 + Math.exp(-sum));\n          newActivation.push(sum * sigmoid);\n        } else {\n          newActivation.push(sum);\n        }\n      }\n      \n      preActivations.push(preActivation);\n      activation = [...newActivation];\n      activations.push(newActivation);\n    }\n    \n    // Calculate output layer error\n    const output = activations[activations.length - 1];\n    const outputError = output.map((o, i) => o - target[i]);\n    \n    // Backpropagate error\n    const deltas = [outputError];\n    \n    for (let i = weights.length - 1; i > 0; i--) {\n      const currentDelta = deltas[0];\n      const newDelta = [];\n      \n      for (let j = 0; j < layers[i]; j++) {\n        let error = 0;\n        \n        for (let k = 0; k < currentDelta.length; k++) {\n          error += currentDelta[k] * weights[i][k][j];\n        }\n        \n        // SiLU/Swish derivative: sigmoid(x) + x*sigmoid(x)*(1-sigmoid(x))\n        const x = preActivations[i-1][j];\n        const sigmoid = 1 / (1 + Math.exp(-x));\n        const derivative = sigmoid + x * sigmoid * (1 - sigmoid);\n        \n        newDelta.push(error * derivative);\n      }\n      \n      deltas.unshift(newDelta);\n    }\n    \n    // Create deep copies of weights and biases\n    const newWeights = JSON.parse(JSON.stringify(weights));\n    const newBiases = JSON.parse(JSON.stringify(biases));\n    \n    // Update weights and biases\n    for (let i = 0; i < weights.length; i++) {\n      for (let j = 0; j < weights[i].length; j++) {\n        for (let k = 0; k < weights[i][j].length; k++) {\n          const change = learningRate * deltas[i][j] * activations[i][k];\n          newWeights[i][j][k] -= change;\n        }\n        \n        newBiases[i][j] -= learningRate * deltas[i][j];\n      }\n    }\n    \n    // Update reference and state\n    networkRef.current = {\n      weights: newWeights,\n      biases: newBiases\n    };\n    \n    setWeights([...newWeights]);\n    setBiases([...newBiases]);\n    \n    // Calculate mean squared error\n    return outputError.reduce((sum, err) => sum + err * err, 0) / outputError.length;\n  };\n\n  // Train one epoch\n  const trainEpoch = () => {\n    let totalLoss = 0;\n    \n    // Randomly shuffle training data\n    const shuffledData = [...targetData].sort(() => Math.random() - 0.5);\n    \n    // Mini-batch gradient descent\n    const batchSize = 10;\n    for (let i = 0; i < shuffledData.length; i += batchSize) {\n      const batch = shuffledData.slice(i, Math.min(i + batchSize, shuffledData.length));\n      \n      batch.forEach(point => {\n        const error = backward([point.x], [point.y]);\n        totalLoss += error;\n      });\n    }\n    \n    totalLoss /= shuffledData.length;\n    \n    // Update approximation function data\n    const newApproximationData = targetData.map(point => {\n      const yApprox = forward([point.x], networkRef.current.weights, networkRef.current.biases)[0];\n      return { x: point.x, y: point.y, yApprox };\n    });\n    \n    // Update UI state\n    setApproximationData([...newApproximationData]);\n    setLoss(totalLoss);\n    setEpoch(prev => prev + 1);\n    \n    // For more complex functions, allow more training epochs before stopping\n    return (totalLoss < 0.0001 && epoch >= 300) || epoch >= 2000;\n  };\n\n  // Start training\n  const startTraining = () => {\n    if (isTraining) return;\n    \n    setIsTraining(true);\n    let frameCount = 0;\n    \n    const train = () => {\n      frameCount++;\n      \n      // Execute training every few frames to avoid UI blocking\n      if (frameCount % 3 === 0) {\n        const converged = trainEpoch();\n        \n        if (converged || epoch >= 1000) {\n          setIsTraining(false);\n          return;\n        }\n      }\n      \n      animationRef.current = requestAnimationFrame(train);\n    };\n    \n    animationRef.current = requestAnimationFrame(train);\n  };\n\n  // Stop training\n  const stopTraining = () => {\n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current);\n    }\n    setIsTraining(false);\n  };\n\n  // Reset network\n  const resetNetwork = () => {\n    stopTraining();\n    initializeNetwork();\n  };\n\n  // Draw neural network\n  useEffect(() => {\n    if (!canvasRef.current) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Adjust canvas size for better visibility\n    canvas.width = 700; // Increase canvas width\n    canvas.height = 500; // Increase canvas height\n    \n    const margin = 70; // Increased margin\n    const width = canvas.width - 2 * margin;\n    const height = canvas.height - 2 * margin;\n    \n    const layerSpacing = width / (layers.length - 1);\n    const neuronRadius = 12; // Reduced neuron radius\n    \n    // Calculate minimum spacing needed for each layer\n    const minSpacingNeeded = layers.map(neurons => {\n      // At least 2.5 * neuron diameter between centers to avoid overlap\n      return neuronRadius * 5;\n    });\n    \n    // Calculate actual spacing based on available height and neurons\n    const neuronSpacings = layers.map((neurons, i) => {\n      const idealSpacing = height / (neurons);\n      // Use at least minimum spacing or ideal spacing, whichever is larger\n      return Math.max(minSpacingNeeded[i], idealSpacing);\n    });\n    \n    // Calculate layer heights\n    const layerHeights = layers.map((neurons, i) => (neurons - 1) * neuronSpacings[i]);\n    \n    // Select current data sample for display\n    const sampleIndex = epoch % targetData.length;\n    const currentSample = targetData[sampleIndex] || { x: 0, y: 0 };\n    \n    // Calculate network output for current sample\n    const currentOutput = approximationData[sampleIndex]?.yApprox || 0;\n    \n    // Draw neurons and connections\n    for (let i = 0; i < layers.length; i++) {\n      const layerNeurons = layers[i];\n      const layerHeight = layerHeights[i];\n      const startY = margin + (height - layerHeight) / 2;\n      \n      // Draw connections first (so neurons are drawn on top)\n      if (i > 0) {\n        const prevLayerNeurons = layers[i - 1];\n        const prevLayerHeight = layerHeights[i - 1];\n        const prevStartY = margin + (height - prevLayerHeight) / 2;\n        const prevSpacing = neuronSpacings[i-1];\n        const currentSpacing = neuronSpacings[i];\n        \n        for (let j = 0; j < layerNeurons; j++) {\n          const x = margin + i * layerSpacing;\n          const y = startY + j * currentSpacing;\n          \n          for (let k = 0; k < prevLayerNeurons; k++) {\n            const prevX = margin + (i - 1) * layerSpacing;\n            const prevY = prevStartY + k * prevSpacing;\n            \n            // Set connection color and width based on weight\n            if (networkRef.current.weights.length > 0 && i - 1 < networkRef.current.weights.length) {\n              const w = networkRef.current.weights[i - 1][j] ? networkRef.current.weights[i - 1][j][k] || 0 : 0;\n              const absW = Math.abs(w);\n              \n              // Only draw connections with significant weights\n              if (absW > 0.05) {\n                // Weight color: green for positive, red for negative\n                const weightColor = w > 0 ? `rgba(0, 128, 0, ${Math.min(absW, 1)})` : `rgba(255, 0, 0, ${Math.min(absW, 1)})`;\n                \n                // Weight width: thicker for larger absolute values\n                const weightWidth = 0.5 + 2 * Math.min(absW, 1);\n                \n                ctx.beginPath();\n                ctx.moveTo(prevX + neuronRadius, prevY);\n                ctx.lineTo(x - neuronRadius, y);\n                ctx.strokeStyle = weightColor;\n                ctx.lineWidth = weightWidth;\n                ctx.stroke();\n                \n                // Only show weight values for significant weights\n                if (absW > 0.3) {\n                  // Show weight value\n                  const midX = (prevX + neuronRadius + x - neuronRadius) / 2;\n                  const midY = (prevY + y) / 2;\n                  \n                  // White background for text clarity\n                  ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n                  const textWidth = ctx.measureText(w.toFixed(2)).width;\n                  ctx.fillRect(midX - textWidth/2 - 2, midY - 7, textWidth + 4, 14);\n                  \n                  ctx.fillStyle = '#000000';\n                  ctx.font = '9px Arial';\n                  ctx.fillText(w.toFixed(2), midX, midY);\n                }\n              }\n            }\n          }\n        }\n      }\n      \n      // Now draw neurons on top of connections\n      for (let j = 0; j < layerNeurons; j++) {\n        const x = margin + i * layerSpacing;\n        const y = startY + j * neuronSpacings[i];\n        \n        // Draw neuron\n        ctx.beginPath();\n        ctx.arc(x, y, neuronRadius, 0, 2 * Math.PI);\n        ctx.fillStyle = i === 0 ? '#88CCEE' : i === layers.length - 1 ? '#DDCC77' : '#44AA99';\n        ctx.fill();\n        ctx.strokeStyle = '#000000';\n        ctx.lineWidth = 1;\n        ctx.stroke();\n        \n        // Show neuron number\n        ctx.fillStyle = '#000000';\n        ctx.font = '9px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText(`${i+1}-${j+1}`, x, y);\n        \n        // Show input/output values - fixed position and display\n        if (i === 0) { // Input layer\n          ctx.fillStyle = '#000000';\n          ctx.font = 'bold 10px Arial';\n          ctx.textAlign = 'right';\n          \n          // Add background for better text clarity\n          const inputText = `Input x: ${currentSample.x.toFixed(2)}`;\n          const textWidth = ctx.measureText(inputText).width;\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.fillRect(x - neuronRadius - 8 - textWidth, y - 7, textWidth + 4, 14);\n          \n          ctx.fillStyle = '#000000';\n          ctx.fillText(inputText, x - neuronRadius - 8, y);\n        } else if (i === layers.length - 1) { // Output layer\n          // Add background box for output\n          const outputText = `Output: ${currentOutput.toFixed(2)}`;\n          const targetText = `Target: ${currentSample.y.toFixed(2)}`;\n          \n          const outputWidth = ctx.measureText(outputText).width;\n          const targetWidth = ctx.measureText(targetText).width;\n          const maxWidth = Math.max(outputWidth, targetWidth);\n          \n          ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n          ctx.fillRect(x + neuronRadius + 8, y - 15, maxWidth + 8, 30);\n          \n          ctx.fillStyle = '#0000AA';\n          ctx.font = 'bold 10px Arial';\n          ctx.textAlign = 'left';\n          ctx.fillText(outputText, x + neuronRadius + 12, y - 5);\n          \n          ctx.fillStyle = '#AA0000';\n          ctx.fillText(targetText, x + neuronRadius + 12, y + 10);\n        }\n      }\n    }\n  }, [weights, epoch, targetData, approximationData]);\n\n  // Cleanup on component unmount\n  useEffect(() => {\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, []);\n\n  // Render component\n  return (\n    <div className=\"w-full p-4 bg-white\">\n      <h2 className=\"text-xl font-bold mb-4 text-center\">Neural Network Learning Visualization (Complex Function)</h2>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n        <div className=\"bg-gray-50 p-4 rounded\">\n          <h3 className=\"text-lg font-semibold mb-2\">Control Panel</h3>\n          \n          <div className=\"mb-4\">\n            <p className=\"text-sm mb-2\">Network Structure: 1-12-10-8-6-1 (fixed, pyramid architecture)</p>\n            <label className=\"block text-sm font-medium mb-1\">Learning Rate: {learningRate.toFixed(3)}</label>\n            <input\n              type=\"range\"\n              min=\"0.001\"\n              max=\"0.2\"\n              step=\"0.001\"\n              value={learningRate}\n              onChange={e => setLearningRate(parseFloat(e.target.value))}\n              className=\"w-full\"\n              disabled={isTraining}\n            />\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <button\n              onClick={isTraining ? stopTraining : startTraining}\n              className={`px-4 py-2 rounded ${isTraining ? 'bg-red-500 hover:bg-red-600' : 'bg-green-500 hover:bg-green-600'} text-white font-medium`}\n            >\n              {isTraining ? 'Stop Training' : 'Start Training'}\n            </button>\n            \n            <button\n              onClick={resetNetwork}\n              className=\"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-medium rounded\"\n              disabled={isTraining}\n            >\n              Reset Network\n            </button>\n          </div>\n          \n          <div className=\"mt-4\">\n            <p className=\"text-sm\">Current Epoch: <span className=\"font-semibold\">{epoch}</span></p>\n            <p className=\"text-sm\">Current Loss: <span className=\"font-semibold\">{loss.toFixed(6)}</span></p>\n          </div>\n        </div>\n        \n        <div className=\"bg-gray-50 p-4 rounded\">\n          <h3 className=\"text-lg font-semibold mb-2\">Network Structure Visualization</h3>\n          <div className=\"border rounded bg-white\">\n            <canvas ref={canvasRef} width=\"500\" height=\"300\" className=\"w-full h-64\" />\n          </div>\n          <p className=\"text-xs mt-1 text-gray-500\">Colors represent weights: green for positive, red for negative. Line thickness indicates weight magnitude.</p>\n        </div>\n      </div>\n      \n      <div className=\"bg-gray-50 p-4 rounded\">\n        <h3 className=\"text-lg font-semibold mb-2\">Function Approximation</h3>\n        <div className=\"border rounded bg-white\">\n          <ResponsiveContainer width=\"100%\" height={300}>\n            <LineChart\n              margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n              data={approximationData}\n            >\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis\n                dataKey=\"x\"\n                label={{ value: 'x', position: 'bottom', offset: 0 }}\n                domain={[-Math.PI * 1.1, Math.PI * 1.1]}\n                tickFormatter={(value) => value.toFixed(2)}\n              />\n              <YAxis\n                label={{ value: 'y', angle: -90, position: 'left', offset: -5 }}\n                domain={[-2, 2]}\n              />\n              <Tooltip formatter={(value, name) => [value.toFixed(4), name]} />\n              <Legend />\n              <Line\n                type=\"monotone\"\n                dataKey=\"y\"\n                name=\"Target Function\"\n                stroke=\"#8884d8\"\n                dot={false}\n                strokeWidth={2}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"yApprox\"\n                name=\"Approximation Function\"\n                stroke=\"#82ca9d\"\n                dot={false}\n                strokeWidth={2}\n                isAnimationActive={false}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"mt-2 text-sm\">\n          <p><span className=\"inline-block w-4 h-2 bg-purple-500 mr-1\"></span> Target Function: sin(x) + 0.5*sin(3x) * x²/5</p>\n          <p><span className=\"inline-block w-4 h-2 bg-green-500 mr-1\"></span> Approximation Function: Current network output</p>\n        </div>\n      </div>\n      \n      <div className=\"mt-4 p-4 bg-gray-50 rounded\">\n        <h3 className=\"text-lg font-semibold mb-2\">Training Data and Backpropagation</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-medium mb-1\">Training Data Generation</h4>\n            <p className=\"text-sm mb-1\">How training data is created:</p>\n            <ol className=\"text-sm list-decimal list-inside space-y-1\">\n              <li>Sample 50 x values uniformly in range [-π, π]</li>\n              <li>For each x, calculate y = sin(x) as the target</li>\n              <li>These (x, y) pairs form the training dataset</li>\n              <li>During training, samples are randomly selected</li>\n            </ol>\n          </div>\n          <div>\n            <h4 className=\"font-medium mb-1\">Backpropagation Process</h4>\n            <p className=\"text-sm\">\n              Backpropagation is the core learning algorithm for neural networks:\n            </p>\n            <ul className=\"text-sm list-disc list-inside space-y-1\">\n              <li>Green/red connections show weight values and changes</li>\n              <li>Input node displays current sample's x value</li>\n              <li>Output node shows both network output and target value</li>\n              <li>As training progresses, the approximation function (green line) gets closer to the target function (purple line)</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NeuralNetworkVisualization;\n","import React, { useState } from 'react';\n\nconst StableVAEVisualization = () => {\n  // Latent vector dimensions with initial values\n  const [dimension1, setDimension1] = useState(0);\n  const [dimension2, setDimension2] = useState(0);\n  const [dimension3, setDimension3] = useState(0);\n  \n  // Mode switching\n  const [diffusionMode, setDiffusionMode] = useState(false);\n  \n  // Function to generate SVG representation of flower\n  const generateFlower = (dim1, dim2, dim3) => {\n    // Color interpolation from red to blue\n    const redValue = Math.max(0, Math.min(255, 255 - Math.floor((dim1 + 1) * 127.5)));\n    const blueValue = Math.max(0, Math.min(255, Math.floor((dim1 + 1) * 127.5)));\n    const flowerColor = `rgb(${redValue}, 50, ${blueValue})`;\n    \n    // Bloom level affects petal size\n    const bloomFactor = Math.max(0.1, (dim2 + 1) * 0.45 + 0.1); // 0.1 to 1.0\n    \n    // Shape factor affects petal shape\n    const shapeFactor = dim3; // -1 to 1\n    \n    // Stem\n    const stemHeight = 80;\n    const stemWidth = 4;\n    \n    return (\n      <g transform=\"translate(50, 50)\">\n        {/* Stem */}\n        <rect \n          x={-stemWidth/2} \n          y={0} \n          width={stemWidth} \n          height={stemHeight} \n          fill=\"#2E8B57\" \n        />\n        \n        {/* Leaf */}\n        <path \n          d={`M ${-stemWidth/2},${stemHeight*0.5} C ${-20},${stemHeight*0.4} ${-25},${stemHeight*0.6} ${-10},${stemHeight*0.7}`} \n          fill=\"#3CB371\" \n          stroke=\"#2E8B57\" \n          strokeWidth=\"1\" \n        />\n        \n        {/* Flower center */}\n        <circle cx=\"0\" cy=\"0\" r={10 * bloomFactor} fill=\"#FFD700\" />\n        \n        {/* Petals */}\n        {[...Array(shapeFactor < 0 ? 5 : 8)].map((_, i) => {\n          const angle = (i * 2 * Math.PI) / (shapeFactor < 0 ? 5 : 8);\n          const petalLength = 25 * bloomFactor;\n          const controlPointFactor = shapeFactor < 0 ? 0.4 : 0.8;\n          const controlPoint = petalLength * controlPointFactor;\n          \n          return (\n            <path\n              key={i}\n              d={`\n                M 0,0\n                Q ${Math.cos(angle) * controlPoint},${Math.sin(angle) * controlPoint} \n                  ${Math.cos(angle) * petalLength},${Math.sin(angle) * petalLength}\n                Q ${Math.cos(angle + 0.2) * controlPoint},${Math.sin(angle + 0.2) * controlPoint}\n                  0,0\n              `}\n              fill={flowerColor}\n              stroke={flowerColor}\n              strokeWidth=\"1\"\n              opacity=\"0.9\"\n            />\n          );\n        })}\n      </g>\n    );\n  };\n  \n  // Generate small example flower\n  const generateSmallFlower = (dim1, dim2, dim3) => {\n    return (\n      <svg width=\"60\" height=\"60\" viewBox=\"0 0 100 100\">\n        {generateFlower(dim1, dim2, dim3)}\n      </svg>\n    );\n  };\n  \n  // Generate latent space visualization\n  const generateLatentSpace = () => {\n    // Training point coordinates\n    const trainingPoints = [\n      { x: 25, y: 25, color: \"#3498db\" },  // top-left\n      { x: 75, y: 25, color: \"#3498db\" },  // top-right\n      { x: 25, y: 75, color: \"#3498db\" },  // bottom-left\n      { x: 75, y: 75, color: \"#3498db\" }   // bottom-right\n    ];\n    \n    // Current point coordinates\n    const x = 50 + dimension1 * 25;\n    const y = 50 + dimension2 * 25;\n    \n    return (\n      <svg width=\"180\" height=\"180\" style={{backgroundColor: \"#f0f9ff\", border: \"1px solid #3498db\"}}>\n        {/* Grid lines */}\n        <line x1=\"0\" y1=\"90\" x2=\"180\" y2=\"90\" stroke=\"#3498db\" strokeWidth=\"1\" />\n        <line x1=\"90\" y1=\"0\" x2=\"90\" y2=\"180\" stroke=\"#3498db\" strokeWidth=\"1\" />\n        \n        {/* Axis labels */}\n        <text x=\"170\" y=\"85\" fontSize=\"12\" textAnchor=\"end\">Color</text>\n        <text x=\"95\" y=\"15\" fontSize=\"12\" textAnchor=\"start\">Shape</text>\n        <text x=\"95\" y=\"175\" fontSize=\"12\" textAnchor=\"start\">Bloom</text>\n        \n        {/* Training points */}\n        {trainingPoints.map((point, i) => (\n          <circle key={i} cx={point.x} cy={point.y} r=\"8\" fill={point.color} opacity=\"0.6\" />\n        ))}\n        \n        {/* Current point */}\n        <circle cx={x} cy={y} r=\"10\" fill=\"#e74c3c\" />\n        \n        {/* Diffusion noise */}\n        {diffusionMode && [...Array(10)].map((_, i) => {\n          const noiseX = x + (Math.random() - 0.5) * 20;\n          const noiseY = y + (Math.random() - 0.5) * 20;\n          return (\n            <circle key={i} cx={noiseX} cy={noiseY} r=\"3\" fill=\"#e74c3c\" opacity=\"0.3\" />\n          );\n        })}\n      </svg>\n    );\n  };\n  \n  // Main render\n  return (\n    <div style={{maxWidth: \"800px\", margin: \"0 auto\", padding: \"20px\", fontFamily: \"Arial, sans-serif\"}}>\n      <h1 style={{textAlign: \"center\", marginBottom: \"20px\"}}>VAE Latent Space Exploration</h1>\n      \n      {/* Training data section */}\n      <div style={{marginBottom: \"30px\", backgroundColor: \"white\", padding: \"15px\", borderRadius: \"8px\", boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"}}>\n        <h2 style={{marginBottom: \"15px\"}}>How VAEs Represent Images</h2>\n        \n        <div style={{display: \"grid\", gridTemplateColumns: \"repeat(3, 1fr)\", gap: \"10px\"}}>\n          <div style={{border: \"1px solid #eee\", padding: \"10px\", borderRadius: \"8px\", backgroundColor: \"#f8f8f8\"}}>\n            <h3 style={{textAlign: \"center\", marginBottom: \"10px\", fontSize: \"16px\"}}>Training Data</h3>\n            <div style={{display: \"grid\", gridTemplateColumns: \"1fr 1fr\", gap: \"8px\"}}>\n              {generateSmallFlower(-0.8, 0.7, 0.2)}\n              {generateSmallFlower(0.8, 0.6, 0.3)}\n              {generateSmallFlower(-0.7, -0.8, 0.1)}\n              {generateSmallFlower(0.7, -0.5, -0.7)}\n            </div>\n          </div>\n          \n          <div style={{border: \"1px solid #eee\", padding: \"10px\", borderRadius: \"8px\", backgroundColor: \"#f8f8f8\", textAlign: \"center\"}}>\n            <h3 style={{marginBottom: \"10px\", fontSize: \"16px\"}}>Learned Dimensions</h3>\n            <div style={{marginBottom: \"8px\"}}>\n              <div style={{height: \"12px\", background: \"linear-gradient(to right, red, blue)\", borderRadius: \"3px\", marginBottom: \"4px\"}}></div>\n              <div style={{fontSize: \"14px\"}}>Dimension 1: Color</div>\n            </div>\n            <div style={{marginBottom: \"8px\"}}>\n              <div style={{height: \"12px\", background: \"linear-gradient(to right, #e0f7e0, #2e8b57)\", borderRadius: \"3px\", marginBottom: \"4px\"}}></div>\n              <div style={{fontSize: \"14px\"}}>Dimension 2: Bloom</div>\n            </div>\n            <div>\n              <div style={{height: \"12px\", background: \"linear-gradient(to right, #f0e6f6, #8e44ad)\", borderRadius: \"3px\", marginBottom: \"4px\"}}></div>\n              <div style={{fontSize: \"14px\"}}>Dimension 3: Shape</div>\n            </div>\n          </div>\n          \n          <div style={{border: \"1px solid #eee\", padding: \"10px\", borderRadius: \"8px\", backgroundColor: \"#f8f8f8\", display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}}>\n            <h3 style={{marginBottom: \"10px\", fontSize: \"16px\"}}>Continuous Latent Space</h3>\n            <div style={{position: \"relative\", width: \"100px\", height: \"100px\", border: \"1px solid #3498db\", borderRadius: \"4px\", marginTop: \"10px\"}}>\n              <div style={{position: \"absolute\", top: \"45%\", width: \"100%\", height: \"1px\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"50%\", height: \"100%\", width: \"1px\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"25%\", top: \"25%\", width: \"8px\", height: \"8px\", borderRadius: \"50%\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"75%\", top: \"25%\", width: \"8px\", height: \"8px\", borderRadius: \"50%\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"25%\", top: \"75%\", width: \"8px\", height: \"8px\", borderRadius: \"50%\", backgroundColor: \"#3498db\"}}></div>\n              <div style={{position: \"absolute\", left: \"75%\", top: \"75%\", width: \"8px\", height: \"8px\", borderRadius: \"50%\", backgroundColor: \"#3498db\"}}></div>\n            </div>\n            <div style={{fontSize: \"14px\", marginTop: \"10px\"}}>Any point = a flower</div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Interactive section */}\n      <div style={{marginBottom: \"30px\", backgroundColor: \"white\", padding: \"15px\", borderRadius: \"8px\", boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"}}>\n        <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginBottom: \"15px\"}}>\n          <h2 style={{margin: 0}}>Explore Latent Space</h2>\n          <div>\n            <button \n              onClick={() => setDiffusionMode(true)}\n              style={{\n                padding: \"8px 12px\",\n                marginRight: \"8px\",\n                backgroundColor: diffusionMode ? \"#8e44ad\" : \"#f0f0f0\",\n                color: diffusionMode ? \"white\" : \"black\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                cursor: \"pointer\"\n              }}\n            >\n              Try Latent Diffusion\n            </button>\n            <button \n              onClick={() => setDiffusionMode(false)}\n              style={{\n                padding: \"8px 12px\",\n                backgroundColor: !diffusionMode ? \"#3498db\" : \"#f0f0f0\",\n                color: !diffusionMode ? \"white\" : \"black\",\n                border: \"none\",\n                borderRadius: \"4px\",\n                cursor: \"pointer\"\n              }}\n            >\n              Basic Generation\n            </button>\n          </div>\n        </div>\n        \n        <div style={{display: \"grid\", gridTemplateColumns: \"1fr 1fr 1fr\", gap: \"15px\"}}>\n          {/* Sliders */}\n          <div>\n            <h3 style={{marginBottom: \"15px\", fontSize: \"16px\"}}>Adjust Latent Vector</h3>\n            \n            <div style={{marginBottom: \"20px\"}}>\n              <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"5px\"}}>\n                <label>Flower Color:</label>\n                <span style={{color: \"#3498db\"}}>{dimension1.toFixed(2)}</span>\n              </div>\n              <input \n                type=\"range\" \n                min=\"-1.5\" \n                max=\"1.5\" \n                step=\"0.01\" \n                value={dimension1} \n                onChange={(e) => setDimension1(parseFloat(e.target.value))} \n                style={{width: \"100%\"}}\n              />\n              <div style={{display: \"flex\", justifyContent: \"space-between\", fontSize: \"12px\", color: \"#666\"}}>\n                <span>Red</span>\n                <span>Purple</span>\n                <span>Blue</span>\n              </div>\n            </div>\n            \n            <div style={{marginBottom: \"20px\"}}>\n              <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"5px\"}}>\n                <label>Bloom Stage:</label>\n                <span style={{color: \"#3498db\"}}>{dimension2.toFixed(2)}</span>\n              </div>\n              <input \n                type=\"range\" \n                min=\"-1.5\" \n                max=\"1.5\" \n                step=\"0.01\" \n                value={dimension2} \n                onChange={(e) => setDimension2(parseFloat(e.target.value))} \n                style={{width: \"100%\"}}\n              />\n              <div style={{display: \"flex\", justifyContent: \"space-between\", fontSize: \"12px\", color: \"#666\"}}>\n                <span>Bud</span>\n                <span>Partial</span>\n                <span>Full Bloom</span>\n              </div>\n            </div>\n            \n            <div>\n              <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: \"5px\"}}>\n                <label>Flower Shape:</label>\n                <span style={{color: \"#3498db\"}}>{dimension3.toFixed(2)}</span>\n              </div>\n              <input \n                type=\"range\" \n                min=\"-1.5\" \n                max=\"1.5\" \n                step=\"0.01\" \n                value={dimension3} \n                onChange={(e) => setDimension3(parseFloat(e.target.value))} \n                style={{width: \"100%\"}}\n              />\n              <div style={{display: \"flex\", justifyContent: \"space-between\", fontSize: \"12px\", color: \"#666\"}}>\n                <span>Tulip-like</span>\n                <span>Mixed</span>\n                <span>Rose-like</span>\n              </div>\n            </div>\n          </div>\n          \n          {/* Latent Space */}\n          <div style={{textAlign: \"center\"}}>\n            <h3 style={{marginBottom: \"15px\", fontSize: \"16px\"}}>Latent Space</h3>\n            {generateLatentSpace()}\n            {(Math.abs(dimension1) > 1 || Math.abs(dimension2) > 1 || Math.abs(dimension3) > 1) && (\n              <div style={{\n                fontSize: \"12px\", \n                padding: \"4px 8px\", \n                backgroundColor: \"#fff9e0\", \n                borderRadius: \"4px\", \n                marginTop: \"8px\",\n                display: \"inline-block\"\n              }}>\n                Exploring beyond training data!\n              </div>\n            )}\n          </div>\n          \n          {/* Generated Flower */}\n          <div style={{textAlign: \"center\"}}>\n            <h3 style={{marginBottom: \"15px\", fontSize: \"16px\"}}>Generated Flower</h3>\n            <svg width=\"180\" height=\"180\" viewBox=\"0 0 100 100\" style={{backgroundColor: \"#f8f8f8\", borderRadius: \"4px\"}}>\n              {generateFlower(dimension1, dimension2, dimension3)}\n            </svg>\n            \n            {diffusionMode && (\n              <div style={{marginTop: \"10px\", padding: \"8px\", backgroundColor: \"white\", borderRadius: \"4px\", boxShadow: \"0 1px 3px rgba(0,0,0,0.1)\"}}>\n                <p style={{fontSize: \"14px\", marginBottom: \"5px\", fontWeight: \"500\"}}>Diffusion Process</p>\n                <div style={{display: \"flex\", justifyContent: \"center\", gap: \"5px\"}}>\n                  {[...Array(5)].map((_, i) => {\n                    const opacity = 0.2 + (i / 5) * 0.8;\n                    return (\n                      <div key={i} style={{opacity}}>\n                        <svg width=\"32\" height=\"32\" viewBox=\"0 0 100 100\" style={{backgroundColor: \"#f0f0f0\", borderRadius: \"2px\"}}>\n                          {generateFlower(\n                            dimension1 + (0.5 - i/10) * (Math.random() - 0.5), \n                            dimension2 + (0.5 - i/10) * (Math.random() - 0.5), \n                            dimension3 + (0.5 - i/10) * (Math.random() - 0.5)\n                          )}\n                        </svg>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Explanation */}\n      <div style={{backgroundColor: \"white\", padding: \"15px\", borderRadius: \"8px\", boxShadow: \"0 2px 4px rgba(0,0,0,0.1)\"}}>\n        <h2 style={{marginBottom: \"15px\"}}>How VAEs & Latent Diffusion Work</h2>\n        \n        <div style={{marginBottom: \"20px\"}}>\n          <h3 style={{fontSize: \"18px\", marginBottom: \"10px\"}}>VAE Latent Space</h3>\n          <p style={{marginBottom: \"10px\"}}>Variational Autoencoders (VAEs) learn to compress images into a continuous latent space where:</p>\n          <ul style={{paddingLeft: \"20px\", marginBottom: \"10px\"}}>\n            <li>Similar features are mapped to similar regions</li>\n            <li>Each dimension controls a specific visual attribute</li>\n            <li>The space is continuous, allowing smooth interpolation</li>\n            <li>Novel combinations beyond training data can be generated</li>\n          </ul>\n        </div>\n        \n        <div>\n          <h3 style={{fontSize: \"18px\", marginBottom: \"10px\"}}>Latent Diffusion</h3>\n          <p style={{marginBottom: \"10px\"}}>Diffusion models like Stable Diffusion extend this by:</p>\n          <ol style={{paddingLeft: \"20px\"}}>\n            <li>Adding noise to latent vectors to create variations</li>\n            <li>Learning to remove noise in a controlled way</li>\n            <li>Enabling text-guided latent space navigation</li>\n            <li>Allowing for creative generation beyond the training distribution</li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default StableVAEVisualization;\n","import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\n\nconst OptimizerComparison = () => {\n  useEffect(() => {\n    renderVisualization();\n    return () => d3.select('#viz-container').selectAll('*').remove();\n  }, []);\n  \n  const renderVisualization = () => {\n    // Setup\n    const width = 600, height = 500;\n    const margin = { top: 40, right: 40, bottom: 40, left: 40 };\n    const innerWidth = width - margin.left - margin.right;\n    const innerHeight = height - margin.top - margin.bottom;\n    \n    const svg = d3.select('#viz-container')\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n    \n    // Loss curves\n    const iterations = 100;\n    const xScale = d3.scaleLinear()\n      .domain([0, iterations])\n      .range([0, innerWidth]);\n    \n    const yScale = d3.scaleLinear()\n      .domain([0, 1])\n      .range([innerHeight, 0]);\n    \n    // Generate loss data for different optimizers\n    const sgdData = [];\n    const adamData = [];\n    const adamWData = [];\n    \n    for (let i = 0; i <= iterations; i++) {\n      // SGD has long plateau at saddle point\n      let sgdLoss = 0;\n      if (i <= 30) sgdLoss = Math.exp(-0.05 * i) * 0.8 + 0.2;\n      else if (i <= 80) sgdLoss = 0.2 - 0.001 * (i - 30); // Long plateau\n      else sgdLoss = 0.15 - 0.005 * (i - 80);\n      \n      // Adam moves through saddle point efficiently\n      let adamLoss = 0;\n      if (i <= 30) adamLoss = Math.exp(-0.05 * i) * 0.8 + 0.2;\n      else if (i <= 40) adamLoss = 0.2 - 0.005 * (i - 30); // Brief plateau\n      else adamLoss = 0.15 * Math.exp(-0.05 * (i - 40)) + 0.05;\n      \n      // AdamW handles saddle point even better with weight decay\n      let adamWLoss = 0;\n      if (i <= 30) adamWLoss = Math.exp(-0.05 * i) * 0.8 + 0.2;\n      else if (i <= 37) adamWLoss = 0.2 - 0.008 * (i - 30); // Even shorter plateau\n      else adamWLoss = 0.12 * Math.exp(-0.06 * (i - 37)) + 0.03;\n      \n      sgdData.push({ x: i, y: sgdLoss });\n      adamData.push({ x: i, y: adamLoss });\n      adamWData.push({ x: i, y: adamWLoss });\n    }\n    \n    // Draw axes\n    svg.append('g')\n      .attr('transform', `translate(0, ${innerHeight})`)\n      .call(d3.axisBottom(xScale).ticks(5))\n      .append('text')\n      .attr('x', innerWidth / 2)\n      .attr('y', 35)\n      .attr('fill', 'black')\n      .attr('text-anchor', 'middle')\n      .text('Iterations');\n    \n    svg.append('g')\n      .call(d3.axisLeft(yScale).ticks(5))\n      .append('text')\n      .attr('transform', 'rotate(-90)')\n      .attr('x', -innerHeight / 2)\n      .attr('y', -35)\n      .attr('fill', 'black')\n      .attr('text-anchor', 'middle')\n      .text('Loss');\n    \n    // Create line generator\n    const line = d3.line()\n      .x(d => xScale(d.x))\n      .y(d => yScale(d.y))\n      .curve(d3.curveBasis);\n    \n    // Draw SGD loss curve\n    svg.append('path')\n      .datum(sgdData)\n      .attr('fill', 'none')\n      .attr('stroke', 'blue')\n      .attr('stroke-width', 3)\n      .attr('stroke-dasharray', '5,5')\n      .attr('d', line);\n    \n    // Draw Adam loss curve\n    svg.append('path')\n      .datum(adamData)\n      .attr('fill', 'none')\n      .attr('stroke', 'green')\n      .attr('stroke-width', 3)\n      .attr('d', line);\n    \n    // Draw AdamW loss curve\n    svg.append('path')\n      .datum(adamWData)\n      .attr('fill', 'none')\n      .attr('stroke', 'purple')\n      .attr('stroke-width', 3)\n      .attr('d', line);\n    \n    // Highlight saddle point region\n    svg.append('rect')\n      .attr('x', xScale(30))\n      .attr('y', yScale(0.25))\n      .attr('width', xScale(80) - xScale(30))\n      .attr('height', yScale(0.15) - yScale(0.25))\n      .attr('fill', 'rgba(255, 255, 0, 0.2)')\n      .attr('stroke', 'orange')\n      .attr('stroke-dasharray', '3,3');\n    \n    svg.append('text')\n      .attr('x', xScale(55))\n      .attr('y', yScale(0.27))\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .text('Saddle Point Region');\n    \n    // Add annotations\n    svg.append('text')\n      .attr('x', xScale(70))\n      .attr('y', yScale(0.19))\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .attr('fill', 'blue')\n      .attr('font-weight', 'bold')\n      .text('SGD gets stuck');\n    \n    svg.append('text')\n      .attr('x', xScale(60))\n      .attr('y', yScale(0.08))\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .attr('fill', 'green')\n      .attr('font-weight', 'bold')\n      .text('Adam escapes');\n    \n    svg.append('text')\n      .attr('x', xScale(50))\n      .attr('y', yScale(0.04))\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .attr('fill', 'purple')\n      .attr('font-weight', 'bold')\n      .text('AdamW escapes faster');\n    \n    // Add title\n    svg.append('text')\n      .attr('x', innerWidth / 2)\n      .attr('y', -20)\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '16px')\n      .attr('font-weight', 'bold')\n      .text('Optimizer Comparison at Saddle Points');\n    \n    // Add legend with full names\n    const legend = svg.append('g')\n      .attr('transform', `translate(${innerWidth - 250}, 20)`);\n    \n    legend.append('line')\n      .attr('x1', 0)\n      .attr('y1', 0)\n      .attr('x2', 20)\n      .attr('y2', 0)\n      .attr('stroke', 'blue')\n      .attr('stroke-width', 2)\n      .attr('stroke-dasharray', '5,5');\n    \n    legend.append('text')\n      .attr('x', 25)\n      .attr('y', 5)\n      .attr('font-size', '12px')\n      .text('SGD (Stochastic Gradient Descent)');\n    \n    legend.append('line')\n      .attr('x1', 0)\n      .attr('y1', 20)\n      .attr('x2', 20)\n      .attr('y2', 20)\n      .attr('stroke', 'green')\n      .attr('stroke-width', 2);\n    \n    legend.append('text')\n      .attr('x', 25)\n      .attr('y', 25)\n      .attr('font-size', '12px')\n      .text('Adam (Adaptive Moment Estimation)');\n    \n    legend.append('line')\n      .attr('x1', 0)\n      .attr('y1', 40)\n      .attr('x2', 20)\n      .attr('y2', 40)\n      .attr('stroke', 'purple')\n      .attr('stroke-width', 2);\n    \n    legend.append('text')\n      .attr('x', 25)\n      .attr('y', 45)\n      .attr('font-size', '12px')\n      .text('AdamW (Adam with Decoupled Weight Decay)');\n    \n    // Draw small saddle function visualization\n    const saddleSize = 120;\n    const saddleX = 100;\n    const saddleY = 150;\n    \n    // Create a small saddle function visualization\n    const saddle = svg.append('g')\n      .attr('transform', `translate(${saddleX}, ${saddleY})`);\n    \n    // Add background for the saddle visualization\n    saddle.append('rect')\n      .attr('x', -10)\n      .attr('y', -10)\n      .attr('width', saddleSize + 20)\n      .attr('height', saddleSize + 20)\n      .attr('fill', 'rgba(240, 240, 240, 0.8)')\n      .attr('rx', 10);\n    \n    // Draw simplified saddle surface\n    const saddleScale = d3.scaleLinear().domain([-1, 1]).range([0, saddleSize]);\n    \n    // Create grid points for the saddle\n    const points = [];\n    for (let x = -1; x <= 1; x += 0.1) {\n      for (let y = -1; y <= 1; y += 0.1) {\n        const z = x * x - y * y; // Saddle function\n        points.push({ x, y, z });\n      }\n    }\n    \n    // Color scale for height\n    const colorScale = d3.scaleLinear()\n      .domain([-1, 0, 1])\n      .range(['steelblue', 'white', 'firebrick']);\n    \n    // Draw saddle points\n    saddle.selectAll('.saddle-point')\n      .data(points)\n      .enter()\n      .append('circle')\n      .attr('cx', d => saddleScale(d.x))\n      .attr('cy', d => saddleScale(d.y))\n      .attr('r', 3)\n      .attr('fill', d => colorScale(d.z))\n      .attr('opacity', 0.7);\n    \n    // Draw simplified trajectories on the saddle\n    const sgdSaddleTrajectory = [\n      { x: -0.8, y: 0.2 }, { x: -0.5, y: 0.1 }, { x: -0.2, y: 0.05 },\n      { x: -0.1, y: 0.02 }, { x: -0.05, y: 0.01 }, { x: -0.02, y: 0.005 },\n      { x: -0.01, y: 0.002 }, { x: 0, y: 0 } // Gets stuck\n    ];\n    \n    const adamSaddleTrajectory = [\n      { x: -0.8, y: 0.2 }, { x: -0.5, y: 0.1 }, { x: -0.2, y: 0.05 },\n      { x: 0, y: 0 }, { x: 0.2, y: -0.1 }, { x: 0.4, y: -0.2 },\n      { x: 0.6, y: -0.3 }, { x: 0.8, y: -0.4 } // Passes through\n    ];\n    \n    const adamWSaddleTrajectory = [\n      { x: -0.8, y: 0.2 }, { x: -0.4, y: 0.1 }, { x: -0.1, y: 0.03 },\n      { x: 0, y: -0.02 }, { x: 0.15, y: -0.15 }, { x: 0.35, y: -0.3 },\n      { x: 0.6, y: -0.5 }, { x: 0.9, y: -0.7 } // Passes through with more direct path\n    ];\n    \n    // Draw SGD path on saddle\n    saddle.append('path')\n      .datum(sgdSaddleTrajectory)\n      .attr('fill', 'none')\n      .attr('stroke', 'blue')\n      .attr('stroke-width', 2)\n      .attr('stroke-dasharray', '3,3')\n      .attr('d', d3.line()\n        .x(d => saddleScale(d.x))\n        .y(d => saddleScale(d.y))\n        .curve(d3.curveBasis));\n    \n    // Draw Adam path on saddle\n    saddle.append('path')\n      .datum(adamSaddleTrajectory)\n      .attr('fill', 'none')\n      .attr('stroke', 'green')\n      .attr('stroke-width', 2)\n      .attr('d', d3.line()\n        .x(d => saddleScale(d.x))\n        .y(d => saddleScale(d.y))\n        .curve(d3.curveBasis));\n    \n    // Draw AdamW path on saddle\n    saddle.append('path')\n      .datum(adamWSaddleTrajectory)\n      .attr('fill', 'none')\n      .attr('stroke', 'purple')\n      .attr('stroke-width', 2)\n      .attr('d', d3.line()\n        .x(d => saddleScale(d.x))\n        .y(d => saddleScale(d.y))\n        .curve(d3.curveBasis));\n    \n    // Mark saddle point\n    saddle.append('circle')\n      .attr('cx', saddleScale(0))\n      .attr('cy', saddleScale(0))\n      .attr('r', 5)\n      .attr('fill', 'yellow')\n      .attr('stroke', 'black');\n    \n    // Add saddle title\n    saddle.append('text')\n      .attr('x', saddleSize / 2)\n      .attr('y', -5)\n      .attr('text-anchor', 'middle')\n      .attr('font-size', '12px')\n      .attr('font-weight', 'bold')\n      .text('Saddle Point (x² - y²)');\n  };\n  \n  return (\n    <div className=\"w-full max-w-4xl mx-auto\">\n      <div id=\"viz-container\" className=\"w-full h-[500px] border rounded bg-white p-4\"></div>\n      \n      <div className=\"mt-6 grid grid-cols-1 md:grid-cols-3 gap-4 bg-gray-50 p-4 rounded-lg\">\n        <div className=\"bg-white p-4 rounded shadow\">\n          <h3 className=\"text-lg font-bold text-blue-700 mb-2\">Stochastic Gradient Descent (SGD)</h3>\n          <p>Uses the same learning rate for all parameters and applies no momentum by default. Near saddle points, all gradients become very small, causing SGD to slow down dramatically or get \"stuck\" for many iterations.</p>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded shadow\">\n          <h3 className=\"text-lg font-bold text-green-700 mb-2\">Adaptive Moment Estimation (Adam)</h3>\n          <p>Maintains separate learning rates for each parameter based on gradient history. These adaptive rates automatically increase when gradients are consistently small, allowing it to escape saddle points faster.</p>\n        </div>\n        \n        <div className=\"bg-white p-4 rounded shadow\">\n          <h3 className=\"text-lg font-bold text-purple-700 mb-2\">Adam with Decoupled Weight Decay (AdamW)</h3>\n          <p>Extends Adam by applying weight decay directly to weights rather than to gradients. This decoupling helps break symmetry at saddle points and provides better regularization, often resulting in even faster escape.</p>\n        </div>\n        \n        <div className=\"col-span-1 md:col-span-3 bg-yellow-50 p-4 rounded shadow\">\n          <h3 className=\"text-lg font-bold mb-2\">Mathematical Components of Adaptive Methods</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <h4 className=\"font-bold\">How Adam Works:</h4>\n              <ul className=\"list-disc pl-5 space-y-1\">\n                <li><span className=\"font-semibold\">First Moment:</span> m<sub>t</sub> = β<sub>1</sub>·m<sub>t-1</sub> + (1-β<sub>1</sub>)·g<sub>t</sub> (provides momentum)</li>\n                <li><span className=\"font-semibold\">Second Moment:</span> v<sub>t</sub> = β<sub>2</sub>·v<sub>t-1</sub> + (1-β<sub>2</sub>)·g<sub>t</sub>² (estimates variance)</li>\n                <li><span className=\"font-semibold\">Bias Correction:</span> m̂<sub>t</sub> = m<sub>t</sub>/(1-β<sub>1</sub><sup>t</sup>), v̂<sub>t</sub> = v<sub>t</sub>/(1-β<sub>2</sub><sup>t</sup>)</li>\n                <li><span className=\"font-semibold\">Parameter Update:</span> θ<sub>t+1</sub> = θ<sub>t</sub> - α·m̂<sub>t</sub>/(√v̂<sub>t</sub> + ε)</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"font-bold\">How AdamW Differs:</h4>\n              <ul className=\"list-disc pl-5 space-y-1\">\n                <li><span className=\"font-semibold\">Standard Adam:</span> Applies L2 regularization within gradient: g<sub>t</sub> = ∇f(θ<sub>t</sub>) + λθ<sub>t</sub></li>\n                <li><span className=\"font-semibold\">AdamW:</span> Decouples weight decay: θ<sub>t+1</sub> = θ<sub>t</sub> - α·m̂<sub>t</sub>/(√v̂<sub>t</sub> + ε) - α·λ·θ<sub>t</sub></li>\n                <li><span className=\"font-semibold\">Benefit:</span> More effective regularization that is independent of gradient magnitude</li>\n                <li><span className=\"font-semibold\">Saddle Point Impact:</span> Helps overcome symmetrical parameter distributions often found at saddle points</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OptimizerComparison;\n","import React, { useState } from 'react';\nimport NeuralNetworkVisualization from './components/NeuralNetworkFunctionApproximator';\nimport VAEVisualizer from './components/VAEVisualizer';\nimport GradientDescent from './components/GradientDescentAtSaddlePoint'\n\nfunction App() {\n  const [activeComponent, setActiveComponent] = useState('neural');\n  \n  return (\n    <div className=\"App\">\n      <header style={{ padding: '12px 20px', display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderBottom: '1px solid #e0e0e0' }}>\n        <div style={{ fontSize: '16px', fontWeight: 'bold' }}>Neural Network Visualizer</div>\n        <div className=\"tabs\" style={{ display: 'flex' }}>\n          <button \n            onClick={() => setActiveComponent('neural')}\n            style={{\n              padding: '8px 16px',\n              marginRight: '8px',\n              border: 'none',\n              borderRadius: '4px',\n              backgroundColor: activeComponent === 'neural' ? '#007bff' : '#f0f0f0',\n              color: activeComponent === 'neural' ? 'white' : 'black',\n              cursor: 'pointer',\n              fontWeight: activeComponent === 'neural' ? 'bold' : 'normal',\n              transition: 'background-color 0.2s'\n            }}\n          >\n            Neural Network\n          </button>\n          <button \n            onClick={() => setActiveComponent('vae')}\n            style={{\n              padding: '8px 16px',\n              border: 'none',\n              borderRadius: '4px',\n              backgroundColor: activeComponent === 'vae' ? '#007bff' : '#f0f0f0',\n              color: activeComponent === 'vae' ? 'white' : 'black',\n              cursor: 'pointer',\n              fontWeight: activeComponent === 'vae' ? 'bold' : 'normal',\n              transition: 'background-color 0.2s'\n            }}\n          >\n            VAE Visualizer\n          </button>\n          <button \n            onClick={() => setActiveComponent('gd')}\n            style={{\n              padding: '8px 16px',\n              border: 'none',\n              borderRadius: '4px',\n              backgroundColor: activeComponent === 'gd' ? '#007bff' : '#f0f0f0',\n              color: activeComponent === 'gd' ? 'white' : 'black',\n              cursor: 'pointer',\n              fontWeight: activeComponent === 'gd' ? 'bold' : 'normal',\n              transition: 'background-color 0.2s'\n            }}\n          >\n            Gradient Descent at Saddle Point\n          </button>\n\n        </div>\n      </header>\n      \n      <div style={{ padding: '20px' }}>\n        {activeComponent === 'neural' && <NeuralNetworkVisualization />}\n        {activeComponent === 'vae' && <VAEVisualizer />}\n        {activeComponent === 'gd' && <GradientDescent />}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}